/*
 * Kenjo API
 * Before starting to use the Kenjo API, you have to request the API activation for a sandbox or production environment to the Kenjo Customer Success team. After that, an admin user has to go to *Settings > Integrations > API keys*, to generate the **API Key**. Follow the steps described in the **Autentication section** of this document. <br>The API key is needed to request the bearer token. Each endpoint callout requires a valid bearer token in the Authorization header. Once the token is retrieved, it will be useful during the time limit indicated by the 'expiration date'.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.OfficesCreateNewOfficeRequest;
import com.konfigthis.client.model.OfficesCreateNewOfficeResponse;
import com.konfigthis.client.model.OfficesGetByIdResponse;
import com.konfigthis.client.model.OfficesGetListResponseInner;
import com.konfigthis.client.model.OfficesUpdateOfficeAttributesRequest;
import com.konfigthis.client.model.OfficesUpdateOfficeAttributesResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OfficesApi
 */
@Disabled
public class OfficesApiTest {

    private static OfficesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new OfficesApi(apiClient);
    }

    /**
     * Creates a new office.&lt;br&gt;&lt;br&gt;The required fields are *name*, *companyId*, *calendarId*.&lt;br&gt;Optional fields are *street*, *postalCode*, *city* and *country*. &lt;br&gt; The *country* field has to be a valid ISO country code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewOfficeTest() throws ApiException {
        String authorization = null;
        String name = null;
        String companyId = null;
        String calendarId = null;
        String country = null;
        String postalCode = null;
        String city = null;
        String street = null;
        OfficesCreateNewOfficeResponse response = api.createNewOffice(authorization)
                .name(name)
                .companyId(companyId)
                .calendarId(calendarId)
                .country(country)
                .postalCode(postalCode)
                .city(city)
                .street(street)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns the office referenced by *id*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String id = null;
        String authorization = null;
        OfficesGetByIdResponse response = api.getById(id, authorization)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a list of the existing offices in Kenjo.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListTest() throws ApiException {
        String authorization = null;
        String name = null;
        String companyId = null;
        String calendarId = null;
        String street = null;
        String postalCode = null;
        String city = null;
        String country = null;
        List<OfficesGetListResponseInner> response = api.getList(authorization)
                .name(name)
                .companyId(companyId)
                .calendarId(calendarId)
                .street(street)
                .postalCode(postalCode)
                .city(city)
                .country(country)
                .execute();
        // TODO: test validations
    }

    /**
     * Removes the office referenced by *id*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeByIdTest() throws ApiException {
        String id = null;
        String authorization = null;
        api.removeById(id, authorization)
                .execute();
        // TODO: test validations
    }

    /**
     * Updates an office referenced by *id*. Only the attributes submitted are modified.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOfficeAttributesTest() throws ApiException {
        String id = null;
        String authorization = null;
        String name = null;
        OfficesUpdateOfficeAttributesResponse response = api.updateOfficeAttributes(id, authorization)
                .name(name)
                .execute();
        // TODO: test validations
    }

}
