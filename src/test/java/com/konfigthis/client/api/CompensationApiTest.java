/*
 * Kenjo API
 * Before starting to use the Kenjo API, you have to request the API activation for a sandbox or production environment to the Kenjo Customer Success team. After that, an admin user has to go to *Settings > Integrations > API keys*, to generate the **API Key**. Follow the steps described in the **Autentication section** of this document. <br>The API key is needed to request the bearer token. Each endpoint callout requires a valid bearer token in the Authorization header. Once the token is retrieved, it will be useful during the time limit indicated by the 'expiration date'.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CompensationGetContractsResponse;
import com.konfigthis.client.model.CompensationGetSalariesListResponse;
import com.konfigthis.client.model.CompensationListAdditionalPaymentTypesResponse;
import com.konfigthis.client.model.CompensationListAdditionalPaymentsResponse;
import com.konfigthis.client.model.CompensationListContractTypesResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CompensationApi
 */
@Disabled
public class CompensationApiTest {

    private static CompensationApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CompensationApi(apiClient);
    }

    /**
     * This endpoint returns a paginated list of employment contracts. The URL params help to return more accurate results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContractsTest() throws ApiException {
        String authorization = null;
        String contractTypeId = null;
        String userId = null;
        String companyId = null;
        Double offset = null;
        Double limit = null;
        CompensationGetContractsResponse response = api.getContracts(authorization)
                .contractTypeId(contractTypeId)
                .userId(userId)
                .companyId(companyId)
                .offset(offset)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * This endpoint returns a paginated list of employment salaries. The URL params help to return more accurate results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSalariesListTest() throws ApiException {
        String authorization = null;
        String userId = null;
        String companyId = null;
        String paymentPeriod = null;
        String currency = null;
        Double offset = null;
        Double limit = null;
        CompensationGetSalariesListResponse response = api.getSalariesList(authorization)
                .userId(userId)
                .companyId(companyId)
                .paymentPeriod(paymentPeriod)
                .currency(currency)
                .offset(offset)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * This endpoint returns a paginated list of additional payment types. The URL params help to return more accurate results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAdditionalPaymentTypesTest() throws ApiException {
        String authorization = null;
        Double offset = null;
        Double limit = null;
        CompensationListAdditionalPaymentTypesResponse response = api.listAdditionalPaymentTypes(authorization)
                .offset(offset)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * This endpoint returns a paginated list of additional payments. The URL params help to return more accurate results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAdditionalPaymentsTest() throws ApiException {
        String authorization = null;
        String userId = null;
        String companyId = null;
        String currency = null;
        Double offset = null;
        Double limit = null;
        CompensationListAdditionalPaymentsResponse response = api.listAdditionalPayments(authorization)
                .userId(userId)
                .companyId(companyId)
                .currency(currency)
                .offset(offset)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * This endpoint returns a paginated list of contract types. The URL params help to return more accurate results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listContractTypesTest() throws ApiException {
        String authorization = null;
        Boolean isActive = null;
        CompensationListContractTypesResponse response = api.listContractTypes(authorization)
                .isActive(isActive)
                .execute();
        // TODO: test validations
    }

}
