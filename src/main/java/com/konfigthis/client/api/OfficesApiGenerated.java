/*
 * Kenjo API
 * Before starting to use the Kenjo API, you have to request the API activation for a sandbox or production environment to the Kenjo Customer Success team. After that, an admin user has to go to *Settings > Integrations > API keys*, to generate the **API Key**. Follow the steps described in the **Autentication section** of this document. <br>The API key is needed to request the bearer token. Each endpoint callout requires a valid bearer token in the Authorization header. Once the token is retrieved, it will be useful during the time limit indicated by the 'expiration date'.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.OfficesCreateNewOfficeRequest;
import com.konfigthis.client.model.OfficesCreateNewOfficeResponse;
import com.konfigthis.client.model.OfficesGetByIdResponse;
import com.konfigthis.client.model.OfficesGetListResponseInner;
import com.konfigthis.client.model.OfficesUpdateOfficeAttributesRequest;
import com.konfigthis.client.model.OfficesUpdateOfficeAttributesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OfficesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OfficesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OfficesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewOfficeCall(String authorization, OfficesCreateNewOfficeRequest officesCreateNewOfficeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = officesCreateNewOfficeRequest;

        // create path and map variables
        String localVarPath = "/offices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewOfficeValidateBeforeCall(String authorization, OfficesCreateNewOfficeRequest officesCreateNewOfficeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createNewOffice(Async)");
        }

        // verify the required parameter 'officesCreateNewOfficeRequest' is set
        if (officesCreateNewOfficeRequest == null) {
            throw new ApiException("Missing the required parameter 'officesCreateNewOfficeRequest' when calling createNewOffice(Async)");
        }

        return createNewOfficeCall(authorization, officesCreateNewOfficeRequest, _callback);

    }


    private ApiResponse<OfficesCreateNewOfficeResponse> createNewOfficeWithHttpInfo(String authorization, OfficesCreateNewOfficeRequest officesCreateNewOfficeRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewOfficeValidateBeforeCall(authorization, officesCreateNewOfficeRequest, null);
        Type localVarReturnType = new TypeToken<OfficesCreateNewOfficeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewOfficeAsync(String authorization, OfficesCreateNewOfficeRequest officesCreateNewOfficeRequest, final ApiCallback<OfficesCreateNewOfficeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewOfficeValidateBeforeCall(authorization, officesCreateNewOfficeRequest, _callback);
        Type localVarReturnType = new TypeToken<OfficesCreateNewOfficeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewOfficeRequestBuilder {
        private final String authorization;
        private String name;
        private String companyId;
        private String calendarId;
        private String country;
        private String postalCode;
        private String city;
        private String street;

        private CreateNewOfficeRequestBuilder(String authorization) {
            this.authorization = authorization;
        }

        /**
         * Set name
         * @param name The new name of the office to create. Required field. (optional)
         * @return CreateNewOfficeRequestBuilder
         */
        public CreateNewOfficeRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set companyId
         * @param companyId The company id of the office to create. Required field. (optional)
         * @return CreateNewOfficeRequestBuilder
         */
        public CreateNewOfficeRequestBuilder companyId(String companyId) {
            this.companyId = companyId;
            return this;
        }
        
        /**
         * Set calendarId
         * @param calendarId The calendar id of the office to create. Required field. (optional)
         * @return CreateNewOfficeRequestBuilder
         */
        public CreateNewOfficeRequestBuilder calendarId(String calendarId) {
            this.calendarId = calendarId;
            return this;
        }
        
        /**
         * Set country
         * @param country The country of the office to create in ISO code. (optional)
         * @return CreateNewOfficeRequestBuilder
         */
        public CreateNewOfficeRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set postalCode
         * @param postalCode The postal code of the office to create. (optional)
         * @return CreateNewOfficeRequestBuilder
         */
        public CreateNewOfficeRequestBuilder postalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
        }
        
        /**
         * Set city
         * @param city The city of the office to create. (optional)
         * @return CreateNewOfficeRequestBuilder
         */
        public CreateNewOfficeRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set street
         * @param street The street of the office to create. (optional)
         * @return CreateNewOfficeRequestBuilder
         */
        public CreateNewOfficeRequestBuilder street(String street) {
            this.street = street;
            return this;
        }
        
        /**
         * Build call for createNewOffice
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OfficesCreateNewOfficeRequest officesCreateNewOfficeRequest = buildBodyParams();
            return createNewOfficeCall(authorization, officesCreateNewOfficeRequest, _callback);
        }

        private OfficesCreateNewOfficeRequest buildBodyParams() {
            OfficesCreateNewOfficeRequest officesCreateNewOfficeRequest = new OfficesCreateNewOfficeRequest();
            officesCreateNewOfficeRequest.name(this.name);
            officesCreateNewOfficeRequest.companyId(this.companyId);
            officesCreateNewOfficeRequest.calendarId(this.calendarId);
            officesCreateNewOfficeRequest.country(this.country);
            officesCreateNewOfficeRequest.postalCode(this.postalCode);
            officesCreateNewOfficeRequest.city(this.city);
            officesCreateNewOfficeRequest.street(this.street);
            return officesCreateNewOfficeRequest;
        }

        /**
         * Execute createNewOffice request
         * @return OfficesCreateNewOfficeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public OfficesCreateNewOfficeResponse execute() throws ApiException {
            OfficesCreateNewOfficeRequest officesCreateNewOfficeRequest = buildBodyParams();
            ApiResponse<OfficesCreateNewOfficeResponse> localVarResp = createNewOfficeWithHttpInfo(authorization, officesCreateNewOfficeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewOffice request with HTTP info returned
         * @return ApiResponse&lt;OfficesCreateNewOfficeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OfficesCreateNewOfficeResponse> executeWithHttpInfo() throws ApiException {
            OfficesCreateNewOfficeRequest officesCreateNewOfficeRequest = buildBodyParams();
            return createNewOfficeWithHttpInfo(authorization, officesCreateNewOfficeRequest);
        }

        /**
         * Execute createNewOffice request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OfficesCreateNewOfficeResponse> _callback) throws ApiException {
            OfficesCreateNewOfficeRequest officesCreateNewOfficeRequest = buildBodyParams();
            return createNewOfficeAsync(authorization, officesCreateNewOfficeRequest, _callback);
        }
    }

    /**
     * 
     * Creates a new office.&lt;br&gt;&lt;br&gt;The required fields are *name*, *companyId*, *calendarId*.&lt;br&gt;Optional fields are *street*, *postalCode*, *city* and *country*. &lt;br&gt; The *country* field has to be a valid ISO country code.
     * @param authorization A valid bearer token. (required)
     * @param officesCreateNewOfficeRequest  (required)
     * @return CreateNewOfficeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewOfficeRequestBuilder createNewOffice(String authorization) throws IllegalArgumentException {
        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new CreateNewOfficeRequestBuilder(authorization);
    }
    private okhttp3.Call getByIdCall(String id, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offices/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String id, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getById(Async)");
        }

        return getByIdCall(id, authorization, _callback);

    }


    private ApiResponse<OfficesGetByIdResponse> getByIdWithHttpInfo(String id, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, authorization, null);
        Type localVarReturnType = new TypeToken<OfficesGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String id, String authorization, final ApiCallback<OfficesGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, authorization, _callback);
        Type localVarReturnType = new TypeToken<OfficesGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String id;
        private final String authorization;

        private GetByIdRequestBuilder(String id, String authorization) {
            this.id = id;
            this.authorization = authorization;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, authorization, _callback);
        }


        /**
         * Execute getById request
         * @return OfficesGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public OfficesGetByIdResponse execute() throws ApiException {
            ApiResponse<OfficesGetByIdResponse> localVarResp = getByIdWithHttpInfo(id, authorization);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;OfficesGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OfficesGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id, authorization);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OfficesGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(id, authorization, _callback);
        }
    }

    /**
     * 
     * Returns the office referenced by *id*.
     * @param id The _id of the office entry to request. (required)
     * @param authorization A valid bearer token. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String id, String authorization) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new GetByIdRequestBuilder(id, authorization);
    }
    private okhttp3.Call getListCall(String authorization, String name, String companyId, String calendarId, String street, String postalCode, String city, String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyId", companyId));
        }

        if (calendarId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calendarId", calendarId));
        }

        if (street != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("street", street));
        }

        if (postalCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postalCode", postalCode));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(String authorization, String name, String companyId, String calendarId, String street, String postalCode, String city, String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getList(Async)");
        }

        return getListCall(authorization, name, companyId, calendarId, street, postalCode, city, country, _callback);

    }


    private ApiResponse<List<OfficesGetListResponseInner>> getListWithHttpInfo(String authorization, String name, String companyId, String calendarId, String street, String postalCode, String city, String country) throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(authorization, name, companyId, calendarId, street, postalCode, city, country, null);
        Type localVarReturnType = new TypeToken<List<OfficesGetListResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(String authorization, String name, String companyId, String calendarId, String street, String postalCode, String city, String country, final ApiCallback<List<OfficesGetListResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(authorization, name, companyId, calendarId, street, postalCode, city, country, _callback);
        Type localVarReturnType = new TypeToken<List<OfficesGetListResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {
        private final String authorization;
        private String name;
        private String companyId;
        private String calendarId;
        private String street;
        private String postalCode;
        private String city;
        private String country;

        private GetListRequestBuilder(String authorization) {
            this.authorization = authorization;
        }

        /**
         * Set name
         * @param name The name of the office. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set companyId
         * @param companyId The Kenjo id of the company. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder companyId(String companyId) {
            this.companyId = companyId;
            return this;
        }
        
        /**
         * Set calendarId
         * @param calendarId The Kenjo id of the calendar. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder calendarId(String calendarId) {
            this.calendarId = calendarId;
            return this;
        }
        
        /**
         * Set street
         * @param street The street of the office. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder street(String street) {
            this.street = street;
            return this;
        }
        
        /**
         * Set postalCode
         * @param postalCode The postal code of the office. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder postalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
        }
        
        /**
         * Set city
         * @param city The city of the office. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set country
         * @param country The country of the office in ISO code. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(authorization, name, companyId, calendarId, street, postalCode, city, country, _callback);
        }


        /**
         * Execute getList request
         * @return List&lt;OfficesGetListResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public List<OfficesGetListResponseInner> execute() throws ApiException {
            ApiResponse<List<OfficesGetListResponseInner>> localVarResp = getListWithHttpInfo(authorization, name, companyId, calendarId, street, postalCode, city, country);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OfficesGetListResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OfficesGetListResponseInner>> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo(authorization, name, companyId, calendarId, street, postalCode, city, country);
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OfficesGetListResponseInner>> _callback) throws ApiException {
            return getListAsync(authorization, name, companyId, calendarId, street, postalCode, city, country, _callback);
        }
    }

    /**
     * 
     * Returns a list of the existing offices in Kenjo.
     * @param authorization A valid bearer token. (required)
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList(String authorization) throws IllegalArgumentException {
        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new GetListRequestBuilder(authorization);
    }
    private okhttp3.Call removeByIdCall(String id, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offices/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String id, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeById(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling removeById(Async)");
        }

        return removeByIdCall(id, authorization, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(String id, String authorization) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(id, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(String id, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(id, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String id;
        private final String authorization;

        private RemoveByIdRequestBuilder(String id, String authorization) {
            this.id = id;
            this.authorization = authorization;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(id, authorization, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(id, authorization);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(id, authorization);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(id, authorization, _callback);
        }
    }

    /**
     * 
     * Removes the office referenced by *id*.
     * @param id The _id of the office entry to request. (required)
     * @param authorization A valid bearer token. (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String id, String authorization) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new RemoveByIdRequestBuilder(id, authorization);
    }
    private okhttp3.Call updateOfficeAttributesCall(String id, String authorization, OfficesUpdateOfficeAttributesRequest officesUpdateOfficeAttributesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = officesUpdateOfficeAttributesRequest;

        // create path and map variables
        String localVarPath = "/offices/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOfficeAttributesValidateBeforeCall(String id, String authorization, OfficesUpdateOfficeAttributesRequest officesUpdateOfficeAttributesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateOfficeAttributes(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateOfficeAttributes(Async)");
        }

        // verify the required parameter 'officesUpdateOfficeAttributesRequest' is set
        if (officesUpdateOfficeAttributesRequest == null) {
            throw new ApiException("Missing the required parameter 'officesUpdateOfficeAttributesRequest' when calling updateOfficeAttributes(Async)");
        }

        return updateOfficeAttributesCall(id, authorization, officesUpdateOfficeAttributesRequest, _callback);

    }


    private ApiResponse<OfficesUpdateOfficeAttributesResponse> updateOfficeAttributesWithHttpInfo(String id, String authorization, OfficesUpdateOfficeAttributesRequest officesUpdateOfficeAttributesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOfficeAttributesValidateBeforeCall(id, authorization, officesUpdateOfficeAttributesRequest, null);
        Type localVarReturnType = new TypeToken<OfficesUpdateOfficeAttributesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateOfficeAttributesAsync(String id, String authorization, OfficesUpdateOfficeAttributesRequest officesUpdateOfficeAttributesRequest, final ApiCallback<OfficesUpdateOfficeAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOfficeAttributesValidateBeforeCall(id, authorization, officesUpdateOfficeAttributesRequest, _callback);
        Type localVarReturnType = new TypeToken<OfficesUpdateOfficeAttributesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateOfficeAttributesRequestBuilder {
        private final String id;
        private final String authorization;
        private String name;

        private UpdateOfficeAttributesRequestBuilder(String id, String authorization) {
            this.id = id;
            this.authorization = authorization;
        }

        /**
         * Set name
         * @param name The new name of the office to update. (optional)
         * @return UpdateOfficeAttributesRequestBuilder
         */
        public UpdateOfficeAttributesRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateOfficeAttributes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OfficesUpdateOfficeAttributesRequest officesUpdateOfficeAttributesRequest = buildBodyParams();
            return updateOfficeAttributesCall(id, authorization, officesUpdateOfficeAttributesRequest, _callback);
        }

        private OfficesUpdateOfficeAttributesRequest buildBodyParams() {
            OfficesUpdateOfficeAttributesRequest officesUpdateOfficeAttributesRequest = new OfficesUpdateOfficeAttributesRequest();
            officesUpdateOfficeAttributesRequest.name(this.name);
            return officesUpdateOfficeAttributesRequest;
        }

        /**
         * Execute updateOfficeAttributes request
         * @return OfficesUpdateOfficeAttributesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public OfficesUpdateOfficeAttributesResponse execute() throws ApiException {
            OfficesUpdateOfficeAttributesRequest officesUpdateOfficeAttributesRequest = buildBodyParams();
            ApiResponse<OfficesUpdateOfficeAttributesResponse> localVarResp = updateOfficeAttributesWithHttpInfo(id, authorization, officesUpdateOfficeAttributesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateOfficeAttributes request with HTTP info returned
         * @return ApiResponse&lt;OfficesUpdateOfficeAttributesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OfficesUpdateOfficeAttributesResponse> executeWithHttpInfo() throws ApiException {
            OfficesUpdateOfficeAttributesRequest officesUpdateOfficeAttributesRequest = buildBodyParams();
            return updateOfficeAttributesWithHttpInfo(id, authorization, officesUpdateOfficeAttributesRequest);
        }

        /**
         * Execute updateOfficeAttributes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OfficesUpdateOfficeAttributesResponse> _callback) throws ApiException {
            OfficesUpdateOfficeAttributesRequest officesUpdateOfficeAttributesRequest = buildBodyParams();
            return updateOfficeAttributesAsync(id, authorization, officesUpdateOfficeAttributesRequest, _callback);
        }
    }

    /**
     * 
     * Updates an office referenced by *id*. Only the attributes submitted are modified.
     * @param id The _id of the office entry to request. (required)
     * @param authorization A valid bearer token. (required)
     * @param officesUpdateOfficeAttributesRequest  (required)
     * @return UpdateOfficeAttributesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateOfficeAttributesRequestBuilder updateOfficeAttributes(String id, String authorization) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new UpdateOfficeAttributesRequestBuilder(id, authorization);
    }
}
