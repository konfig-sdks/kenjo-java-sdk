/*
 * Kenjo API
 * Before starting to use the Kenjo API, you have to request the API activation for a sandbox or production environment to the Kenjo Customer Success team. After that, an admin user has to go to *Settings > Integrations > API keys*, to generate the **API Key**. Follow the steps described in the **Autentication section** of this document. <br>The API key is needed to request the bearer token. Each endpoint callout requires a valid bearer token in the Authorization header. Once the token is retrieved, it will be useful during the time limit indicated by the 'expiration date'.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CompensationGetContractsResponse;
import com.konfigthis.client.model.CompensationGetSalariesListResponse;
import com.konfigthis.client.model.CompensationListAdditionalPaymentTypesResponse;
import com.konfigthis.client.model.CompensationListAdditionalPaymentsResponse;
import com.konfigthis.client.model.CompensationListContractTypesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CompensationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CompensationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CompensationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getContractsCall(String authorization, String contractTypeId, String userId, String companyId, Double offset, Double limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/compensation/contracts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contractTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contractTypeId", contractTypeId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_userId", userId));
        }

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_companyId", companyId));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContractsValidateBeforeCall(String authorization, String contractTypeId, String userId, String companyId, Double offset, Double limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getContracts(Async)");
        }

        return getContractsCall(authorization, contractTypeId, userId, companyId, offset, limit, _callback);

    }


    private ApiResponse<CompensationGetContractsResponse> getContractsWithHttpInfo(String authorization, String contractTypeId, String userId, String companyId, Double offset, Double limit) throws ApiException {
        okhttp3.Call localVarCall = getContractsValidateBeforeCall(authorization, contractTypeId, userId, companyId, offset, limit, null);
        Type localVarReturnType = new TypeToken<CompensationGetContractsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContractsAsync(String authorization, String contractTypeId, String userId, String companyId, Double offset, Double limit, final ApiCallback<CompensationGetContractsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContractsValidateBeforeCall(authorization, contractTypeId, userId, companyId, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<CompensationGetContractsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContractsRequestBuilder {
        private final String authorization;
        private String contractTypeId;
        private String userId;
        private String companyId;
        private Double offset;
        private Double limit;

        private GetContractsRequestBuilder(String authorization) {
            this.authorization = authorization;
        }

        /**
         * Set contractTypeId
         * @param contractTypeId Optional filter. This field allows you to retrieve contracts based on their *contractTypeId*. It can accept two formats:&lt;br&gt;&lt;br&gt; 1. A single *contractTypeId* as a unique string. &lt;br&gt;Example: *contractTypeId&#x3D;80a2db290da29e126a18789c* &lt;br&gt;&lt;br&gt; 2. Multiple *contractTypeId* values separated by commas (up to a maximum of 15 values). &lt;br&gt;Example: *contractTypeId&#x3D;80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need. (optional)
         * @return GetContractsRequestBuilder
         */
        public GetContractsRequestBuilder contractTypeId(String contractTypeId) {
            this.contractTypeId = contractTypeId;
            return this;
        }
        
        /**
         * Set userId
         * @param userId Optional filter. This field allows you to retrieve contracts based on their *_userId*. It can accept two formats:&lt;br&gt;&lt;br&gt; 1. A single *_userId* as a unique string. &lt;br&gt;Example: *_userId&#x3D;80a2db290da29e126a18789c* &lt;br&gt;&lt;br&gt; 2. Multiple *_userId* values separated by commas (up to a maximum of 15 values). &lt;br&gt;Example: *_userId&#x3D;80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need. (optional)
         * @return GetContractsRequestBuilder
         */
        public GetContractsRequestBuilder userId(String userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set companyId
         * @param companyId Optional filter. This field allows you to retrieve contracts based on their *_companyId*. It can accept two formats:&lt;br&gt;&lt;br&gt; 1. A single *_companyId* as a unique string. &lt;br&gt;Example: *_companyId&#x3D;80a2db290da29e126a18789c* &lt;br&gt;&lt;br&gt; 2. Multiple *_companyId* values separated by commas (up to a maximum of 15 values). &lt;br&gt;Example: *_companyId&#x3D;80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need. (optional)
         * @return GetContractsRequestBuilder
         */
        public GetContractsRequestBuilder companyId(String companyId) {
            this.companyId = companyId;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Optional filter for pagination proposals. Determines the number of pages to skip when pagination is being used. If this value is not provided, by default the offset will be 1. (optional)
         * @return GetContractsRequestBuilder
         */
        public GetContractsRequestBuilder offset(Double offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Optional filter for pagination proposals. The maximum number of rows to retrieve which determines the size of the page. If this value is not provided then the limit will be 50 users. The maximum value of the limit is 100 users per page. Only are valid the following limit values: 25, 50 and 100. (optional)
         * @return GetContractsRequestBuilder
         */
        public GetContractsRequestBuilder limit(Double limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getContracts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContractsCall(authorization, contractTypeId, userId, companyId, offset, limit, _callback);
        }


        /**
         * Execute getContracts request
         * @return CompensationGetContractsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public CompensationGetContractsResponse execute() throws ApiException {
            ApiResponse<CompensationGetContractsResponse> localVarResp = getContractsWithHttpInfo(authorization, contractTypeId, userId, companyId, offset, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContracts request with HTTP info returned
         * @return ApiResponse&lt;CompensationGetContractsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompensationGetContractsResponse> executeWithHttpInfo() throws ApiException {
            return getContractsWithHttpInfo(authorization, contractTypeId, userId, companyId, offset, limit);
        }

        /**
         * Execute getContracts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompensationGetContractsResponse> _callback) throws ApiException {
            return getContractsAsync(authorization, contractTypeId, userId, companyId, offset, limit, _callback);
        }
    }

    /**
     * 
     * This endpoint returns a paginated list of employment contracts. The URL params help to return more accurate results.
     * @param authorization A valid bearer token. (required)
     * @return GetContractsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public GetContractsRequestBuilder getContracts(String authorization) throws IllegalArgumentException {
        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new GetContractsRequestBuilder(authorization);
    }
    private okhttp3.Call getSalariesListCall(String authorization, String userId, String companyId, String paymentPeriod, String currency, Double offset, Double limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/compensation/salaries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_userId", userId));
        }

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_companyId", companyId));
        }

        if (paymentPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paymentPeriod", paymentPeriod));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSalariesListValidateBeforeCall(String authorization, String userId, String companyId, String paymentPeriod, String currency, Double offset, Double limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getSalariesList(Async)");
        }

        return getSalariesListCall(authorization, userId, companyId, paymentPeriod, currency, offset, limit, _callback);

    }


    private ApiResponse<CompensationGetSalariesListResponse> getSalariesListWithHttpInfo(String authorization, String userId, String companyId, String paymentPeriod, String currency, Double offset, Double limit) throws ApiException {
        okhttp3.Call localVarCall = getSalariesListValidateBeforeCall(authorization, userId, companyId, paymentPeriod, currency, offset, limit, null);
        Type localVarReturnType = new TypeToken<CompensationGetSalariesListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSalariesListAsync(String authorization, String userId, String companyId, String paymentPeriod, String currency, Double offset, Double limit, final ApiCallback<CompensationGetSalariesListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSalariesListValidateBeforeCall(authorization, userId, companyId, paymentPeriod, currency, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<CompensationGetSalariesListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSalariesListRequestBuilder {
        private final String authorization;
        private String userId;
        private String companyId;
        private String paymentPeriod;
        private String currency;
        private Double offset;
        private Double limit;

        private GetSalariesListRequestBuilder(String authorization) {
            this.authorization = authorization;
        }

        /**
         * Set userId
         * @param userId Optional filter. This field allows you to retrieve contracts based on their *_userId*. It can accept two formats:&lt;br&gt;&lt;br&gt; 1. A single *_userId* as a unique string. &lt;br&gt;Example: *_userId&#x3D;80a2db290da29e126a18789c* &lt;br&gt;&lt;br&gt; 2. Multiple *_userId* values separated by commas (up to a maximum of 15 values). &lt;br&gt;Example: *_userId&#x3D;80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need. (optional)
         * @return GetSalariesListRequestBuilder
         */
        public GetSalariesListRequestBuilder userId(String userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set companyId
         * @param companyId Optional filter. This field allows you to retrieve contracts based on their *_companyId*. It can accept two formats:&lt;br&gt;&lt;br&gt; 1. A single *_companyId* as a unique string. &lt;br&gt;Example: *_companyId&#x3D;80a2db290da29e126a18789c* &lt;br&gt;&lt;br&gt; 2. Multiple *_companyId* values separated by commas (up to a maximum of 15 values). &lt;br&gt;Example: *_companyId&#x3D;80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need. (optional)
         * @return GetSalariesListRequestBuilder
         */
        public GetSalariesListRequestBuilder companyId(String companyId) {
            this.companyId = companyId;
            return this;
        }
        
        /**
         * Set paymentPeriod
         * @param paymentPeriod Optional filter. This field allows you to retrieve contracts based on their *paymentPeriod*. Accepted values: &#39;Annual&#39;, &#39;Monthly&#39; and &#39;Hourly&#39;. It can accept two formats:&lt;br&gt;&lt;br&gt; 1. A single *paymentPeriod* as a unique string. &lt;br&gt;Example: *paymentPeriod&#x3D;Annual* &lt;br&gt;&lt;br&gt; 2. Multiple *paymentPeriod* values separated by commas (up to a maximum of 15 values). &lt;br&gt;Example: *paymentPeriod&#x3D;Annual,Monthly*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need. (optional)
         * @return GetSalariesListRequestBuilder
         */
        public GetSalariesListRequestBuilder paymentPeriod(String paymentPeriod) {
            this.paymentPeriod = paymentPeriod;
            return this;
        }
        
        /**
         * Set currency
         * @param currency Optional filter. This field allows you to retrieve contracts based on their *currency* (ISO 4217). It can accept two formats:&lt;br&gt;&lt;br&gt; 1. A single *currency* as a unique string. &lt;br&gt;Example: *currency&#x3D;EUR* &lt;br&gt;&lt;br&gt; 2. Multiple *currency* values separated by commas (up to a maximum of 15 values). &lt;br&gt;Example: *currency&#x3D;EUR,USD*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need. (optional)
         * @return GetSalariesListRequestBuilder
         */
        public GetSalariesListRequestBuilder currency(String currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Optional filter for pagination proposals. Determines the number of pages to skip when pagination is being used. If this value is not provided, by default the offset will be 1. (optional)
         * @return GetSalariesListRequestBuilder
         */
        public GetSalariesListRequestBuilder offset(Double offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Optional filter for pagination proposals. The maximum number of rows to retrieve which determines the size of the page. If this value is not provided then the limit will be 50 users. The maximum value of the limit is 100 users per page. Only are valid the following limit values: 25, 50 and 100. (optional)
         * @return GetSalariesListRequestBuilder
         */
        public GetSalariesListRequestBuilder limit(Double limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getSalariesList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSalariesListCall(authorization, userId, companyId, paymentPeriod, currency, offset, limit, _callback);
        }


        /**
         * Execute getSalariesList request
         * @return CompensationGetSalariesListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public CompensationGetSalariesListResponse execute() throws ApiException {
            ApiResponse<CompensationGetSalariesListResponse> localVarResp = getSalariesListWithHttpInfo(authorization, userId, companyId, paymentPeriod, currency, offset, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSalariesList request with HTTP info returned
         * @return ApiResponse&lt;CompensationGetSalariesListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompensationGetSalariesListResponse> executeWithHttpInfo() throws ApiException {
            return getSalariesListWithHttpInfo(authorization, userId, companyId, paymentPeriod, currency, offset, limit);
        }

        /**
         * Execute getSalariesList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompensationGetSalariesListResponse> _callback) throws ApiException {
            return getSalariesListAsync(authorization, userId, companyId, paymentPeriod, currency, offset, limit, _callback);
        }
    }

    /**
     * 
     * This endpoint returns a paginated list of employment salaries. The URL params help to return more accurate results.
     * @param authorization A valid bearer token. (required)
     * @return GetSalariesListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public GetSalariesListRequestBuilder getSalariesList(String authorization) throws IllegalArgumentException {
        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new GetSalariesListRequestBuilder(authorization);
    }
    private okhttp3.Call listAdditionalPaymentTypesCall(String authorization, Double offset, Double limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/compensation/additional-payment-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAdditionalPaymentTypesValidateBeforeCall(String authorization, Double offset, Double limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listAdditionalPaymentTypes(Async)");
        }

        return listAdditionalPaymentTypesCall(authorization, offset, limit, _callback);

    }


    private ApiResponse<CompensationListAdditionalPaymentTypesResponse> listAdditionalPaymentTypesWithHttpInfo(String authorization, Double offset, Double limit) throws ApiException {
        okhttp3.Call localVarCall = listAdditionalPaymentTypesValidateBeforeCall(authorization, offset, limit, null);
        Type localVarReturnType = new TypeToken<CompensationListAdditionalPaymentTypesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAdditionalPaymentTypesAsync(String authorization, Double offset, Double limit, final ApiCallback<CompensationListAdditionalPaymentTypesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAdditionalPaymentTypesValidateBeforeCall(authorization, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<CompensationListAdditionalPaymentTypesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAdditionalPaymentTypesRequestBuilder {
        private final String authorization;
        private Double offset;
        private Double limit;

        private ListAdditionalPaymentTypesRequestBuilder(String authorization) {
            this.authorization = authorization;
        }

        /**
         * Set offset
         * @param offset Optional filter for pagination proposals. Determines the number of pages to skip when pagination is being used. If this value is not provided, by default the offset will be 1. (optional)
         * @return ListAdditionalPaymentTypesRequestBuilder
         */
        public ListAdditionalPaymentTypesRequestBuilder offset(Double offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Optional filter for pagination proposals. The maximum number of rows to retrieve which determines the size of the page. If this value is not provided then the limit will be 50 users. The maximum value of the limit is 100 users per page. Only are valid the following limit values: 25, 50 and 100. (optional)
         * @return ListAdditionalPaymentTypesRequestBuilder
         */
        public ListAdditionalPaymentTypesRequestBuilder limit(Double limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listAdditionalPaymentTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAdditionalPaymentTypesCall(authorization, offset, limit, _callback);
        }


        /**
         * Execute listAdditionalPaymentTypes request
         * @return CompensationListAdditionalPaymentTypesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public CompensationListAdditionalPaymentTypesResponse execute() throws ApiException {
            ApiResponse<CompensationListAdditionalPaymentTypesResponse> localVarResp = listAdditionalPaymentTypesWithHttpInfo(authorization, offset, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAdditionalPaymentTypes request with HTTP info returned
         * @return ApiResponse&lt;CompensationListAdditionalPaymentTypesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompensationListAdditionalPaymentTypesResponse> executeWithHttpInfo() throws ApiException {
            return listAdditionalPaymentTypesWithHttpInfo(authorization, offset, limit);
        }

        /**
         * Execute listAdditionalPaymentTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompensationListAdditionalPaymentTypesResponse> _callback) throws ApiException {
            return listAdditionalPaymentTypesAsync(authorization, offset, limit, _callback);
        }
    }

    /**
     * 
     * This endpoint returns a paginated list of additional payment types. The URL params help to return more accurate results.
     * @param authorization A valid bearer token. (required)
     * @return ListAdditionalPaymentTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public ListAdditionalPaymentTypesRequestBuilder listAdditionalPaymentTypes(String authorization) throws IllegalArgumentException {
        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new ListAdditionalPaymentTypesRequestBuilder(authorization);
    }
    private okhttp3.Call listAdditionalPaymentsCall(String authorization, String userId, String companyId, String currency, Double offset, Double limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/compensation/additional-payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_userId", userId));
        }

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_companyId", companyId));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAdditionalPaymentsValidateBeforeCall(String authorization, String userId, String companyId, String currency, Double offset, Double limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listAdditionalPayments(Async)");
        }

        return listAdditionalPaymentsCall(authorization, userId, companyId, currency, offset, limit, _callback);

    }


    private ApiResponse<CompensationListAdditionalPaymentsResponse> listAdditionalPaymentsWithHttpInfo(String authorization, String userId, String companyId, String currency, Double offset, Double limit) throws ApiException {
        okhttp3.Call localVarCall = listAdditionalPaymentsValidateBeforeCall(authorization, userId, companyId, currency, offset, limit, null);
        Type localVarReturnType = new TypeToken<CompensationListAdditionalPaymentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAdditionalPaymentsAsync(String authorization, String userId, String companyId, String currency, Double offset, Double limit, final ApiCallback<CompensationListAdditionalPaymentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAdditionalPaymentsValidateBeforeCall(authorization, userId, companyId, currency, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<CompensationListAdditionalPaymentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAdditionalPaymentsRequestBuilder {
        private final String authorization;
        private String userId;
        private String companyId;
        private String currency;
        private Double offset;
        private Double limit;

        private ListAdditionalPaymentsRequestBuilder(String authorization) {
            this.authorization = authorization;
        }

        /**
         * Set userId
         * @param userId Optional filter. This field allows you to retrieve contracts based on their *_userId*. It can accept two formats:&lt;br&gt;&lt;br&gt; 1. A single *_userId* as a unique string. &lt;br&gt;Example: *_userId&#x3D;80a2db290da29e126a18789c* &lt;br&gt;&lt;br&gt; 2. Multiple *_userId* values separated by commas (up to a maximum of 15 values). &lt;br&gt;Example: *_userId&#x3D;80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need. (optional)
         * @return ListAdditionalPaymentsRequestBuilder
         */
        public ListAdditionalPaymentsRequestBuilder userId(String userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set companyId
         * @param companyId Optional filter. This field allows you to retrieve contracts based on their *_companyId*. It can accept two formats:&lt;br&gt;&lt;br&gt; 1. A single *_companyId* as a unique string. &lt;br&gt;Example: *_companyId&#x3D;80a2db290da29e126a18789c* &lt;br&gt;&lt;br&gt; 2. Multiple *_companyId* values separated by commas (up to a maximum of 15 values). &lt;br&gt;Example: *_companyId&#x3D;80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need. (optional)
         * @return ListAdditionalPaymentsRequestBuilder
         */
        public ListAdditionalPaymentsRequestBuilder companyId(String companyId) {
            this.companyId = companyId;
            return this;
        }
        
        /**
         * Set currency
         * @param currency Optional filter. This field allows you to retrieve contracts based on their *currency* (ISO 4217). It can accept two formats:&lt;br&gt;&lt;br&gt; 1. A single *currency* as a unique string. &lt;br&gt;Example: *currency&#x3D;EUR* &lt;br&gt;&lt;br&gt; 2. Multiple *currency* values separated by commas (up to a maximum of 15 values). &lt;br&gt;Example: *currency&#x3D;EUR,USD*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need. (optional)
         * @return ListAdditionalPaymentsRequestBuilder
         */
        public ListAdditionalPaymentsRequestBuilder currency(String currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Optional filter for pagination proposals. Determines the number of pages to skip when pagination is being used. If this value is not provided, by default the offset will be 1. (optional)
         * @return ListAdditionalPaymentsRequestBuilder
         */
        public ListAdditionalPaymentsRequestBuilder offset(Double offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Optional filter for pagination proposals. The maximum number of rows to retrieve which determines the size of the page. If this value is not provided then the limit will be 50 users. The maximum value of the limit is 100 users per page. Only are valid the following limit values: 25, 50 and 100. (optional)
         * @return ListAdditionalPaymentsRequestBuilder
         */
        public ListAdditionalPaymentsRequestBuilder limit(Double limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listAdditionalPayments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAdditionalPaymentsCall(authorization, userId, companyId, currency, offset, limit, _callback);
        }


        /**
         * Execute listAdditionalPayments request
         * @return CompensationListAdditionalPaymentsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public CompensationListAdditionalPaymentsResponse execute() throws ApiException {
            ApiResponse<CompensationListAdditionalPaymentsResponse> localVarResp = listAdditionalPaymentsWithHttpInfo(authorization, userId, companyId, currency, offset, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAdditionalPayments request with HTTP info returned
         * @return ApiResponse&lt;CompensationListAdditionalPaymentsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompensationListAdditionalPaymentsResponse> executeWithHttpInfo() throws ApiException {
            return listAdditionalPaymentsWithHttpInfo(authorization, userId, companyId, currency, offset, limit);
        }

        /**
         * Execute listAdditionalPayments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompensationListAdditionalPaymentsResponse> _callback) throws ApiException {
            return listAdditionalPaymentsAsync(authorization, userId, companyId, currency, offset, limit, _callback);
        }
    }

    /**
     * 
     * This endpoint returns a paginated list of additional payments. The URL params help to return more accurate results.
     * @param authorization A valid bearer token. (required)
     * @return ListAdditionalPaymentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public ListAdditionalPaymentsRequestBuilder listAdditionalPayments(String authorization) throws IllegalArgumentException {
        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new ListAdditionalPaymentsRequestBuilder(authorization);
    }
    private okhttp3.Call listContractTypesCall(String authorization, Boolean isActive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/compensation/contract-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isActive", isActive));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listContractTypesValidateBeforeCall(String authorization, Boolean isActive, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listContractTypes(Async)");
        }

        return listContractTypesCall(authorization, isActive, _callback);

    }


    private ApiResponse<CompensationListContractTypesResponse> listContractTypesWithHttpInfo(String authorization, Boolean isActive) throws ApiException {
        okhttp3.Call localVarCall = listContractTypesValidateBeforeCall(authorization, isActive, null);
        Type localVarReturnType = new TypeToken<CompensationListContractTypesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listContractTypesAsync(String authorization, Boolean isActive, final ApiCallback<CompensationListContractTypesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listContractTypesValidateBeforeCall(authorization, isActive, _callback);
        Type localVarReturnType = new TypeToken<CompensationListContractTypesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListContractTypesRequestBuilder {
        private final String authorization;
        private Boolean isActive;

        private ListContractTypesRequestBuilder(String authorization) {
            this.authorization = authorization;
        }

        /**
         * Set isActive
         * @param isActive This field allows to return only the active contract types. (optional)
         * @return ListContractTypesRequestBuilder
         */
        public ListContractTypesRequestBuilder isActive(Boolean isActive) {
            this.isActive = isActive;
            return this;
        }
        
        /**
         * Build call for listContractTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listContractTypesCall(authorization, isActive, _callback);
        }


        /**
         * Execute listContractTypes request
         * @return CompensationListContractTypesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public CompensationListContractTypesResponse execute() throws ApiException {
            ApiResponse<CompensationListContractTypesResponse> localVarResp = listContractTypesWithHttpInfo(authorization, isActive);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listContractTypes request with HTTP info returned
         * @return ApiResponse&lt;CompensationListContractTypesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompensationListContractTypesResponse> executeWithHttpInfo() throws ApiException {
            return listContractTypesWithHttpInfo(authorization, isActive);
        }

        /**
         * Execute listContractTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompensationListContractTypesResponse> _callback) throws ApiException {
            return listContractTypesAsync(authorization, isActive, _callback);
        }
    }

    /**
     * 
     * This endpoint returns a paginated list of contract types. The URL params help to return more accurate results.
     * @param authorization A valid bearer token. (required)
     * @return ListContractTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public ListContractTypesRequestBuilder listContractTypes(String authorization) throws IllegalArgumentException {
        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new ListContractTypesRequestBuilder(authorization);
    }
}
