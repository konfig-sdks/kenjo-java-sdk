/*
 * Kenjo API
 * Before starting to use the Kenjo API, you have to request the API activation for a sandbox or production environment to the Kenjo Customer Success team. After that, an admin user has to go to *Settings > Integrations > API keys*, to generate the **API Key**. Follow the steps described in the **Autentication section** of this document. <br>The API key is needed to request the bearer token. Each endpoint callout requires a valid bearer token in the Authorization header. Once the token is retrieved, it will be useful during the time limit indicated by the 'expiration date'.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AttendanceCreateEntryRequest;
import com.konfigthis.client.model.AttendanceCreateEntryRequestBreaksInner;
import com.konfigthis.client.model.AttendanceCreateEntryResponse;
import com.konfigthis.client.model.AttendanceCreateTrackTimeRequest;
import com.konfigthis.client.model.AttendanceCreateTrackTimeResponse;
import com.konfigthis.client.model.AttendanceGetByIdResponse;
import com.konfigthis.client.model.AttendanceGetCategoriesResponse;
import com.konfigthis.client.model.AttendanceGetExpectedTimeByUserResponse;
import com.konfigthis.client.model.AttendanceGetListResponseInner;
import com.konfigthis.client.model.AttendanceUpdateEntryRequest;
import com.konfigthis.client.model.AttendanceUpdateEntryRequestBreaksInner;
import com.konfigthis.client.model.AttendanceUpdateEntryResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AttendanceApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AttendanceApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AttendanceApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createEntryCall(String authorization, AttendanceCreateEntryRequest attendanceCreateEntryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attendanceCreateEntryRequest;

        // create path and map variables
        String localVarPath = "/attendances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEntryValidateBeforeCall(String authorization, AttendanceCreateEntryRequest attendanceCreateEntryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createEntry(Async)");
        }

        // verify the required parameter 'attendanceCreateEntryRequest' is set
        if (attendanceCreateEntryRequest == null) {
            throw new ApiException("Missing the required parameter 'attendanceCreateEntryRequest' when calling createEntry(Async)");
        }

        return createEntryCall(authorization, attendanceCreateEntryRequest, _callback);

    }


    private ApiResponse<AttendanceCreateEntryResponse> createEntryWithHttpInfo(String authorization, AttendanceCreateEntryRequest attendanceCreateEntryRequest) throws ApiException {
        okhttp3.Call localVarCall = createEntryValidateBeforeCall(authorization, attendanceCreateEntryRequest, null);
        Type localVarReturnType = new TypeToken<AttendanceCreateEntryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEntryAsync(String authorization, AttendanceCreateEntryRequest attendanceCreateEntryRequest, final ApiCallback<AttendanceCreateEntryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEntryValidateBeforeCall(authorization, attendanceCreateEntryRequest, _callback);
        Type localVarReturnType = new TypeToken<AttendanceCreateEntryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateEntryRequestBuilder {
        private final String date;
        private final String startTime;
        private final String authorization;
        private String userId;
        private String email;
        private String externalId;
        private String endTime;
        private List<AttendanceCreateEntryRequestBreaksInner> breaks;
        private String comment;

        private CreateEntryRequestBuilder(String date, String startTime, String authorization) {
            this.date = date;
            this.startTime = startTime;
            this.authorization = authorization;
        }

        /**
         * Set userId
         * @param userId The Kenjo employee *_id*. (optional)
         * @return CreateEntryRequestBuilder
         */
        public CreateEntryRequestBuilder userId(String userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set email
         * @param email The Kenjo *email* for an employee. (optional)
         * @return CreateEntryRequestBuilder
         */
        public CreateEntryRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set externalId
         * @param externalId The *external id* for an employee for integrations. (optional)
         * @return CreateEntryRequestBuilder
         */
        public CreateEntryRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set endTime
         * @param endTime The end time of the entry. It is not a required field but cannot be less or equal than the *startTime*. The valid format is *hh:mm:ss* (optional)
         * @return CreateEntryRequestBuilder
         */
        public CreateEntryRequestBuilder endTime(String endTime) {
            this.endTime = endTime;
            return this;
        }
        
        /**
         * Set breaks
         * @param breaks Array that contains the breaks in detail. Rules:&lt;br&gt; - A maximum of 10 breaks can be loaded via API.&lt;br&gt; - Breaks cannot be overlapped in the same day.&lt;br&gt; - &#39;start&#39; field is required. (optional)
         * @return CreateEntryRequestBuilder
         */
        public CreateEntryRequestBuilder breaks(List<AttendanceCreateEntryRequestBreaksInner> breaks) {
            this.breaks = breaks;
            return this;
        }
        
        /**
         * Set comment
         * @param comment Optional text to describe an attendance record (pair of startTime and endTime). The maximum number of characters is 150. (optional)
         * @return CreateEntryRequestBuilder
         */
        public CreateEntryRequestBuilder comment(String comment) {
            this.comment = comment;
            return this;
        }
        
        /**
         * Build call for createEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AttendanceCreateEntryRequest attendanceCreateEntryRequest = buildBodyParams();
            return createEntryCall(authorization, attendanceCreateEntryRequest, _callback);
        }

        private AttendanceCreateEntryRequest buildBodyParams() {
            AttendanceCreateEntryRequest attendanceCreateEntryRequest = new AttendanceCreateEntryRequest();
            attendanceCreateEntryRequest.userId(this.userId);
            attendanceCreateEntryRequest.email(this.email);
            attendanceCreateEntryRequest.externalId(this.externalId);
            attendanceCreateEntryRequest.date(this.date);
            attendanceCreateEntryRequest.startTime(this.startTime);
            attendanceCreateEntryRequest.endTime(this.endTime);
            attendanceCreateEntryRequest.breaks(this.breaks);
            attendanceCreateEntryRequest.comment(this.comment);
            return attendanceCreateEntryRequest;
        }

        /**
         * Execute createEntry request
         * @return AttendanceCreateEntryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public AttendanceCreateEntryResponse execute() throws ApiException {
            AttendanceCreateEntryRequest attendanceCreateEntryRequest = buildBodyParams();
            ApiResponse<AttendanceCreateEntryResponse> localVarResp = createEntryWithHttpInfo(authorization, attendanceCreateEntryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createEntry request with HTTP info returned
         * @return ApiResponse&lt;AttendanceCreateEntryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AttendanceCreateEntryResponse> executeWithHttpInfo() throws ApiException {
            AttendanceCreateEntryRequest attendanceCreateEntryRequest = buildBodyParams();
            return createEntryWithHttpInfo(authorization, attendanceCreateEntryRequest);
        }

        /**
         * Execute createEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AttendanceCreateEntryResponse> _callback) throws ApiException {
            AttendanceCreateEntryRequest attendanceCreateEntryRequest = buildBodyParams();
            return createEntryAsync(authorization, attendanceCreateEntryRequest, _callback);
        }
    }

    /**
     * 
     * This endpoint creates an attendance entry for a one employee, so an user *identifier* is required to build this relationship. The following *identifiers* are the valid ones: **userId**, **email** or **externalId**. Also one **startTime** and one **date** are required.&lt;br&gt;The new entry will have an unique identifier **_id**. This value is returned in the body response.&lt;br&gt;&lt;br&gt; A day accepts many attendance entries per employee but they cannot be overlapped. It means that if, for example, *there is an entry the 2021-06-10 between 09:00 and 10:00 for the user E-111, then the creation of an new entry for E-111 in the 2021-06-10 whose startDate or endDate is between 09:00 and 10:00 will become a BAD REQUEST*.
     * @param authorization A valid bearer token. (required)
     * @param attendanceCreateEntryRequest  (required)
     * @return CreateEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public CreateEntryRequestBuilder createEntry(String date, String startTime, String authorization) throws IllegalArgumentException {
        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
            

        if (startTime == null) throw new IllegalArgumentException("\"startTime\" is required but got null");
            

        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new CreateEntryRequestBuilder(date, startTime, authorization);
    }
    private okhttp3.Call createTrackTimeCall(String authorization, AttendanceCreateTrackTimeRequest attendanceCreateTrackTimeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attendanceCreateTrackTimeRequest;

        // create path and map variables
        String localVarPath = "/attendances/track-time";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTrackTimeValidateBeforeCall(String authorization, AttendanceCreateTrackTimeRequest attendanceCreateTrackTimeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createTrackTime(Async)");
        }

        // verify the required parameter 'attendanceCreateTrackTimeRequest' is set
        if (attendanceCreateTrackTimeRequest == null) {
            throw new ApiException("Missing the required parameter 'attendanceCreateTrackTimeRequest' when calling createTrackTime(Async)");
        }

        return createTrackTimeCall(authorization, attendanceCreateTrackTimeRequest, _callback);

    }


    private ApiResponse<AttendanceCreateTrackTimeResponse> createTrackTimeWithHttpInfo(String authorization, AttendanceCreateTrackTimeRequest attendanceCreateTrackTimeRequest) throws ApiException {
        okhttp3.Call localVarCall = createTrackTimeValidateBeforeCall(authorization, attendanceCreateTrackTimeRequest, null);
        Type localVarReturnType = new TypeToken<AttendanceCreateTrackTimeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTrackTimeAsync(String authorization, AttendanceCreateTrackTimeRequest attendanceCreateTrackTimeRequest, final ApiCallback<AttendanceCreateTrackTimeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTrackTimeValidateBeforeCall(authorization, attendanceCreateTrackTimeRequest, _callback);
        Type localVarReturnType = new TypeToken<AttendanceCreateTrackTimeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTrackTimeRequestBuilder {
        private final String dateTime;
        private final String authorization;
        private String userId;
        private String email;
        private String externalId;

        private CreateTrackTimeRequestBuilder(String dateTime, String authorization) {
            this.dateTime = dateTime;
            this.authorization = authorization;
        }

        /**
         * Set userId
         * @param userId The Kenjo employee *_id*. (optional)
         * @return CreateTrackTimeRequestBuilder
         */
        public CreateTrackTimeRequestBuilder userId(String userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set email
         * @param email The Kenjo *email* for an employee. (optional)
         * @return CreateTrackTimeRequestBuilder
         */
        public CreateTrackTimeRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set externalId
         * @param externalId The *external id* for an employee for integrations. (optional)
         * @return CreateTrackTimeRequestBuilder
         */
        public CreateTrackTimeRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Build call for createTrackTime
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CREATED. The returned body matches with the input body. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AttendanceCreateTrackTimeRequest attendanceCreateTrackTimeRequest = buildBodyParams();
            return createTrackTimeCall(authorization, attendanceCreateTrackTimeRequest, _callback);
        }

        private AttendanceCreateTrackTimeRequest buildBodyParams() {
            AttendanceCreateTrackTimeRequest attendanceCreateTrackTimeRequest = new AttendanceCreateTrackTimeRequest();
            attendanceCreateTrackTimeRequest.userId(this.userId);
            attendanceCreateTrackTimeRequest.email(this.email);
            attendanceCreateTrackTimeRequest.externalId(this.externalId);
            attendanceCreateTrackTimeRequest.dateTime(this.dateTime);
            return attendanceCreateTrackTimeRequest;
        }

        /**
         * Execute createTrackTime request
         * @return AttendanceCreateTrackTimeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CREATED. The returned body matches with the input body. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public AttendanceCreateTrackTimeResponse execute() throws ApiException {
            AttendanceCreateTrackTimeRequest attendanceCreateTrackTimeRequest = buildBodyParams();
            ApiResponse<AttendanceCreateTrackTimeResponse> localVarResp = createTrackTimeWithHttpInfo(authorization, attendanceCreateTrackTimeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTrackTime request with HTTP info returned
         * @return ApiResponse&lt;AttendanceCreateTrackTimeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CREATED. The returned body matches with the input body. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AttendanceCreateTrackTimeResponse> executeWithHttpInfo() throws ApiException {
            AttendanceCreateTrackTimeRequest attendanceCreateTrackTimeRequest = buildBodyParams();
            return createTrackTimeWithHttpInfo(authorization, attendanceCreateTrackTimeRequest);
        }

        /**
         * Execute createTrackTime request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CREATED. The returned body matches with the input body. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AttendanceCreateTrackTimeResponse> _callback) throws ApiException {
            AttendanceCreateTrackTimeRequest attendanceCreateTrackTimeRequest = buildBodyParams();
            return createTrackTimeAsync(authorization, attendanceCreateTrackTimeRequest, _callback);
        }
    }

    /**
     * 
     * This endpoint tracks time only providing the following information: **employee identifier** and a **date time**. The following identifiers are the valid ones: **userId**, **email** or **externalId**, only one of them is required. This action abstracts and simplifies the entries tracking, ensuring internally the order and transforming each track action to a Kenjo user attendance format.&lt;br&gt;&lt;br&gt;Example: Three calls for the employee E-111 to the *_/track-time* endpoint contains the following data:&lt;br&gt;T1: 2021-01-01T08:00:00&lt;br&gt;T2: 2021-01-01T09:00:00&lt;br&gt;T3: 2021-01-01T10:00:00&lt;br&gt;The three calls order is T1, T2, T3.&lt;br&gt;&lt;br&gt;Then in Kenjo there will be 2 attendance pairs:&lt;br&gt;1: 08:00 / 09:00&lt;br&gt;2: 10:00 / --:--&lt;br&gt;The second pair is open, with no **endTime** info, until a new one comes. &lt;br&gt;&lt;br&gt;If there is a new track: 2021-01-01T12:00:00, then the result will be:&lt;br&gt;1: 08:00 / 09:00&lt;br&gt;2: 10:00 / 12:00&lt;br&gt;If the track is 2021-01-01T07:00:00 instead, then the previous tracks are reordered to be consistent with concept of attendance pairs:&lt;br&gt;1: 07:00 / 08:00&lt;br&gt;2: 09:00 / 10:00
     * @param authorization A valid bearer token. (required)
     * @param attendanceCreateTrackTimeRequest  (required)
     * @return CreateTrackTimeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED. The returned body matches with the input body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public CreateTrackTimeRequestBuilder createTrackTime(String dateTime, String authorization) throws IllegalArgumentException {
        if (dateTime == null) throw new IllegalArgumentException("\"dateTime\" is required but got null");
            

        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new CreateTrackTimeRequestBuilder(dateTime, authorization);
    }
    private okhttp3.Call getByIdCall(String attendanceId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attendances/{attendanceId}"
            .replace("{" + "attendanceId" + "}", localVarApiClient.escapeString(attendanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String attendanceId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attendanceId' is set
        if (attendanceId == null) {
            throw new ApiException("Missing the required parameter 'attendanceId' when calling getById(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getById(Async)");
        }

        return getByIdCall(attendanceId, authorization, _callback);

    }


    private ApiResponse<AttendanceGetByIdResponse> getByIdWithHttpInfo(String attendanceId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(attendanceId, authorization, null);
        Type localVarReturnType = new TypeToken<AttendanceGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String attendanceId, String authorization, final ApiCallback<AttendanceGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(attendanceId, authorization, _callback);
        Type localVarReturnType = new TypeToken<AttendanceGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String attendanceId;
        private final String authorization;

        private GetByIdRequestBuilder(String attendanceId, String authorization) {
            this.attendanceId = attendanceId;
            this.authorization = authorization;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(attendanceId, authorization, _callback);
        }


        /**
         * Execute getById request
         * @return AttendanceGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public AttendanceGetByIdResponse execute() throws ApiException {
            ApiResponse<AttendanceGetByIdResponse> localVarResp = getByIdWithHttpInfo(attendanceId, authorization);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;AttendanceGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AttendanceGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(attendanceId, authorization);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AttendanceGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(attendanceId, authorization, _callback);
        }
    }

    /**
     * 
     * This endpoint returns one attendance entry specified by  **attendanceId**.
     * @param attendanceId The _id of the attendance entry to request. (required)
     * @param authorization A valid bearer token. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String attendanceId, String authorization) throws IllegalArgumentException {
        if (attendanceId == null) throw new IllegalArgumentException("\"attendanceId\" is required but got null");
            

        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new GetByIdRequestBuilder(attendanceId, authorization);
    }
    private okhttp3.Call getCategoriesCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attendances/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoriesValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getCategories(Async)");
        }

        return getCategoriesCall(authorization, _callback);

    }


    private ApiResponse<AttendanceGetCategoriesResponse> getCategoriesWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = getCategoriesValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<AttendanceGetCategoriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCategoriesAsync(String authorization, final ApiCallback<AttendanceGetCategoriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoriesValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<AttendanceGetCategoriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCategoriesRequestBuilder {
        private final String authorization;

        private GetCategoriesRequestBuilder(String authorization) {
            this.authorization = authorization;
        }

        /**
         * Build call for getCategories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCategoriesCall(authorization, _callback);
        }


        /**
         * Execute getCategories request
         * @return AttendanceGetCategoriesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public AttendanceGetCategoriesResponse execute() throws ApiException {
            ApiResponse<AttendanceGetCategoriesResponse> localVarResp = getCategoriesWithHttpInfo(authorization);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCategories request with HTTP info returned
         * @return ApiResponse&lt;AttendanceGetCategoriesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AttendanceGetCategoriesResponse> executeWithHttpInfo() throws ApiException {
            return getCategoriesWithHttpInfo(authorization);
        }

        /**
         * Execute getCategories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AttendanceGetCategoriesResponse> _callback) throws ApiException {
            return getCategoriesAsync(authorization, _callback);
        }
    }

    /**
     * 
     * This endpoint returns an array of objects. Every object contains an attendance category.
     * @param authorization A valid bearer token. (required)
     * @return GetCategoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public GetCategoriesRequestBuilder getCategories(String authorization) throws IllegalArgumentException {
        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new GetCategoriesRequestBuilder(authorization);
    }
    private okhttp3.Call getExpectedTimeByUserCall(String from, String to, String authorization, String companyId, String officeId, String departmentId, String userId, Double offset, Double limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attendances/expected-time";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyId", companyId));
        }

        if (officeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("officeId", officeId));
        }

        if (departmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departmentId", departmentId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExpectedTimeByUserValidateBeforeCall(String from, String to, String authorization, String companyId, String officeId, String departmentId, String userId, Double offset, Double limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling getExpectedTimeByUser(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling getExpectedTimeByUser(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getExpectedTimeByUser(Async)");
        }

        return getExpectedTimeByUserCall(from, to, authorization, companyId, officeId, departmentId, userId, offset, limit, _callback);

    }


    private ApiResponse<AttendanceGetExpectedTimeByUserResponse> getExpectedTimeByUserWithHttpInfo(String from, String to, String authorization, String companyId, String officeId, String departmentId, String userId, Double offset, Double limit) throws ApiException {
        okhttp3.Call localVarCall = getExpectedTimeByUserValidateBeforeCall(from, to, authorization, companyId, officeId, departmentId, userId, offset, limit, null);
        Type localVarReturnType = new TypeToken<AttendanceGetExpectedTimeByUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getExpectedTimeByUserAsync(String from, String to, String authorization, String companyId, String officeId, String departmentId, String userId, Double offset, Double limit, final ApiCallback<AttendanceGetExpectedTimeByUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExpectedTimeByUserValidateBeforeCall(from, to, authorization, companyId, officeId, departmentId, userId, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<AttendanceGetExpectedTimeByUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetExpectedTimeByUserRequestBuilder {
        private final String from;
        private final String to;
        private final String authorization;
        private String companyId;
        private String officeId;
        private String departmentId;
        private String userId;
        private Double offset;
        private Double limit;

        private GetExpectedTimeByUserRequestBuilder(String from, String to, String authorization) {
            this.from = from;
            this.to = to;
            this.authorization = authorization;
        }

        /**
         * Set companyId
         * @param companyId Optional filter. The company id of the Kenjo employee. (optional)
         * @return GetExpectedTimeByUserRequestBuilder
         */
        public GetExpectedTimeByUserRequestBuilder companyId(String companyId) {
            this.companyId = companyId;
            return this;
        }
        
        /**
         * Set officeId
         * @param officeId Optional filter. The office id of the Kenjo employee. (optional)
         * @return GetExpectedTimeByUserRequestBuilder
         */
        public GetExpectedTimeByUserRequestBuilder officeId(String officeId) {
            this.officeId = officeId;
            return this;
        }
        
        /**
         * Set departmentId
         * @param departmentId Optional filter. The department id of the Kenjo employee. (optional)
         * @return GetExpectedTimeByUserRequestBuilder
         */
        public GetExpectedTimeByUserRequestBuilder departmentId(String departmentId) {
            this.departmentId = departmentId;
            return this;
        }
        
        /**
         * Set userId
         * @param userId Optional filter. The id of the Kenjo employee. It accepts 2 formats:&lt;br&gt;&lt;br&gt; 1. An unique string with the Kenjo employee id. &lt;br&gt;Example: *userId&#x3D;80a2db290da29e126a18789c* &lt;br&gt;&lt;br&gt; 2. A string with more than one Kenjo employee ids separated by commas (until 15 ids as maximum). &lt;br&gt;Example: *userId&#x3D;80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891* (optional)
         * @return GetExpectedTimeByUserRequestBuilder
         */
        public GetExpectedTimeByUserRequestBuilder userId(String userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Optional filter for pagination proposals. Determines the number of pages to skip when pagination is being used. If this value is not provided, by default the offset will be 1. (optional)
         * @return GetExpectedTimeByUserRequestBuilder
         */
        public GetExpectedTimeByUserRequestBuilder offset(Double offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Optional filter for pagination proposals. The maximum number of rows to retrieve which determines the size of the page. If this value is not provided then the limit will be 50 users. The maximum value of the limit is 100 users per page. Only are valid the following limit values: 25, 50 and 100. (optional)
         * @return GetExpectedTimeByUserRequestBuilder
         */
        public GetExpectedTimeByUserRequestBuilder limit(Double limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getExpectedTimeByUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getExpectedTimeByUserCall(from, to, authorization, companyId, officeId, departmentId, userId, offset, limit, _callback);
        }


        /**
         * Execute getExpectedTimeByUser request
         * @return AttendanceGetExpectedTimeByUserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public AttendanceGetExpectedTimeByUserResponse execute() throws ApiException {
            ApiResponse<AttendanceGetExpectedTimeByUserResponse> localVarResp = getExpectedTimeByUserWithHttpInfo(from, to, authorization, companyId, officeId, departmentId, userId, offset, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getExpectedTimeByUser request with HTTP info returned
         * @return ApiResponse&lt;AttendanceGetExpectedTimeByUserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AttendanceGetExpectedTimeByUserResponse> executeWithHttpInfo() throws ApiException {
            return getExpectedTimeByUserWithHttpInfo(from, to, authorization, companyId, officeId, departmentId, userId, offset, limit);
        }

        /**
         * Execute getExpectedTimeByUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AttendanceGetExpectedTimeByUserResponse> _callback) throws ApiException {
            return getExpectedTimeByUserAsync(from, to, authorization, companyId, officeId, departmentId, userId, offset, limit, _callback);
        }
    }

    /**
     * 
     * This endpoint returns a paginated list of expected time by user for a given date range.
     * @param from A date in format YYYY-MM-DD to indicate the starting point. (required)
     * @param to A date in format YYYY-MM-DD to indicate the ending point. (required)
     * @param authorization A valid bearer token. (required)
     * @return GetExpectedTimeByUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public GetExpectedTimeByUserRequestBuilder getExpectedTimeByUser(String from, String to, String authorization) throws IllegalArgumentException {
        if (from == null) throw new IllegalArgumentException("\"from\" is required but got null");
            

        if (to == null) throw new IllegalArgumentException("\"to\" is required but got null");
            

        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new GetExpectedTimeByUserRequestBuilder(from, to, authorization);
    }
    private okhttp3.Call getListCall(String from, String to, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attendances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(String from, String to, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling getList(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling getList(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getList(Async)");
        }

        return getListCall(from, to, authorization, _callback);

    }


    private ApiResponse<List<AttendanceGetListResponseInner>> getListWithHttpInfo(String from, String to, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(from, to, authorization, null);
        Type localVarReturnType = new TypeToken<List<AttendanceGetListResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(String from, String to, String authorization, final ApiCallback<List<AttendanceGetListResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(from, to, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<AttendanceGetListResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {
        private final String from;
        private final String to;
        private final String authorization;

        private GetListRequestBuilder(String from, String to, String authorization) {
            this.from = from;
            this.to = to;
            this.authorization = authorization;
        }

        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(from, to, authorization, _callback);
        }


        /**
         * Execute getList request
         * @return List&lt;AttendanceGetListResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public List<AttendanceGetListResponseInner> execute() throws ApiException {
            ApiResponse<List<AttendanceGetListResponseInner>> localVarResp = getListWithHttpInfo(from, to, authorization);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;List&lt;AttendanceGetListResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<AttendanceGetListResponseInner>> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo(from, to, authorization);
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<AttendanceGetListResponseInner>> _callback) throws ApiException {
            return getListAsync(from, to, authorization, _callback);
        }
    }

    /**
     * 
     * This endpoint returns an array of objects with all the existing attendance entries within Kenjo for a maximum of 31 days, defined by the required params **from** and **to**. Every object contains an attendance entry.
     * @param from A date in format YYYY-MM-DD to indicate the starting point. (required)
     * @param to A date in format YYYY-MM-DD to indicate the ending point. (required)
     * @param authorization A valid bearer token. (required)
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList(String from, String to, String authorization) throws IllegalArgumentException {
        if (from == null) throw new IllegalArgumentException("\"from\" is required but got null");
            

        if (to == null) throw new IllegalArgumentException("\"to\" is required but got null");
            

        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new GetListRequestBuilder(from, to, authorization);
    }
    private okhttp3.Call removeByIdCall(String attendanceId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attendances/{attendanceId}"
            .replace("{" + "attendanceId" + "}", localVarApiClient.escapeString(attendanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String attendanceId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attendanceId' is set
        if (attendanceId == null) {
            throw new ApiException("Missing the required parameter 'attendanceId' when calling removeById(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling removeById(Async)");
        }

        return removeByIdCall(attendanceId, authorization, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(String attendanceId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(attendanceId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(String attendanceId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(attendanceId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String attendanceId;
        private final String authorization;

        private RemoveByIdRequestBuilder(String attendanceId, String authorization) {
            this.attendanceId = attendanceId;
            this.authorization = authorization;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(attendanceId, authorization, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(attendanceId, authorization);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(attendanceId, authorization);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(attendanceId, authorization, _callback);
        }
    }

    /**
     * 
     * This endpoint delete the attendance entry specified by **attendanceId**.
     * @param attendanceId The Kenjo _id of the attendance entry to remove. (required)
     * @param authorization A valid bearer token. (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String attendanceId, String authorization) throws IllegalArgumentException {
        if (attendanceId == null) throw new IllegalArgumentException("\"attendanceId\" is required but got null");
            

        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new RemoveByIdRequestBuilder(attendanceId, authorization);
    }
    private okhttp3.Call updateEntryCall(String attendanceId, String authorization, AttendanceUpdateEntryRequest attendanceUpdateEntryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attendanceUpdateEntryRequest;

        // create path and map variables
        String localVarPath = "/attendances/{attendanceId}"
            .replace("{" + "attendanceId" + "}", localVarApiClient.escapeString(attendanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEntryValidateBeforeCall(String attendanceId, String authorization, AttendanceUpdateEntryRequest attendanceUpdateEntryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attendanceId' is set
        if (attendanceId == null) {
            throw new ApiException("Missing the required parameter 'attendanceId' when calling updateEntry(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateEntry(Async)");
        }

        // verify the required parameter 'attendanceUpdateEntryRequest' is set
        if (attendanceUpdateEntryRequest == null) {
            throw new ApiException("Missing the required parameter 'attendanceUpdateEntryRequest' when calling updateEntry(Async)");
        }

        return updateEntryCall(attendanceId, authorization, attendanceUpdateEntryRequest, _callback);

    }


    private ApiResponse<AttendanceUpdateEntryResponse> updateEntryWithHttpInfo(String attendanceId, String authorization, AttendanceUpdateEntryRequest attendanceUpdateEntryRequest) throws ApiException {
        okhttp3.Call localVarCall = updateEntryValidateBeforeCall(attendanceId, authorization, attendanceUpdateEntryRequest, null);
        Type localVarReturnType = new TypeToken<AttendanceUpdateEntryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateEntryAsync(String attendanceId, String authorization, AttendanceUpdateEntryRequest attendanceUpdateEntryRequest, final ApiCallback<AttendanceUpdateEntryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEntryValidateBeforeCall(attendanceId, authorization, attendanceUpdateEntryRequest, _callback);
        Type localVarReturnType = new TypeToken<AttendanceUpdateEntryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateEntryRequestBuilder {
        private final String attendanceId;
        private final String authorization;
        private String startTime;
        private String endTime;
        private List<AttendanceUpdateEntryRequestBreaksInner> breaks;
        private String comment;

        private UpdateEntryRequestBuilder(String attendanceId, String authorization) {
            this.attendanceId = attendanceId;
            this.authorization = authorization;
        }

        /**
         * Set startTime
         * @param startTime The new start time of the attendance entry to update. The valid format is *hh:mm:ss* (optional)
         * @return UpdateEntryRequestBuilder
         */
        public UpdateEntryRequestBuilder startTime(String startTime) {
            this.startTime = startTime;
            return this;
        }
        
        /**
         * Set endTime
         * @param endTime The new end time of the attendance entry to update. The valid format is *hh:mm:ss* (optional)
         * @return UpdateEntryRequestBuilder
         */
        public UpdateEntryRequestBuilder endTime(String endTime) {
            this.endTime = endTime;
            return this;
        }
        
        /**
         * Set breaks
         * @param breaks Array that contains the breaks in detail. Rules:&lt;br&gt; - A maximum of 10 breaks can be loaded via API.&lt;br&gt; - Breaks cannot be overlapped in the same day.&lt;br&gt; - &#39;start&#39; field is required.&lt;br&gt; - There is no way to update specifically a break.&lt;br&gt; - To remove &#39;breaks&#39;, just send an empty array in the update, something like \\\&quot;breaks\\\&quot;:[] (optional)
         * @return UpdateEntryRequestBuilder
         */
        public UpdateEntryRequestBuilder breaks(List<AttendanceUpdateEntryRequestBreaksInner> breaks) {
            this.breaks = breaks;
            return this;
        }
        
        /**
         * Set comment
         * @param comment Optional text to describe an attendance record (pair of startTime and endTime). The maximum number of characters is 150. (optional)
         * @return UpdateEntryRequestBuilder
         */
        public UpdateEntryRequestBuilder comment(String comment) {
            this.comment = comment;
            return this;
        }
        
        /**
         * Build call for updateEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AttendanceUpdateEntryRequest attendanceUpdateEntryRequest = buildBodyParams();
            return updateEntryCall(attendanceId, authorization, attendanceUpdateEntryRequest, _callback);
        }

        private AttendanceUpdateEntryRequest buildBodyParams() {
            AttendanceUpdateEntryRequest attendanceUpdateEntryRequest = new AttendanceUpdateEntryRequest();
            attendanceUpdateEntryRequest.startTime(this.startTime);
            attendanceUpdateEntryRequest.endTime(this.endTime);
            attendanceUpdateEntryRequest.breaks(this.breaks);
            attendanceUpdateEntryRequest.comment(this.comment);
            return attendanceUpdateEntryRequest;
        }

        /**
         * Execute updateEntry request
         * @return AttendanceUpdateEntryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public AttendanceUpdateEntryResponse execute() throws ApiException {
            AttendanceUpdateEntryRequest attendanceUpdateEntryRequest = buildBodyParams();
            ApiResponse<AttendanceUpdateEntryResponse> localVarResp = updateEntryWithHttpInfo(attendanceId, authorization, attendanceUpdateEntryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateEntry request with HTTP info returned
         * @return ApiResponse&lt;AttendanceUpdateEntryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AttendanceUpdateEntryResponse> executeWithHttpInfo() throws ApiException {
            AttendanceUpdateEntryRequest attendanceUpdateEntryRequest = buildBodyParams();
            return updateEntryWithHttpInfo(attendanceId, authorization, attendanceUpdateEntryRequest);
        }

        /**
         * Execute updateEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AttendanceUpdateEntryResponse> _callback) throws ApiException {
            AttendanceUpdateEntryRequest attendanceUpdateEntryRequest = buildBodyParams();
            return updateEntryAsync(attendanceId, authorization, attendanceUpdateEntryRequest, _callback);
        }
    }

    /**
     * 
     * This endpoint updates the attendance entry specified by **attendanceId**. Only the fields submitted in the body will be updated.
     * @param attendanceId The _id of the attendance entry to update. (required)
     * @param authorization A valid bearer token. (required)
     * @param attendanceUpdateEntryRequest  (required)
     * @return UpdateEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEntryRequestBuilder updateEntry(String attendanceId, String authorization) throws IllegalArgumentException {
        if (attendanceId == null) throw new IllegalArgumentException("\"attendanceId\" is required but got null");
            

        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new UpdateEntryRequestBuilder(attendanceId, authorization);
    }
}
