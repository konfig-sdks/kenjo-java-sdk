/*
 * Kenjo API
 * Before starting to use the Kenjo API, you have to request the API activation for a sandbox or production environment to the Kenjo Customer Success team. After that, an admin user has to go to *Settings > Integrations > API keys*, to generate the **API Key**. Follow the steps described in the **Autentication section** of this document. <br>The API key is needed to request the bearer token. Each endpoint callout requires a valid bearer token in the Authorization header. Once the token is retrieved, it will be useful during the time limit indicated by the 'expiration date'.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.TeamsCreateTeamRequest;
import com.konfigthis.client.model.TeamsCreateTeamResponse;
import com.konfigthis.client.model.TeamsGetByIdResponse;
import com.konfigthis.client.model.TeamsGetListResponseInner;
import com.konfigthis.client.model.TeamsUpdateTeamAttributesRequest;
import com.konfigthis.client.model.TeamsUpdateTeamAttributesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TeamsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TeamsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TeamsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createTeamCall(String authorization, TeamsCreateTeamRequest teamsCreateTeamRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsCreateTeamRequest;

        // create path and map variables
        String localVarPath = "/teams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTeamValidateBeforeCall(String authorization, TeamsCreateTeamRequest teamsCreateTeamRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createTeam(Async)");
        }

        // verify the required parameter 'teamsCreateTeamRequest' is set
        if (teamsCreateTeamRequest == null) {
            throw new ApiException("Missing the required parameter 'teamsCreateTeamRequest' when calling createTeam(Async)");
        }

        return createTeamCall(authorization, teamsCreateTeamRequest, _callback);

    }


    private ApiResponse<TeamsCreateTeamResponse> createTeamWithHttpInfo(String authorization, TeamsCreateTeamRequest teamsCreateTeamRequest) throws ApiException {
        okhttp3.Call localVarCall = createTeamValidateBeforeCall(authorization, teamsCreateTeamRequest, null);
        Type localVarReturnType = new TypeToken<TeamsCreateTeamResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTeamAsync(String authorization, TeamsCreateTeamRequest teamsCreateTeamRequest, final ApiCallback<TeamsCreateTeamResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTeamValidateBeforeCall(authorization, teamsCreateTeamRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamsCreateTeamResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTeamRequestBuilder {
        private final String authorization;
        private String name;

        private CreateTeamRequestBuilder(String authorization) {
            this.authorization = authorization;
        }

        /**
         * Set name
         * @param name The new name of the team to update. Required field. (optional)
         * @return CreateTeamRequestBuilder
         */
        public CreateTeamRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for createTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TeamsCreateTeamRequest teamsCreateTeamRequest = buildBodyParams();
            return createTeamCall(authorization, teamsCreateTeamRequest, _callback);
        }

        private TeamsCreateTeamRequest buildBodyParams() {
            TeamsCreateTeamRequest teamsCreateTeamRequest = new TeamsCreateTeamRequest();
            teamsCreateTeamRequest.name(this.name);
            return teamsCreateTeamRequest;
        }

        /**
         * Execute createTeam request
         * @return TeamsCreateTeamResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public TeamsCreateTeamResponse execute() throws ApiException {
            TeamsCreateTeamRequest teamsCreateTeamRequest = buildBodyParams();
            ApiResponse<TeamsCreateTeamResponse> localVarResp = createTeamWithHttpInfo(authorization, teamsCreateTeamRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTeam request with HTTP info returned
         * @return ApiResponse&lt;TeamsCreateTeamResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamsCreateTeamResponse> executeWithHttpInfo() throws ApiException {
            TeamsCreateTeamRequest teamsCreateTeamRequest = buildBodyParams();
            return createTeamWithHttpInfo(authorization, teamsCreateTeamRequest);
        }

        /**
         * Execute createTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamsCreateTeamResponse> _callback) throws ApiException {
            TeamsCreateTeamRequest teamsCreateTeamRequest = buildBodyParams();
            return createTeamAsync(authorization, teamsCreateTeamRequest, _callback);
        }
    }

    /**
     * 
     * Creates a new team.&lt;br&gt;The *name* is the only required field.&lt;br&gt;
     * @param authorization A valid bearer token. (required)
     * @param teamsCreateTeamRequest  (required)
     * @return CreateTeamRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public CreateTeamRequestBuilder createTeam(String authorization) throws IllegalArgumentException {
        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new CreateTeamRequestBuilder(authorization);
    }
    private okhttp3.Call getByIdCall(String id, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String id, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getById(Async)");
        }

        return getByIdCall(id, authorization, _callback);

    }


    private ApiResponse<TeamsGetByIdResponse> getByIdWithHttpInfo(String id, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, authorization, null);
        Type localVarReturnType = new TypeToken<TeamsGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String id, String authorization, final ApiCallback<TeamsGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, authorization, _callback);
        Type localVarReturnType = new TypeToken<TeamsGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String id;
        private final String authorization;

        private GetByIdRequestBuilder(String id, String authorization) {
            this.id = id;
            this.authorization = authorization;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, authorization, _callback);
        }


        /**
         * Execute getById request
         * @return TeamsGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public TeamsGetByIdResponse execute() throws ApiException {
            ApiResponse<TeamsGetByIdResponse> localVarResp = getByIdWithHttpInfo(id, authorization);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;TeamsGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamsGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id, authorization);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamsGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(id, authorization, _callback);
        }
    }

    /**
     * 
     * Returns the team referenced by *id*.
     * @param id The _id of the team entry to request. (required)
     * @param authorization A valid bearer token. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String id, String authorization) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new GetByIdRequestBuilder(id, authorization);
    }
    private okhttp3.Call getListCall(String authorization, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(String authorization, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getList(Async)");
        }

        return getListCall(authorization, name, _callback);

    }


    private ApiResponse<List<TeamsGetListResponseInner>> getListWithHttpInfo(String authorization, String name) throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(authorization, name, null);
        Type localVarReturnType = new TypeToken<List<TeamsGetListResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(String authorization, String name, final ApiCallback<List<TeamsGetListResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(authorization, name, _callback);
        Type localVarReturnType = new TypeToken<List<TeamsGetListResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {
        private final String authorization;
        private String name;

        private GetListRequestBuilder(String authorization) {
            this.authorization = authorization;
        }

        /**
         * Set name
         * @param name The team name. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(authorization, name, _callback);
        }


        /**
         * Execute getList request
         * @return List&lt;TeamsGetListResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public List<TeamsGetListResponseInner> execute() throws ApiException {
            ApiResponse<List<TeamsGetListResponseInner>> localVarResp = getListWithHttpInfo(authorization, name);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TeamsGetListResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TeamsGetListResponseInner>> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo(authorization, name);
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TeamsGetListResponseInner>> _callback) throws ApiException {
            return getListAsync(authorization, name, _callback);
        }
    }

    /**
     * 
     * Returns a list of the existing teams in Kenjo.
     * @param authorization A valid bearer token. (required)
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList(String authorization) throws IllegalArgumentException {
        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new GetListRequestBuilder(authorization);
    }
    private okhttp3.Call removeTeamCall(String id, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTeamValidateBeforeCall(String id, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeTeam(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling removeTeam(Async)");
        }

        return removeTeamCall(id, authorization, _callback);

    }


    private ApiResponse<Void> removeTeamWithHttpInfo(String id, String authorization) throws ApiException {
        okhttp3.Call localVarCall = removeTeamValidateBeforeCall(id, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeTeamAsync(String id, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTeamValidateBeforeCall(id, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveTeamRequestBuilder {
        private final String id;
        private final String authorization;

        private RemoveTeamRequestBuilder(String id, String authorization) {
            this.id = id;
            this.authorization = authorization;
        }

        /**
         * Build call for removeTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeTeamCall(id, authorization, _callback);
        }


        /**
         * Execute removeTeam request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeTeamWithHttpInfo(id, authorization);
        }

        /**
         * Execute removeTeam request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeTeamWithHttpInfo(id, authorization);
        }

        /**
         * Execute removeTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeTeamAsync(id, authorization, _callback);
        }
    }

    /**
     * 
     * Removes the team referenced by *id*.
     * @param id The _id of the team entry to request. (required)
     * @param authorization A valid bearer token. (required)
     * @return RemoveTeamRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveTeamRequestBuilder removeTeam(String id, String authorization) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new RemoveTeamRequestBuilder(id, authorization);
    }
    private okhttp3.Call updateTeamAttributesCall(String id, String authorization, TeamsUpdateTeamAttributesRequest teamsUpdateTeamAttributesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsUpdateTeamAttributesRequest;

        // create path and map variables
        String localVarPath = "/teams/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTeamAttributesValidateBeforeCall(String id, String authorization, TeamsUpdateTeamAttributesRequest teamsUpdateTeamAttributesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateTeamAttributes(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateTeamAttributes(Async)");
        }

        // verify the required parameter 'teamsUpdateTeamAttributesRequest' is set
        if (teamsUpdateTeamAttributesRequest == null) {
            throw new ApiException("Missing the required parameter 'teamsUpdateTeamAttributesRequest' when calling updateTeamAttributes(Async)");
        }

        return updateTeamAttributesCall(id, authorization, teamsUpdateTeamAttributesRequest, _callback);

    }


    private ApiResponse<TeamsUpdateTeamAttributesResponse> updateTeamAttributesWithHttpInfo(String id, String authorization, TeamsUpdateTeamAttributesRequest teamsUpdateTeamAttributesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTeamAttributesValidateBeforeCall(id, authorization, teamsUpdateTeamAttributesRequest, null);
        Type localVarReturnType = new TypeToken<TeamsUpdateTeamAttributesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTeamAttributesAsync(String id, String authorization, TeamsUpdateTeamAttributesRequest teamsUpdateTeamAttributesRequest, final ApiCallback<TeamsUpdateTeamAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTeamAttributesValidateBeforeCall(id, authorization, teamsUpdateTeamAttributesRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamsUpdateTeamAttributesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTeamAttributesRequestBuilder {
        private final String id;
        private final String authorization;
        private String name;

        private UpdateTeamAttributesRequestBuilder(String id, String authorization) {
            this.id = id;
            this.authorization = authorization;
        }

        /**
         * Set name
         * @param name The new name of the team to update. (optional)
         * @return UpdateTeamAttributesRequestBuilder
         */
        public UpdateTeamAttributesRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateTeamAttributes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TeamsUpdateTeamAttributesRequest teamsUpdateTeamAttributesRequest = buildBodyParams();
            return updateTeamAttributesCall(id, authorization, teamsUpdateTeamAttributesRequest, _callback);
        }

        private TeamsUpdateTeamAttributesRequest buildBodyParams() {
            TeamsUpdateTeamAttributesRequest teamsUpdateTeamAttributesRequest = new TeamsUpdateTeamAttributesRequest();
            teamsUpdateTeamAttributesRequest.name(this.name);
            return teamsUpdateTeamAttributesRequest;
        }

        /**
         * Execute updateTeamAttributes request
         * @return TeamsUpdateTeamAttributesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public TeamsUpdateTeamAttributesResponse execute() throws ApiException {
            TeamsUpdateTeamAttributesRequest teamsUpdateTeamAttributesRequest = buildBodyParams();
            ApiResponse<TeamsUpdateTeamAttributesResponse> localVarResp = updateTeamAttributesWithHttpInfo(id, authorization, teamsUpdateTeamAttributesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTeamAttributes request with HTTP info returned
         * @return ApiResponse&lt;TeamsUpdateTeamAttributesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamsUpdateTeamAttributesResponse> executeWithHttpInfo() throws ApiException {
            TeamsUpdateTeamAttributesRequest teamsUpdateTeamAttributesRequest = buildBodyParams();
            return updateTeamAttributesWithHttpInfo(id, authorization, teamsUpdateTeamAttributesRequest);
        }

        /**
         * Execute updateTeamAttributes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamsUpdateTeamAttributesResponse> _callback) throws ApiException {
            TeamsUpdateTeamAttributesRequest teamsUpdateTeamAttributesRequest = buildBodyParams();
            return updateTeamAttributesAsync(id, authorization, teamsUpdateTeamAttributesRequest, _callback);
        }
    }

    /**
     * 
     * Updates a team referenced by *id*. Only the attributes submitted are modified.
     * @param id The _id of the team entry to request. Required field. (required)
     * @param authorization A valid bearer token. (required)
     * @param teamsUpdateTeamAttributesRequest  (required)
     * @return UpdateTeamAttributesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTeamAttributesRequestBuilder updateTeamAttributes(String id, String authorization) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new UpdateTeamAttributesRequestBuilder(id, authorization);
    }
}
