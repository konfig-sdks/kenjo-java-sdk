/*
 * Kenjo API
 * Before starting to use the Kenjo API, you have to request the API activation for a sandbox or production environment to the Kenjo Customer Success team. After that, an admin user has to go to *Settings > Integrations > API keys*, to generate the **API Key**. Follow the steps described in the **Autentication section** of this document. <br>The API key is needed to request the bearer token. Each endpoint callout requires a valid bearer token in the Authorization header. Once the token is retrieved, it will be useful during the time limit indicated by the 'expiration date'.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DepartmentsCreateNewDepartmentRequest;
import com.konfigthis.client.model.DepartmentsCreateNewDepartmentResponse;
import com.konfigthis.client.model.DepartmentsGetByIdResponse;
import com.konfigthis.client.model.DepartmentsListDepartmentsResponseInner;
import com.konfigthis.client.model.DepartmentsUpdateAttributesRequest;
import com.konfigthis.client.model.DepartmentsUpdateAttributesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DepartmentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DepartmentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DepartmentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewDepartmentCall(String authorization, DepartmentsCreateNewDepartmentRequest departmentsCreateNewDepartmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = departmentsCreateNewDepartmentRequest;

        // create path and map variables
        String localVarPath = "/departments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewDepartmentValidateBeforeCall(String authorization, DepartmentsCreateNewDepartmentRequest departmentsCreateNewDepartmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createNewDepartment(Async)");
        }

        // verify the required parameter 'departmentsCreateNewDepartmentRequest' is set
        if (departmentsCreateNewDepartmentRequest == null) {
            throw new ApiException("Missing the required parameter 'departmentsCreateNewDepartmentRequest' when calling createNewDepartment(Async)");
        }

        return createNewDepartmentCall(authorization, departmentsCreateNewDepartmentRequest, _callback);

    }


    private ApiResponse<DepartmentsCreateNewDepartmentResponse> createNewDepartmentWithHttpInfo(String authorization, DepartmentsCreateNewDepartmentRequest departmentsCreateNewDepartmentRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewDepartmentValidateBeforeCall(authorization, departmentsCreateNewDepartmentRequest, null);
        Type localVarReturnType = new TypeToken<DepartmentsCreateNewDepartmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewDepartmentAsync(String authorization, DepartmentsCreateNewDepartmentRequest departmentsCreateNewDepartmentRequest, final ApiCallback<DepartmentsCreateNewDepartmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewDepartmentValidateBeforeCall(authorization, departmentsCreateNewDepartmentRequest, _callback);
        Type localVarReturnType = new TypeToken<DepartmentsCreateNewDepartmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewDepartmentRequestBuilder {
        private final String authorization;
        private String name;

        private CreateNewDepartmentRequestBuilder(String authorization) {
            this.authorization = authorization;
        }

        /**
         * Set name
         * @param name The new name of the department to update. Required field. (optional)
         * @return CreateNewDepartmentRequestBuilder
         */
        public CreateNewDepartmentRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for createNewDepartment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DepartmentsCreateNewDepartmentRequest departmentsCreateNewDepartmentRequest = buildBodyParams();
            return createNewDepartmentCall(authorization, departmentsCreateNewDepartmentRequest, _callback);
        }

        private DepartmentsCreateNewDepartmentRequest buildBodyParams() {
            DepartmentsCreateNewDepartmentRequest departmentsCreateNewDepartmentRequest = new DepartmentsCreateNewDepartmentRequest();
            departmentsCreateNewDepartmentRequest.name(this.name);
            return departmentsCreateNewDepartmentRequest;
        }

        /**
         * Execute createNewDepartment request
         * @return DepartmentsCreateNewDepartmentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public DepartmentsCreateNewDepartmentResponse execute() throws ApiException {
            DepartmentsCreateNewDepartmentRequest departmentsCreateNewDepartmentRequest = buildBodyParams();
            ApiResponse<DepartmentsCreateNewDepartmentResponse> localVarResp = createNewDepartmentWithHttpInfo(authorization, departmentsCreateNewDepartmentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewDepartment request with HTTP info returned
         * @return ApiResponse&lt;DepartmentsCreateNewDepartmentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DepartmentsCreateNewDepartmentResponse> executeWithHttpInfo() throws ApiException {
            DepartmentsCreateNewDepartmentRequest departmentsCreateNewDepartmentRequest = buildBodyParams();
            return createNewDepartmentWithHttpInfo(authorization, departmentsCreateNewDepartmentRequest);
        }

        /**
         * Execute createNewDepartment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DepartmentsCreateNewDepartmentResponse> _callback) throws ApiException {
            DepartmentsCreateNewDepartmentRequest departmentsCreateNewDepartmentRequest = buildBodyParams();
            return createNewDepartmentAsync(authorization, departmentsCreateNewDepartmentRequest, _callback);
        }
    }

    /**
     * 
     * Creates a new department.&lt;br&gt;The *name* is the only required field.&lt;br&gt;
     * @param authorization A valid bearer token. (required)
     * @param departmentsCreateNewDepartmentRequest  (required)
     * @return CreateNewDepartmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewDepartmentRequestBuilder createNewDepartment(String authorization) throws IllegalArgumentException {
        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new CreateNewDepartmentRequestBuilder(authorization);
    }
    private okhttp3.Call getByIdCall(String id, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/departments/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String id, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getById(Async)");
        }

        return getByIdCall(id, authorization, _callback);

    }


    private ApiResponse<DepartmentsGetByIdResponse> getByIdWithHttpInfo(String id, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, authorization, null);
        Type localVarReturnType = new TypeToken<DepartmentsGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String id, String authorization, final ApiCallback<DepartmentsGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, authorization, _callback);
        Type localVarReturnType = new TypeToken<DepartmentsGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String id;
        private final String authorization;

        private GetByIdRequestBuilder(String id, String authorization) {
            this.id = id;
            this.authorization = authorization;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, authorization, _callback);
        }


        /**
         * Execute getById request
         * @return DepartmentsGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public DepartmentsGetByIdResponse execute() throws ApiException {
            ApiResponse<DepartmentsGetByIdResponse> localVarResp = getByIdWithHttpInfo(id, authorization);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;DepartmentsGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DepartmentsGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id, authorization);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DepartmentsGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(id, authorization, _callback);
        }
    }

    /**
     * 
     * Returns the department referenced by *id*.
     * @param id The _id of the department entry to request. (required)
     * @param authorization A valid bearer token. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String id, String authorization) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new GetByIdRequestBuilder(id, authorization);
    }
    private okhttp3.Call listDepartmentsCall(String authorization, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/departments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDepartmentsValidateBeforeCall(String authorization, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listDepartments(Async)");
        }

        return listDepartmentsCall(authorization, name, _callback);

    }


    private ApiResponse<List<DepartmentsListDepartmentsResponseInner>> listDepartmentsWithHttpInfo(String authorization, String name) throws ApiException {
        okhttp3.Call localVarCall = listDepartmentsValidateBeforeCall(authorization, name, null);
        Type localVarReturnType = new TypeToken<List<DepartmentsListDepartmentsResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listDepartmentsAsync(String authorization, String name, final ApiCallback<List<DepartmentsListDepartmentsResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDepartmentsValidateBeforeCall(authorization, name, _callback);
        Type localVarReturnType = new TypeToken<List<DepartmentsListDepartmentsResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListDepartmentsRequestBuilder {
        private final String authorization;
        private String name;

        private ListDepartmentsRequestBuilder(String authorization) {
            this.authorization = authorization;
        }

        /**
         * Set name
         * @param name The department name. (optional)
         * @return ListDepartmentsRequestBuilder
         */
        public ListDepartmentsRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for listDepartments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listDepartmentsCall(authorization, name, _callback);
        }


        /**
         * Execute listDepartments request
         * @return List&lt;DepartmentsListDepartmentsResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public List<DepartmentsListDepartmentsResponseInner> execute() throws ApiException {
            ApiResponse<List<DepartmentsListDepartmentsResponseInner>> localVarResp = listDepartmentsWithHttpInfo(authorization, name);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listDepartments request with HTTP info returned
         * @return ApiResponse&lt;List&lt;DepartmentsListDepartmentsResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<DepartmentsListDepartmentsResponseInner>> executeWithHttpInfo() throws ApiException {
            return listDepartmentsWithHttpInfo(authorization, name);
        }

        /**
         * Execute listDepartments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<DepartmentsListDepartmentsResponseInner>> _callback) throws ApiException {
            return listDepartmentsAsync(authorization, name, _callback);
        }
    }

    /**
     * 
     * Returns a list of the existing departments in Kenjo.
     * @param authorization A valid bearer token. (required)
     * @return ListDepartmentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public ListDepartmentsRequestBuilder listDepartments(String authorization) throws IllegalArgumentException {
        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new ListDepartmentsRequestBuilder(authorization);
    }
    private okhttp3.Call removeByIdCall(String id, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/departments/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String id, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeById(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling removeById(Async)");
        }

        return removeByIdCall(id, authorization, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(String id, String authorization) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(id, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(String id, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(id, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String id;
        private final String authorization;

        private RemoveByIdRequestBuilder(String id, String authorization) {
            this.id = id;
            this.authorization = authorization;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(id, authorization, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(id, authorization);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(id, authorization);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(id, authorization, _callback);
        }
    }

    /**
     * 
     * Removes the department referenced by *id*.
     * @param id The _id of the department entry to request. (required)
     * @param authorization A valid bearer token. (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String id, String authorization) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new RemoveByIdRequestBuilder(id, authorization);
    }
    private okhttp3.Call updateAttributesCall(String id, String authorization, DepartmentsUpdateAttributesRequest departmentsUpdateAttributesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = departmentsUpdateAttributesRequest;

        // create path and map variables
        String localVarPath = "/departments/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAttributesValidateBeforeCall(String id, String authorization, DepartmentsUpdateAttributesRequest departmentsUpdateAttributesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateAttributes(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateAttributes(Async)");
        }

        // verify the required parameter 'departmentsUpdateAttributesRequest' is set
        if (departmentsUpdateAttributesRequest == null) {
            throw new ApiException("Missing the required parameter 'departmentsUpdateAttributesRequest' when calling updateAttributes(Async)");
        }

        return updateAttributesCall(id, authorization, departmentsUpdateAttributesRequest, _callback);

    }


    private ApiResponse<DepartmentsUpdateAttributesResponse> updateAttributesWithHttpInfo(String id, String authorization, DepartmentsUpdateAttributesRequest departmentsUpdateAttributesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAttributesValidateBeforeCall(id, authorization, departmentsUpdateAttributesRequest, null);
        Type localVarReturnType = new TypeToken<DepartmentsUpdateAttributesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAttributesAsync(String id, String authorization, DepartmentsUpdateAttributesRequest departmentsUpdateAttributesRequest, final ApiCallback<DepartmentsUpdateAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAttributesValidateBeforeCall(id, authorization, departmentsUpdateAttributesRequest, _callback);
        Type localVarReturnType = new TypeToken<DepartmentsUpdateAttributesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAttributesRequestBuilder {
        private final String id;
        private final String authorization;
        private String name;

        private UpdateAttributesRequestBuilder(String id, String authorization) {
            this.id = id;
            this.authorization = authorization;
        }

        /**
         * Set name
         * @param name The new name of the department to update. (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateAttributes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DepartmentsUpdateAttributesRequest departmentsUpdateAttributesRequest = buildBodyParams();
            return updateAttributesCall(id, authorization, departmentsUpdateAttributesRequest, _callback);
        }

        private DepartmentsUpdateAttributesRequest buildBodyParams() {
            DepartmentsUpdateAttributesRequest departmentsUpdateAttributesRequest = new DepartmentsUpdateAttributesRequest();
            departmentsUpdateAttributesRequest.name(this.name);
            return departmentsUpdateAttributesRequest;
        }

        /**
         * Execute updateAttributes request
         * @return DepartmentsUpdateAttributesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public DepartmentsUpdateAttributesResponse execute() throws ApiException {
            DepartmentsUpdateAttributesRequest departmentsUpdateAttributesRequest = buildBodyParams();
            ApiResponse<DepartmentsUpdateAttributesResponse> localVarResp = updateAttributesWithHttpInfo(id, authorization, departmentsUpdateAttributesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateAttributes request with HTTP info returned
         * @return ApiResponse&lt;DepartmentsUpdateAttributesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DepartmentsUpdateAttributesResponse> executeWithHttpInfo() throws ApiException {
            DepartmentsUpdateAttributesRequest departmentsUpdateAttributesRequest = buildBodyParams();
            return updateAttributesWithHttpInfo(id, authorization, departmentsUpdateAttributesRequest);
        }

        /**
         * Execute updateAttributes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DepartmentsUpdateAttributesResponse> _callback) throws ApiException {
            DepartmentsUpdateAttributesRequest departmentsUpdateAttributesRequest = buildBodyParams();
            return updateAttributesAsync(id, authorization, departmentsUpdateAttributesRequest, _callback);
        }
    }

    /**
     * 
     * Updates a deparment referenced by *id*. Only the attributes submitted are modified.
     * @param id The _id of the deparment entry to request. (required)
     * @param authorization A valid bearer token. (required)
     * @param departmentsUpdateAttributesRequest  (required)
     * @return UpdateAttributesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAttributesRequestBuilder updateAttributes(String id, String authorization) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new UpdateAttributesRequestBuilder(id, authorization);
    }
}
