/*
 * Kenjo API
 * Before starting to use the Kenjo API, you have to request the API activation for a sandbox or production environment to the Kenjo Customer Success team. After that, an admin user has to go to *Settings > Integrations > API keys*, to generate the **API Key**. Follow the steps described in the **Autentication section** of this document. <br>The API key is needed to request the bearer token. Each endpoint callout requires a valid bearer token in the Authorization header. Once the token is retrieved, it will be useful during the time limit indicated by the 'expiration date'.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmployeesCreateInactiveEmployeeRequest;
import com.konfigthis.client.model.EmployeesCreateInactiveEmployeeRequestAccount;
import com.konfigthis.client.model.EmployeesCreateInactiveEmployeeRequestAddress;
import com.konfigthis.client.model.EmployeesCreateInactiveEmployeeRequestFinancial;
import com.konfigthis.client.model.EmployeesCreateInactiveEmployeeRequestHome;
import com.konfigthis.client.model.EmployeesCreateInactiveEmployeeRequestPersonal;
import com.konfigthis.client.model.EmployeesCreateInactiveEmployeeRequestWork;
import com.konfigthis.client.model.EmployeesCreateInactiveEmployeeRequestWorkSchedule;
import com.konfigthis.client.model.EmployeesCreateInactiveEmployeeResponse;
import com.konfigthis.client.model.EmployeesGetAccountsResponse;
import com.konfigthis.client.model.EmployeesGetEmployeeInformationResponse;
import com.konfigthis.client.model.EmployeesGetListResponse;
import com.konfigthis.client.model.EmployeesGetWorkSchedulesResponse;
import com.konfigthis.client.model.EmployeesListAddressesResponse;
import com.konfigthis.client.model.EmployeesListFinancialsResponse;
import com.konfigthis.client.model.EmployeesListHomesResponse;
import com.konfigthis.client.model.EmployeesListPersonalsResponse;
import com.konfigthis.client.model.EmployeesListWorksResponse;
import com.konfigthis.client.model.EmployeesUpdateAddressRequest;
import com.konfigthis.client.model.EmployeesUpdateAddressResponse;
import com.konfigthis.client.model.EmployeesUpdateEmployeeAccountsRequest;
import com.konfigthis.client.model.EmployeesUpdateEmployeeAccountsResponse;
import com.konfigthis.client.model.EmployeesUpdateFinancialsRequest;
import com.konfigthis.client.model.EmployeesUpdateFinancialsResponse;
import com.konfigthis.client.model.EmployeesUpdateHomeRequest;
import com.konfigthis.client.model.EmployeesUpdateHomeResponse;
import com.konfigthis.client.model.EmployeesUpdatePersonalsRequest;
import com.konfigthis.client.model.EmployeesUpdatePersonalsResponse;
import com.konfigthis.client.model.EmployeesUpdateWorkScheduleRequest;
import com.konfigthis.client.model.EmployeesUpdateWorkScheduleResponse;
import com.konfigthis.client.model.EmployeesUpdateWorksRequest;
import com.konfigthis.client.model.EmployeesUpdateWorksResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call activateEmployeeCall(String employeeId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employees/{employeeId}/activate"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateEmployeeValidateBeforeCall(String employeeId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling activateEmployee(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling activateEmployee(Async)");
        }

        return activateEmployeeCall(employeeId, authorization, _callback);

    }


    private ApiResponse<String> activateEmployeeWithHttpInfo(String employeeId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = activateEmployeeValidateBeforeCall(employeeId, authorization, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call activateEmployeeAsync(String employeeId, String authorization, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateEmployeeValidateBeforeCall(employeeId, authorization, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ActivateEmployeeRequestBuilder {
        private final String employeeId;
        private final String authorization;

        private ActivateEmployeeRequestBuilder(String employeeId, String authorization) {
            this.employeeId = employeeId;
            this.authorization = authorization;
        }

        /**
         * Build call for activateEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return activateEmployeeCall(employeeId, authorization, _callback);
        }


        /**
         * Execute activateEmployee request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = activateEmployeeWithHttpInfo(employeeId, authorization);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute activateEmployee request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return activateEmployeeWithHttpInfo(employeeId, authorization);
        }

        /**
         * Execute activateEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return activateEmployeeAsync(employeeId, authorization, _callback);
        }
    }

    /**
     * 
     * This endpoint activates a Kenjo employee given by the employeeId. It sends an email to the recipient of the employee email to start the onboarding process. Once the password is filled, the employee changes to &#39;active&#39; (&#39;isActive&#39; &#x3D; TRUE). While the employee is not active it is possible to send activation emails.
     * @param employeeId The _id of the employee to send the activation email. (required)
     * @param authorization A valid bearer token. (required)
     * @return ActivateEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public ActivateEmployeeRequestBuilder activateEmployee(String employeeId, String authorization) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new ActivateEmployeeRequestBuilder(employeeId, authorization);
    }
    private okhttp3.Call createInactiveEmployeeCall(String authorization, EmployeesCreateInactiveEmployeeRequest employeesCreateInactiveEmployeeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeesCreateInactiveEmployeeRequest;

        // create path and map variables
        String localVarPath = "/employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInactiveEmployeeValidateBeforeCall(String authorization, EmployeesCreateInactiveEmployeeRequest employeesCreateInactiveEmployeeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createInactiveEmployee(Async)");
        }

        // verify the required parameter 'employeesCreateInactiveEmployeeRequest' is set
        if (employeesCreateInactiveEmployeeRequest == null) {
            throw new ApiException("Missing the required parameter 'employeesCreateInactiveEmployeeRequest' when calling createInactiveEmployee(Async)");
        }

        return createInactiveEmployeeCall(authorization, employeesCreateInactiveEmployeeRequest, _callback);

    }


    private ApiResponse<EmployeesCreateInactiveEmployeeResponse> createInactiveEmployeeWithHttpInfo(String authorization, EmployeesCreateInactiveEmployeeRequest employeesCreateInactiveEmployeeRequest) throws ApiException {
        okhttp3.Call localVarCall = createInactiveEmployeeValidateBeforeCall(authorization, employeesCreateInactiveEmployeeRequest, null);
        Type localVarReturnType = new TypeToken<EmployeesCreateInactiveEmployeeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createInactiveEmployeeAsync(String authorization, EmployeesCreateInactiveEmployeeRequest employeesCreateInactiveEmployeeRequest, final ApiCallback<EmployeesCreateInactiveEmployeeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInactiveEmployeeValidateBeforeCall(authorization, employeesCreateInactiveEmployeeRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeesCreateInactiveEmployeeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateInactiveEmployeeRequestBuilder {
        private final String authorization;
        private EmployeesCreateInactiveEmployeeRequestAccount account;
        private EmployeesCreateInactiveEmployeeRequestPersonal personal;
        private EmployeesCreateInactiveEmployeeRequestWork work;
        private EmployeesCreateInactiveEmployeeRequestWorkSchedule workSchedule;
        private EmployeesCreateInactiveEmployeeRequestAddress address;
        private EmployeesCreateInactiveEmployeeRequestFinancial financial;
        private EmployeesCreateInactiveEmployeeRequestHome home;

        private CreateInactiveEmployeeRequestBuilder(String authorization) {
            this.authorization = authorization;
        }

        /**
         * Set account
         * @param account  (optional)
         * @return CreateInactiveEmployeeRequestBuilder
         */
        public CreateInactiveEmployeeRequestBuilder account(EmployeesCreateInactiveEmployeeRequestAccount account) {
            this.account = account;
            return this;
        }
        
        /**
         * Set personal
         * @param personal  (optional)
         * @return CreateInactiveEmployeeRequestBuilder
         */
        public CreateInactiveEmployeeRequestBuilder personal(EmployeesCreateInactiveEmployeeRequestPersonal personal) {
            this.personal = personal;
            return this;
        }
        
        /**
         * Set work
         * @param work  (optional)
         * @return CreateInactiveEmployeeRequestBuilder
         */
        public CreateInactiveEmployeeRequestBuilder work(EmployeesCreateInactiveEmployeeRequestWork work) {
            this.work = work;
            return this;
        }
        
        /**
         * Set workSchedule
         * @param workSchedule  (optional)
         * @return CreateInactiveEmployeeRequestBuilder
         */
        public CreateInactiveEmployeeRequestBuilder workSchedule(EmployeesCreateInactiveEmployeeRequestWorkSchedule workSchedule) {
            this.workSchedule = workSchedule;
            return this;
        }
        
        /**
         * Set address
         * @param address  (optional)
         * @return CreateInactiveEmployeeRequestBuilder
         */
        public CreateInactiveEmployeeRequestBuilder address(EmployeesCreateInactiveEmployeeRequestAddress address) {
            this.address = address;
            return this;
        }
        
        /**
         * Set financial
         * @param financial  (optional)
         * @return CreateInactiveEmployeeRequestBuilder
         */
        public CreateInactiveEmployeeRequestBuilder financial(EmployeesCreateInactiveEmployeeRequestFinancial financial) {
            this.financial = financial;
            return this;
        }
        
        /**
         * Set home
         * @param home  (optional)
         * @return CreateInactiveEmployeeRequestBuilder
         */
        public CreateInactiveEmployeeRequestBuilder home(EmployeesCreateInactiveEmployeeRequestHome home) {
            this.home = home;
            return this;
        }
        
        /**
         * Build call for createInactiveEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeesCreateInactiveEmployeeRequest employeesCreateInactiveEmployeeRequest = buildBodyParams();
            return createInactiveEmployeeCall(authorization, employeesCreateInactiveEmployeeRequest, _callback);
        }

        private EmployeesCreateInactiveEmployeeRequest buildBodyParams() {
            EmployeesCreateInactiveEmployeeRequest employeesCreateInactiveEmployeeRequest = new EmployeesCreateInactiveEmployeeRequest();
            employeesCreateInactiveEmployeeRequest.account(this.account);
            employeesCreateInactiveEmployeeRequest.personal(this.personal);
            employeesCreateInactiveEmployeeRequest.work(this.work);
            employeesCreateInactiveEmployeeRequest.workSchedule(this.workSchedule);
            employeesCreateInactiveEmployeeRequest.address(this.address);
            employeesCreateInactiveEmployeeRequest.financial(this.financial);
            employeesCreateInactiveEmployeeRequest.home(this.home);
            return employeesCreateInactiveEmployeeRequest;
        }

        /**
         * Execute createInactiveEmployee request
         * @return EmployeesCreateInactiveEmployeeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesCreateInactiveEmployeeResponse execute() throws ApiException {
            EmployeesCreateInactiveEmployeeRequest employeesCreateInactiveEmployeeRequest = buildBodyParams();
            ApiResponse<EmployeesCreateInactiveEmployeeResponse> localVarResp = createInactiveEmployeeWithHttpInfo(authorization, employeesCreateInactiveEmployeeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createInactiveEmployee request with HTTP info returned
         * @return ApiResponse&lt;EmployeesCreateInactiveEmployeeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesCreateInactiveEmployeeResponse> executeWithHttpInfo() throws ApiException {
            EmployeesCreateInactiveEmployeeRequest employeesCreateInactiveEmployeeRequest = buildBodyParams();
            return createInactiveEmployeeWithHttpInfo(authorization, employeesCreateInactiveEmployeeRequest);
        }

        /**
         * Execute createInactiveEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesCreateInactiveEmployeeResponse> _callback) throws ApiException {
            EmployeesCreateInactiveEmployeeRequest employeesCreateInactiveEmployeeRequest = buildBodyParams();
            return createInactiveEmployeeAsync(authorization, employeesCreateInactiveEmployeeRequest, _callback);
        }
    }

    /**
     * 
     * This endpoint creates a deactivated employee in Kenjo, the &#39;isActive&#39; field set to false. To activate an employee use the put /activate method. This method will send an activation message to the employee email to complete the activation through the onboarding wizard. &lt;br&gt;&lt;br&gt;The field *email* is required and must be unique. Also *firstName*, *lastName* and *companyId* are required fields. If the work schedule is not provided then all the days of the week except Saturdays and Sundays are set to true. If the *language* is not specified, the assigned company language will be set by default. &lt;br&gt;&lt;br&gt;**Custom fields** information can be provided in this operation for the **personal**, **work**, **address**, **financial** and **home** sections. The *API name* of the custom field is required and the data format has to match with the type defined for the custom field in Kenjo. API names start with &#39;c_&#39; and the rest is composed by the trimmed name (spaces are removed). &lt;br&gt;&lt;br&gt; Example: &lt;br&gt; *The custom field &#39;Activity type&#39; belongs to the section &#39;work&#39;*:   &#x60;&#x60;&#x60; ... {   ...     \&quot;work\&quot;: {       \&quot;c_Activitytype\&quot;: \&quot;1\&quot;,       ...     },   ... } &#x60;&#x60;&#x60; *&#39;Activity type&#39; is a field type &#39;List&#39; (Strings list) with the possible values: \&quot;1\&quot;, \&quot;2\&quot; and \&quot;3\&quot;. It means that if a different value or type is provided then the request will return an error.* &lt;br&gt;&lt;br&gt;If the operation get success then an inactive employee is created and the response will include the provided information and the Kenjo id for the new employee. 
     * @param authorization A valid bearer token. (required)
     * @param employeesCreateInactiveEmployeeRequest  (required)
     * @return CreateInactiveEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public CreateInactiveEmployeeRequestBuilder createInactiveEmployee(String authorization) throws IllegalArgumentException {
        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new CreateInactiveEmployeeRequestBuilder(authorization);
    }
    private okhttp3.Call deactivateEmployeeByIdCall(String employeeId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employees/{employeeId}/deactivate"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivateEmployeeByIdValidateBeforeCall(String employeeId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling deactivateEmployeeById(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deactivateEmployeeById(Async)");
        }

        return deactivateEmployeeByIdCall(employeeId, authorization, _callback);

    }


    private ApiResponse<String> deactivateEmployeeByIdWithHttpInfo(String employeeId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deactivateEmployeeByIdValidateBeforeCall(employeeId, authorization, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deactivateEmployeeByIdAsync(String employeeId, String authorization, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivateEmployeeByIdValidateBeforeCall(employeeId, authorization, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeactivateEmployeeByIdRequestBuilder {
        private final String employeeId;
        private final String authorization;

        private DeactivateEmployeeByIdRequestBuilder(String employeeId, String authorization) {
            this.employeeId = employeeId;
            this.authorization = authorization;
        }

        /**
         * Build call for deactivateEmployeeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deactivateEmployeeByIdCall(employeeId, authorization, _callback);
        }


        /**
         * Execute deactivateEmployeeById request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = deactivateEmployeeByIdWithHttpInfo(employeeId, authorization);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deactivateEmployeeById request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return deactivateEmployeeByIdWithHttpInfo(employeeId, authorization);
        }

        /**
         * Execute deactivateEmployeeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return deactivateEmployeeByIdAsync(employeeId, authorization, _callback);
        }
    }

    /**
     * 
     * This endpoint deactivates a Kenjo employee given by the employeeId. It sets the isActive field to FALSE and invalidate the access Kenjo for the employee. While the employee is not active it is possible to send activation emails.
     * @param employeeId The _id of the employee to update. (required)
     * @param authorization A valid bearer token. (required)
     * @return DeactivateEmployeeByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public DeactivateEmployeeByIdRequestBuilder deactivateEmployeeById(String employeeId, String authorization) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new DeactivateEmployeeByIdRequestBuilder(employeeId, authorization);
    }
    private okhttp3.Call getAccountsCall(String authorization, String email, String language, String externalId, Boolean isActive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employees/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (externalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("externalId", externalId));
        }

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isActive", isActive));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountsValidateBeforeCall(String authorization, String email, String language, String externalId, Boolean isActive, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getAccounts(Async)");
        }

        return getAccountsCall(authorization, email, language, externalId, isActive, _callback);

    }


    private ApiResponse<EmployeesGetAccountsResponse> getAccountsWithHttpInfo(String authorization, String email, String language, String externalId, Boolean isActive) throws ApiException {
        okhttp3.Call localVarCall = getAccountsValidateBeforeCall(authorization, email, language, externalId, isActive, null);
        Type localVarReturnType = new TypeToken<EmployeesGetAccountsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAccountsAsync(String authorization, String email, String language, String externalId, Boolean isActive, final ApiCallback<EmployeesGetAccountsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountsValidateBeforeCall(authorization, email, language, externalId, isActive, _callback);
        Type localVarReturnType = new TypeToken<EmployeesGetAccountsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAccountsRequestBuilder {
        private final String authorization;
        private String email;
        private String language;
        private String externalId;
        private Boolean isActive;

        private GetAccountsRequestBuilder(String authorization) {
            this.authorization = authorization;
        }

        /**
         * Set email
         * @param email The Kenjo email of the employee. (optional)
         * @return GetAccountsRequestBuilder
         */
        public GetAccountsRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set language
         * @param language The employee language. (optional)
         * @return GetAccountsRequestBuilder
         */
        public GetAccountsRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set externalId
         * @param externalId The external id of the employee. (optional)
         * @return GetAccountsRequestBuilder
         */
        public GetAccountsRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set isActive
         * @param isActive The employee activation status. (optional)
         * @return GetAccountsRequestBuilder
         */
        public GetAccountsRequestBuilder isActive(Boolean isActive) {
            this.isActive = isActive;
            return this;
        }
        
        /**
         * Build call for getAccounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAccountsCall(authorization, email, language, externalId, isActive, _callback);
        }


        /**
         * Execute getAccounts request
         * @return EmployeesGetAccountsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesGetAccountsResponse execute() throws ApiException {
            ApiResponse<EmployeesGetAccountsResponse> localVarResp = getAccountsWithHttpInfo(authorization, email, language, externalId, isActive);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAccounts request with HTTP info returned
         * @return ApiResponse&lt;EmployeesGetAccountsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesGetAccountsResponse> executeWithHttpInfo() throws ApiException {
            return getAccountsWithHttpInfo(authorization, email, language, externalId, isActive);
        }

        /**
         * Execute getAccounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesGetAccountsResponse> _callback) throws ApiException {
            return getAccountsAsync(authorization, email, language, externalId, isActive, _callback);
        }
    }

    /**
     * 
     * This endpoint returns a list with the **account** sections of the existing employees. The account section contains information such as *email*, *external Id*, *language* and *activation status*.
     * @param authorization A valid bearer token. (required)
     * @return GetAccountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public GetAccountsRequestBuilder getAccounts(String authorization) throws IllegalArgumentException {
        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new GetAccountsRequestBuilder(authorization);
    }
    private okhttp3.Call getEmployeeInformationCall(String authorization, String employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employees/{employeeId}"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployeeInformationValidateBeforeCall(String authorization, String employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getEmployeeInformation(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getEmployeeInformation(Async)");
        }

        return getEmployeeInformationCall(authorization, employeeId, _callback);

    }


    private ApiResponse<EmployeesGetEmployeeInformationResponse> getEmployeeInformationWithHttpInfo(String authorization, String employeeId) throws ApiException {
        okhttp3.Call localVarCall = getEmployeeInformationValidateBeforeCall(authorization, employeeId, null);
        Type localVarReturnType = new TypeToken<EmployeesGetEmployeeInformationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmployeeInformationAsync(String authorization, String employeeId, final ApiCallback<EmployeesGetEmployeeInformationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployeeInformationValidateBeforeCall(authorization, employeeId, _callback);
        Type localVarReturnType = new TypeToken<EmployeesGetEmployeeInformationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEmployeeInformationRequestBuilder {
        private final String authorization;
        private final String employeeId;

        private GetEmployeeInformationRequestBuilder(String authorization, String employeeId) {
            this.authorization = authorization;
            this.employeeId = employeeId;
        }

        /**
         * Build call for getEmployeeInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmployeeInformationCall(authorization, employeeId, _callback);
        }


        /**
         * Execute getEmployeeInformation request
         * @return EmployeesGetEmployeeInformationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesGetEmployeeInformationResponse execute() throws ApiException {
            ApiResponse<EmployeesGetEmployeeInformationResponse> localVarResp = getEmployeeInformationWithHttpInfo(authorization, employeeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEmployeeInformation request with HTTP info returned
         * @return ApiResponse&lt;EmployeesGetEmployeeInformationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesGetEmployeeInformationResponse> executeWithHttpInfo() throws ApiException {
            return getEmployeeInformationWithHttpInfo(authorization, employeeId);
        }

        /**
         * Execute getEmployeeInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesGetEmployeeInformationResponse> _callback) throws ApiException {
            return getEmployeeInformationAsync(authorization, employeeId, _callback);
        }
    }

    /**
     * 
     * This endpoint returns information about the **account**, **personal**, **work**, **work schedule**, **address**, **financial** and **home** sections for a given employee id. The *employeeId* param represents a Kenjo employee id.
     * @param authorization A valid bearer token. (required)
     * @param employeeId The _id of the employee to request. (required)
     * @return GetEmployeeInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public GetEmployeeInformationRequestBuilder getEmployeeInformation(String authorization, String employeeId) throws IllegalArgumentException {
        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetEmployeeInformationRequestBuilder(authorization, employeeId);
    }
    private okhttp3.Call getListCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getList(Async)");
        }

        return getListCall(authorization, _callback);

    }


    private ApiResponse<EmployeesGetListResponse> getListWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<EmployeesGetListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(String authorization, final ApiCallback<EmployeesGetListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<EmployeesGetListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {
        private final String authorization;

        private GetListRequestBuilder(String authorization) {
            this.authorization = authorization;
        }

        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(authorization, _callback);
        }


        /**
         * Execute getList request
         * @return EmployeesGetListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesGetListResponse execute() throws ApiException {
            ApiResponse<EmployeesGetListResponse> localVarResp = getListWithHttpInfo(authorization);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;EmployeesGetListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesGetListResponse> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo(authorization);
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesGetListResponse> _callback) throws ApiException {
            return getListAsync(authorization, _callback);
        }
    }

    /**
     * 
     * This endpoint returns the list of employee accounts existing in Kenjo. It is similar to the *_/employees/accounts* endpoint.
     * @param authorization A valid bearer token. (required)
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList(String authorization) throws IllegalArgumentException {
        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new GetListRequestBuilder(authorization);
    }
    private okhttp3.Call getWorkSchedulesCall(String authorization, Boolean trackAttendance, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employees/work-schedules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trackAttendance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trackAttendance", trackAttendance));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkSchedulesValidateBeforeCall(String authorization, Boolean trackAttendance, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getWorkSchedules(Async)");
        }

        return getWorkSchedulesCall(authorization, trackAttendance, _callback);

    }


    private ApiResponse<EmployeesGetWorkSchedulesResponse> getWorkSchedulesWithHttpInfo(String authorization, Boolean trackAttendance) throws ApiException {
        okhttp3.Call localVarCall = getWorkSchedulesValidateBeforeCall(authorization, trackAttendance, null);
        Type localVarReturnType = new TypeToken<EmployeesGetWorkSchedulesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkSchedulesAsync(String authorization, Boolean trackAttendance, final ApiCallback<EmployeesGetWorkSchedulesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkSchedulesValidateBeforeCall(authorization, trackAttendance, _callback);
        Type localVarReturnType = new TypeToken<EmployeesGetWorkSchedulesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkSchedulesRequestBuilder {
        private final String authorization;
        private Boolean trackAttendance;

        private GetWorkSchedulesRequestBuilder(String authorization) {
            this.authorization = authorization;
        }

        /**
         * Set trackAttendance
         * @param trackAttendance The activation status of attendance tracking for the employee. (optional)
         * @return GetWorkSchedulesRequestBuilder
         */
        public GetWorkSchedulesRequestBuilder trackAttendance(Boolean trackAttendance) {
            this.trackAttendance = trackAttendance;
            return this;
        }
        
        /**
         * Build call for getWorkSchedules
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkSchedulesCall(authorization, trackAttendance, _callback);
        }


        /**
         * Execute getWorkSchedules request
         * @return EmployeesGetWorkSchedulesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesGetWorkSchedulesResponse execute() throws ApiException {
            ApiResponse<EmployeesGetWorkSchedulesResponse> localVarResp = getWorkSchedulesWithHttpInfo(authorization, trackAttendance);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkSchedules request with HTTP info returned
         * @return ApiResponse&lt;EmployeesGetWorkSchedulesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesGetWorkSchedulesResponse> executeWithHttpInfo() throws ApiException {
            return getWorkSchedulesWithHttpInfo(authorization, trackAttendance);
        }

        /**
         * Execute getWorkSchedules request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesGetWorkSchedulesResponse> _callback) throws ApiException {
            return getWorkSchedulesAsync(authorization, trackAttendance, _callback);
        }
    }

    /**
     * 
     * This endpoint returns a list with the **work schedule** sections of the existing employees.
     * @param authorization A valid bearer token. (required)
     * @return GetWorkSchedulesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkSchedulesRequestBuilder getWorkSchedules(String authorization) throws IllegalArgumentException {
        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new GetWorkSchedulesRequestBuilder(authorization);
    }
    private okhttp3.Call listAddressesCall(String authorization, String street, String postalCode, String city, String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employees/addresses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (street != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("street", street));
        }

        if (postalCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postalCode", postalCode));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAddressesValidateBeforeCall(String authorization, String street, String postalCode, String city, String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listAddresses(Async)");
        }

        return listAddressesCall(authorization, street, postalCode, city, country, _callback);

    }


    private ApiResponse<EmployeesListAddressesResponse> listAddressesWithHttpInfo(String authorization, String street, String postalCode, String city, String country) throws ApiException {
        okhttp3.Call localVarCall = listAddressesValidateBeforeCall(authorization, street, postalCode, city, country, null);
        Type localVarReturnType = new TypeToken<EmployeesListAddressesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAddressesAsync(String authorization, String street, String postalCode, String city, String country, final ApiCallback<EmployeesListAddressesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAddressesValidateBeforeCall(authorization, street, postalCode, city, country, _callback);
        Type localVarReturnType = new TypeToken<EmployeesListAddressesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAddressesRequestBuilder {
        private final String authorization;
        private String street;
        private String postalCode;
        private String city;
        private String country;

        private ListAddressesRequestBuilder(String authorization) {
            this.authorization = authorization;
        }

        /**
         * Set street
         * @param street The name of the street. (optional)
         * @return ListAddressesRequestBuilder
         */
        public ListAddressesRequestBuilder street(String street) {
            this.street = street;
            return this;
        }
        
        /**
         * Set postalCode
         * @param postalCode The postal code. (optional)
         * @return ListAddressesRequestBuilder
         */
        public ListAddressesRequestBuilder postalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
        }
        
        /**
         * Set city
         * @param city The city. (optional)
         * @return ListAddressesRequestBuilder
         */
        public ListAddressesRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set country
         * @param country The country code in ISO 3166-1 alpha-2. (optional)
         * @return ListAddressesRequestBuilder
         */
        public ListAddressesRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Build call for listAddresses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAddressesCall(authorization, street, postalCode, city, country, _callback);
        }


        /**
         * Execute listAddresses request
         * @return EmployeesListAddressesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesListAddressesResponse execute() throws ApiException {
            ApiResponse<EmployeesListAddressesResponse> localVarResp = listAddressesWithHttpInfo(authorization, street, postalCode, city, country);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAddresses request with HTTP info returned
         * @return ApiResponse&lt;EmployeesListAddressesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesListAddressesResponse> executeWithHttpInfo() throws ApiException {
            return listAddressesWithHttpInfo(authorization, street, postalCode, city, country);
        }

        /**
         * Execute listAddresses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesListAddressesResponse> _callback) throws ApiException {
            return listAddressesAsync(authorization, street, postalCode, city, country, _callback);
        }
    }

    /**
     * 
     * This endpoint returns a list with the **address** sections of the existing employees.
     * @param authorization A valid bearer token. (required)
     * @return ListAddressesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public ListAddressesRequestBuilder listAddresses(String authorization) throws IllegalArgumentException {
        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new ListAddressesRequestBuilder(authorization);
    }
    private okhttp3.Call listFinancialsCall(String authorization, String accountHolderName, String bankName, String accountNumber, String iban, String swiftCode, String nationalId, String passport, String nationalInsuranceNumber, String taxCode, String taxIdentificationNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employees/financials";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountHolderName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountHolderName", accountHolderName));
        }

        if (bankName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bankName", bankName));
        }

        if (accountNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountNumber", accountNumber));
        }

        if (iban != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iban", iban));
        }

        if (swiftCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("swiftCode", swiftCode));
        }

        if (nationalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nationalId", nationalId));
        }

        if (passport != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("passport", passport));
        }

        if (nationalInsuranceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nationalInsuranceNumber", nationalInsuranceNumber));
        }

        if (taxCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("taxCode", taxCode));
        }

        if (taxIdentificationNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("taxIdentificationNumber", taxIdentificationNumber));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFinancialsValidateBeforeCall(String authorization, String accountHolderName, String bankName, String accountNumber, String iban, String swiftCode, String nationalId, String passport, String nationalInsuranceNumber, String taxCode, String taxIdentificationNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listFinancials(Async)");
        }

        return listFinancialsCall(authorization, accountHolderName, bankName, accountNumber, iban, swiftCode, nationalId, passport, nationalInsuranceNumber, taxCode, taxIdentificationNumber, _callback);

    }


    private ApiResponse<EmployeesListFinancialsResponse> listFinancialsWithHttpInfo(String authorization, String accountHolderName, String bankName, String accountNumber, String iban, String swiftCode, String nationalId, String passport, String nationalInsuranceNumber, String taxCode, String taxIdentificationNumber) throws ApiException {
        okhttp3.Call localVarCall = listFinancialsValidateBeforeCall(authorization, accountHolderName, bankName, accountNumber, iban, swiftCode, nationalId, passport, nationalInsuranceNumber, taxCode, taxIdentificationNumber, null);
        Type localVarReturnType = new TypeToken<EmployeesListFinancialsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFinancialsAsync(String authorization, String accountHolderName, String bankName, String accountNumber, String iban, String swiftCode, String nationalId, String passport, String nationalInsuranceNumber, String taxCode, String taxIdentificationNumber, final ApiCallback<EmployeesListFinancialsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFinancialsValidateBeforeCall(authorization, accountHolderName, bankName, accountNumber, iban, swiftCode, nationalId, passport, nationalInsuranceNumber, taxCode, taxIdentificationNumber, _callback);
        Type localVarReturnType = new TypeToken<EmployeesListFinancialsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFinancialsRequestBuilder {
        private final String authorization;
        private String accountHolderName;
        private String bankName;
        private String accountNumber;
        private String iban;
        private String swiftCode;
        private String nationalId;
        private String passport;
        private String nationalInsuranceNumber;
        private String taxCode;
        private String taxIdentificationNumber;

        private ListFinancialsRequestBuilder(String authorization) {
            this.authorization = authorization;
        }

        /**
         * Set accountHolderName
         * @param accountHolderName The accounts holder&#39;s name. (optional)
         * @return ListFinancialsRequestBuilder
         */
        public ListFinancialsRequestBuilder accountHolderName(String accountHolderName) {
            this.accountHolderName = accountHolderName;
            return this;
        }
        
        /**
         * Set bankName
         * @param bankName The bank name. (optional)
         * @return ListFinancialsRequestBuilder
         */
        public ListFinancialsRequestBuilder bankName(String bankName) {
            this.bankName = bankName;
            return this;
        }
        
        /**
         * Set accountNumber
         * @param accountNumber The account number. (optional)
         * @return ListFinancialsRequestBuilder
         */
        public ListFinancialsRequestBuilder accountNumber(String accountNumber) {
            this.accountNumber = accountNumber;
            return this;
        }
        
        /**
         * Set iban
         * @param iban The IBAN. (optional)
         * @return ListFinancialsRequestBuilder
         */
        public ListFinancialsRequestBuilder iban(String iban) {
            this.iban = iban;
            return this;
        }
        
        /**
         * Set swiftCode
         * @param swiftCode The SWIFT code. (optional)
         * @return ListFinancialsRequestBuilder
         */
        public ListFinancialsRequestBuilder swiftCode(String swiftCode) {
            this.swiftCode = swiftCode;
            return this;
        }
        
        /**
         * Set nationalId
         * @param nationalId The national id document (optional)
         * @return ListFinancialsRequestBuilder
         */
        public ListFinancialsRequestBuilder nationalId(String nationalId) {
            this.nationalId = nationalId;
            return this;
        }
        
        /**
         * Set passport
         * @param passport The passport number. (optional)
         * @return ListFinancialsRequestBuilder
         */
        public ListFinancialsRequestBuilder passport(String passport) {
            this.passport = passport;
            return this;
        }
        
        /**
         * Set nationalInsuranceNumber
         * @param nationalInsuranceNumber The national insurance number. (optional)
         * @return ListFinancialsRequestBuilder
         */
        public ListFinancialsRequestBuilder nationalInsuranceNumber(String nationalInsuranceNumber) {
            this.nationalInsuranceNumber = nationalInsuranceNumber;
            return this;
        }
        
        /**
         * Set taxCode
         * @param taxCode The tax number. (optional)
         * @return ListFinancialsRequestBuilder
         */
        public ListFinancialsRequestBuilder taxCode(String taxCode) {
            this.taxCode = taxCode;
            return this;
        }
        
        /**
         * Set taxIdentificationNumber
         * @param taxIdentificationNumber The tax identification number. (optional)
         * @return ListFinancialsRequestBuilder
         */
        public ListFinancialsRequestBuilder taxIdentificationNumber(String taxIdentificationNumber) {
            this.taxIdentificationNumber = taxIdentificationNumber;
            return this;
        }
        
        /**
         * Build call for listFinancials
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFinancialsCall(authorization, accountHolderName, bankName, accountNumber, iban, swiftCode, nationalId, passport, nationalInsuranceNumber, taxCode, taxIdentificationNumber, _callback);
        }


        /**
         * Execute listFinancials request
         * @return EmployeesListFinancialsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesListFinancialsResponse execute() throws ApiException {
            ApiResponse<EmployeesListFinancialsResponse> localVarResp = listFinancialsWithHttpInfo(authorization, accountHolderName, bankName, accountNumber, iban, swiftCode, nationalId, passport, nationalInsuranceNumber, taxCode, taxIdentificationNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFinancials request with HTTP info returned
         * @return ApiResponse&lt;EmployeesListFinancialsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesListFinancialsResponse> executeWithHttpInfo() throws ApiException {
            return listFinancialsWithHttpInfo(authorization, accountHolderName, bankName, accountNumber, iban, swiftCode, nationalId, passport, nationalInsuranceNumber, taxCode, taxIdentificationNumber);
        }

        /**
         * Execute listFinancials request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesListFinancialsResponse> _callback) throws ApiException {
            return listFinancialsAsync(authorization, accountHolderName, bankName, accountNumber, iban, swiftCode, nationalId, passport, nationalInsuranceNumber, taxCode, taxIdentificationNumber, _callback);
        }
    }

    /**
     * 
     * This endpoint returns a list with the **financial** sections of the existing employees.
     * @param authorization A valid bearer token. (required)
     * @return ListFinancialsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public ListFinancialsRequestBuilder listFinancials(String authorization) throws IllegalArgumentException {
        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new ListFinancialsRequestBuilder(authorization);
    }
    private okhttp3.Call listHomesCall(String authorization, String maritalStatus, String spouseFirstName, String spouseLastName, String spouseBirthdate, String spouseGender, String personalEmail, String personalPhone, String personalMobile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employees/homes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maritalStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maritalStatus", maritalStatus));
        }

        if (spouseFirstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("spouseFirstName", spouseFirstName));
        }

        if (spouseLastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("spouseLastName", spouseLastName));
        }

        if (spouseBirthdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("spouseBirthdate", spouseBirthdate));
        }

        if (spouseGender != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("spouseGender", spouseGender));
        }

        if (personalEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("personalEmail", personalEmail));
        }

        if (personalPhone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("personalPhone", personalPhone));
        }

        if (personalMobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("personalMobile", personalMobile));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listHomesValidateBeforeCall(String authorization, String maritalStatus, String spouseFirstName, String spouseLastName, String spouseBirthdate, String spouseGender, String personalEmail, String personalPhone, String personalMobile, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listHomes(Async)");
        }

        return listHomesCall(authorization, maritalStatus, spouseFirstName, spouseLastName, spouseBirthdate, spouseGender, personalEmail, personalPhone, personalMobile, _callback);

    }


    private ApiResponse<EmployeesListHomesResponse> listHomesWithHttpInfo(String authorization, String maritalStatus, String spouseFirstName, String spouseLastName, String spouseBirthdate, String spouseGender, String personalEmail, String personalPhone, String personalMobile) throws ApiException {
        okhttp3.Call localVarCall = listHomesValidateBeforeCall(authorization, maritalStatus, spouseFirstName, spouseLastName, spouseBirthdate, spouseGender, personalEmail, personalPhone, personalMobile, null);
        Type localVarReturnType = new TypeToken<EmployeesListHomesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listHomesAsync(String authorization, String maritalStatus, String spouseFirstName, String spouseLastName, String spouseBirthdate, String spouseGender, String personalEmail, String personalPhone, String personalMobile, final ApiCallback<EmployeesListHomesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listHomesValidateBeforeCall(authorization, maritalStatus, spouseFirstName, spouseLastName, spouseBirthdate, spouseGender, personalEmail, personalPhone, personalMobile, _callback);
        Type localVarReturnType = new TypeToken<EmployeesListHomesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListHomesRequestBuilder {
        private final String authorization;
        private String maritalStatus;
        private String spouseFirstName;
        private String spouseLastName;
        private String spouseBirthdate;
        private String spouseGender;
        private String personalEmail;
        private String personalPhone;
        private String personalMobile;

        private ListHomesRequestBuilder(String authorization) {
            this.authorization = authorization;
        }

        /**
         * Set maritalStatus
         * @param maritalStatus The marital status. Only is valid one of the following values \&quot;Divorced\&quot;, \&quot;Domestic Partnership\&quot;, \&quot;Married\&quot;, \&quot;Separated\&quot;, \&quot;Single\&quot;, \&quot;Widowed\&quot;. (optional)
         * @return ListHomesRequestBuilder
         */
        public ListHomesRequestBuilder maritalStatus(String maritalStatus) {
            this.maritalStatus = maritalStatus;
            return this;
        }
        
        /**
         * Set spouseFirstName
         * @param spouseFirstName The first name of the employee&#39;s spouse. (optional)
         * @return ListHomesRequestBuilder
         */
        public ListHomesRequestBuilder spouseFirstName(String spouseFirstName) {
            this.spouseFirstName = spouseFirstName;
            return this;
        }
        
        /**
         * Set spouseLastName
         * @param spouseLastName The last name of the employee&#39;s spouse. (optional)
         * @return ListHomesRequestBuilder
         */
        public ListHomesRequestBuilder spouseLastName(String spouseLastName) {
            this.spouseLastName = spouseLastName;
            return this;
        }
        
        /**
         * Set spouseBirthdate
         * @param spouseBirthdate The birth date of the employee&#39;s spouse. Format YYYY-MM-DDThh:mm:ss.000Z. (optional)
         * @return ListHomesRequestBuilder
         */
        public ListHomesRequestBuilder spouseBirthdate(String spouseBirthdate) {
            this.spouseBirthdate = spouseBirthdate;
            return this;
        }
        
        /**
         * Set spouseGender
         * @param spouseGender The employee&#39;s spouse gender. Only is valid one of the following values &#39;Male&#39; (male), &#39;Female&#39; (female) or &#39;Other&#39; (other). (optional)
         * @return ListHomesRequestBuilder
         */
        public ListHomesRequestBuilder spouseGender(String spouseGender) {
            this.spouseGender = spouseGender;
            return this;
        }
        
        /**
         * Set personalEmail
         * @param personalEmail The employee personal email. (optional)
         * @return ListHomesRequestBuilder
         */
        public ListHomesRequestBuilder personalEmail(String personalEmail) {
            this.personalEmail = personalEmail;
            return this;
        }
        
        /**
         * Set personalPhone
         * @param personalPhone The employee personal phone. (optional)
         * @return ListHomesRequestBuilder
         */
        public ListHomesRequestBuilder personalPhone(String personalPhone) {
            this.personalPhone = personalPhone;
            return this;
        }
        
        /**
         * Set personalMobile
         * @param personalMobile The employee personal mobile. (optional)
         * @return ListHomesRequestBuilder
         */
        public ListHomesRequestBuilder personalMobile(String personalMobile) {
            this.personalMobile = personalMobile;
            return this;
        }
        
        /**
         * Build call for listHomes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listHomesCall(authorization, maritalStatus, spouseFirstName, spouseLastName, spouseBirthdate, spouseGender, personalEmail, personalPhone, personalMobile, _callback);
        }


        /**
         * Execute listHomes request
         * @return EmployeesListHomesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesListHomesResponse execute() throws ApiException {
            ApiResponse<EmployeesListHomesResponse> localVarResp = listHomesWithHttpInfo(authorization, maritalStatus, spouseFirstName, spouseLastName, spouseBirthdate, spouseGender, personalEmail, personalPhone, personalMobile);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listHomes request with HTTP info returned
         * @return ApiResponse&lt;EmployeesListHomesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesListHomesResponse> executeWithHttpInfo() throws ApiException {
            return listHomesWithHttpInfo(authorization, maritalStatus, spouseFirstName, spouseLastName, spouseBirthdate, spouseGender, personalEmail, personalPhone, personalMobile);
        }

        /**
         * Execute listHomes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesListHomesResponse> _callback) throws ApiException {
            return listHomesAsync(authorization, maritalStatus, spouseFirstName, spouseLastName, spouseBirthdate, spouseGender, personalEmail, personalPhone, personalMobile, _callback);
        }
    }

    /**
     * 
     * This endpoint returns a list with the **home** sections of the existing employees.
     * @param authorization A valid bearer token. (required)
     * @return ListHomesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public ListHomesRequestBuilder listHomes(String authorization) throws IllegalArgumentException {
        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new ListHomesRequestBuilder(authorization);
    }
    private okhttp3.Call listPersonalsCall(String authorization, String firstName, String lastName, String displayName, String gender, String birthdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employees/personals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstName", firstName));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastName", lastName));
        }

        if (displayName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("displayName", displayName));
        }

        if (gender != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gender", gender));
        }

        if (birthdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("birthdate", birthdate));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPersonalsValidateBeforeCall(String authorization, String firstName, String lastName, String displayName, String gender, String birthdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listPersonals(Async)");
        }

        return listPersonalsCall(authorization, firstName, lastName, displayName, gender, birthdate, _callback);

    }


    private ApiResponse<EmployeesListPersonalsResponse> listPersonalsWithHttpInfo(String authorization, String firstName, String lastName, String displayName, String gender, String birthdate) throws ApiException {
        okhttp3.Call localVarCall = listPersonalsValidateBeforeCall(authorization, firstName, lastName, displayName, gender, birthdate, null);
        Type localVarReturnType = new TypeToken<EmployeesListPersonalsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPersonalsAsync(String authorization, String firstName, String lastName, String displayName, String gender, String birthdate, final ApiCallback<EmployeesListPersonalsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPersonalsValidateBeforeCall(authorization, firstName, lastName, displayName, gender, birthdate, _callback);
        Type localVarReturnType = new TypeToken<EmployeesListPersonalsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPersonalsRequestBuilder {
        private final String authorization;
        private String firstName;
        private String lastName;
        private String displayName;
        private String gender;
        private String birthdate;

        private ListPersonalsRequestBuilder(String authorization) {
            this.authorization = authorization;
        }

        /**
         * Set firstName
         * @param firstName The name of the Kenjo employee. This field is required. (optional)
         * @return ListPersonalsRequestBuilder
         */
        public ListPersonalsRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The surname of the Kenjo employee. This field is required. (optional)
         * @return ListPersonalsRequestBuilder
         */
        public ListPersonalsRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set displayName
         * @param displayName The composition of firstName and lastName of the Kenjo employee. (optional)
         * @return ListPersonalsRequestBuilder
         */
        public ListPersonalsRequestBuilder displayName(String displayName) {
            this.displayName = displayName;
            return this;
        }
        
        /**
         * Set gender
         * @param gender The employee gender. Only is valid one of the following values &#39;Male&#39; (male), &#39;Female&#39; (female) or &#39;Other&#39; (other). (optional)
         * @return ListPersonalsRequestBuilder
         */
        public ListPersonalsRequestBuilder gender(String gender) {
            this.gender = gender;
            return this;
        }
        
        /**
         * Set birthdate
         * @param birthdate The employee birth date. Format YYYY-MM-DDThh:00:00.000Z. (optional)
         * @return ListPersonalsRequestBuilder
         */
        public ListPersonalsRequestBuilder birthdate(String birthdate) {
            this.birthdate = birthdate;
            return this;
        }
        
        /**
         * Build call for listPersonals
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPersonalsCall(authorization, firstName, lastName, displayName, gender, birthdate, _callback);
        }


        /**
         * Execute listPersonals request
         * @return EmployeesListPersonalsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesListPersonalsResponse execute() throws ApiException {
            ApiResponse<EmployeesListPersonalsResponse> localVarResp = listPersonalsWithHttpInfo(authorization, firstName, lastName, displayName, gender, birthdate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPersonals request with HTTP info returned
         * @return ApiResponse&lt;EmployeesListPersonalsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesListPersonalsResponse> executeWithHttpInfo() throws ApiException {
            return listPersonalsWithHttpInfo(authorization, firstName, lastName, displayName, gender, birthdate);
        }

        /**
         * Execute listPersonals request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesListPersonalsResponse> _callback) throws ApiException {
            return listPersonalsAsync(authorization, firstName, lastName, displayName, gender, birthdate, _callback);
        }
    }

    /**
     * 
     * This endpoint returns a list with the **personal** sections of the existing employees.
     * @param authorization A valid bearer token. (required)
     * @return ListPersonalsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public ListPersonalsRequestBuilder listPersonals(String authorization) throws IllegalArgumentException {
        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new ListPersonalsRequestBuilder(authorization);
    }
    private okhttp3.Call listWorksCall(String authorization, String companyId, String officeId, String departmentId, String startDate, String jobTitle, String workPhone, String workMobile, Boolean isAssistant, String probationPeriodEnd, String reportsToId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employees/works";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyId", companyId));
        }

        if (officeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("officeId", officeId));
        }

        if (departmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departmentId", departmentId));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (jobTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobTitle", jobTitle));
        }

        if (workPhone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workPhone", workPhone));
        }

        if (workMobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workMobile", workMobile));
        }

        if (isAssistant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAssistant", isAssistant));
        }

        if (probationPeriodEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("probationPeriodEnd", probationPeriodEnd));
        }

        if (reportsToId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reportsToId", reportsToId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWorksValidateBeforeCall(String authorization, String companyId, String officeId, String departmentId, String startDate, String jobTitle, String workPhone, String workMobile, Boolean isAssistant, String probationPeriodEnd, String reportsToId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listWorks(Async)");
        }

        return listWorksCall(authorization, companyId, officeId, departmentId, startDate, jobTitle, workPhone, workMobile, isAssistant, probationPeriodEnd, reportsToId, _callback);

    }


    private ApiResponse<EmployeesListWorksResponse> listWorksWithHttpInfo(String authorization, String companyId, String officeId, String departmentId, String startDate, String jobTitle, String workPhone, String workMobile, Boolean isAssistant, String probationPeriodEnd, String reportsToId) throws ApiException {
        okhttp3.Call localVarCall = listWorksValidateBeforeCall(authorization, companyId, officeId, departmentId, startDate, jobTitle, workPhone, workMobile, isAssistant, probationPeriodEnd, reportsToId, null);
        Type localVarReturnType = new TypeToken<EmployeesListWorksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listWorksAsync(String authorization, String companyId, String officeId, String departmentId, String startDate, String jobTitle, String workPhone, String workMobile, Boolean isAssistant, String probationPeriodEnd, String reportsToId, final ApiCallback<EmployeesListWorksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWorksValidateBeforeCall(authorization, companyId, officeId, departmentId, startDate, jobTitle, workPhone, workMobile, isAssistant, probationPeriodEnd, reportsToId, _callback);
        Type localVarReturnType = new TypeToken<EmployeesListWorksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListWorksRequestBuilder {
        private final String authorization;
        private String companyId;
        private String officeId;
        private String departmentId;
        private String startDate;
        private String jobTitle;
        private String workPhone;
        private String workMobile;
        private Boolean isAssistant;
        private String probationPeriodEnd;
        private String reportsToId;

        private ListWorksRequestBuilder(String authorization) {
            this.authorization = authorization;
        }

        /**
         * Set companyId
         * @param companyId The company id of the Kenjo employee. (optional)
         * @return ListWorksRequestBuilder
         */
        public ListWorksRequestBuilder companyId(String companyId) {
            this.companyId = companyId;
            return this;
        }
        
        /**
         * Set officeId
         * @param officeId The office id of the Kenjo employee. (optional)
         * @return ListWorksRequestBuilder
         */
        public ListWorksRequestBuilder officeId(String officeId) {
            this.officeId = officeId;
            return this;
        }
        
        /**
         * Set departmentId
         * @param departmentId The department id of the Kenjo employee. (optional)
         * @return ListWorksRequestBuilder
         */
        public ListWorksRequestBuilder departmentId(String departmentId) {
            this.departmentId = departmentId;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate The starting date of the Kenjo employee in format YYYY-MM-DDThh:mm:ss. (optional)
         * @return ListWorksRequestBuilder
         */
        public ListWorksRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set jobTitle
         * @param jobTitle The job title of the employee. (optional)
         * @return ListWorksRequestBuilder
         */
        public ListWorksRequestBuilder jobTitle(String jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Set workPhone
         * @param workPhone The work phone of the employee. (optional)
         * @return ListWorksRequestBuilder
         */
        public ListWorksRequestBuilder workPhone(String workPhone) {
            this.workPhone = workPhone;
            return this;
        }
        
        /**
         * Set workMobile
         * @param workMobile The work mobile of the employee. (optional)
         * @return ListWorksRequestBuilder
         */
        public ListWorksRequestBuilder workMobile(String workMobile) {
            this.workMobile = workMobile;
            return this;
        }
        
        /**
         * Set isAssistant
         * @param isAssistant Allow to indicate if the employee has or not the assistant role. (optional)
         * @return ListWorksRequestBuilder
         */
        public ListWorksRequestBuilder isAssistant(Boolean isAssistant) {
            this.isAssistant = isAssistant;
            return this;
        }
        
        /**
         * Set probationPeriodEnd
         * @param probationPeriodEnd The probation period of the employee. Format YYYY-MM-DDThh:mm:ss.000Z. (optional)
         * @return ListWorksRequestBuilder
         */
        public ListWorksRequestBuilder probationPeriodEnd(String probationPeriodEnd) {
            this.probationPeriodEnd = probationPeriodEnd;
            return this;
        }
        
        /**
         * Set reportsToId
         * @param reportsToId The Kenjo employee id of the user to whom the employee reports. The employee id to assign can be an active or inactive user. Trying to assign the own employee id or the id of someone who is already reporting will arise an error. (optional)
         * @return ListWorksRequestBuilder
         */
        public ListWorksRequestBuilder reportsToId(String reportsToId) {
            this.reportsToId = reportsToId;
            return this;
        }
        
        /**
         * Build call for listWorks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listWorksCall(authorization, companyId, officeId, departmentId, startDate, jobTitle, workPhone, workMobile, isAssistant, probationPeriodEnd, reportsToId, _callback);
        }


        /**
         * Execute listWorks request
         * @return EmployeesListWorksResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesListWorksResponse execute() throws ApiException {
            ApiResponse<EmployeesListWorksResponse> localVarResp = listWorksWithHttpInfo(authorization, companyId, officeId, departmentId, startDate, jobTitle, workPhone, workMobile, isAssistant, probationPeriodEnd, reportsToId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listWorks request with HTTP info returned
         * @return ApiResponse&lt;EmployeesListWorksResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesListWorksResponse> executeWithHttpInfo() throws ApiException {
            return listWorksWithHttpInfo(authorization, companyId, officeId, departmentId, startDate, jobTitle, workPhone, workMobile, isAssistant, probationPeriodEnd, reportsToId);
        }

        /**
         * Execute listWorks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesListWorksResponse> _callback) throws ApiException {
            return listWorksAsync(authorization, companyId, officeId, departmentId, startDate, jobTitle, workPhone, workMobile, isAssistant, probationPeriodEnd, reportsToId, _callback);
        }
    }

    /**
     * 
     * This endpoint returns a list with the **work** sections of the existing employees.
     * @param authorization A valid bearer token. (required)
     * @return ListWorksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public ListWorksRequestBuilder listWorks(String authorization) throws IllegalArgumentException {
        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new ListWorksRequestBuilder(authorization);
    }
    private okhttp3.Call updateAddressCall(String employeeId, String authorization, EmployeesUpdateAddressRequest employeesUpdateAddressRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeesUpdateAddressRequest;

        // create path and map variables
        String localVarPath = "/employees/{employeeId}/addresses"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAddressValidateBeforeCall(String employeeId, String authorization, EmployeesUpdateAddressRequest employeesUpdateAddressRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateAddress(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateAddress(Async)");
        }

        // verify the required parameter 'employeesUpdateAddressRequest' is set
        if (employeesUpdateAddressRequest == null) {
            throw new ApiException("Missing the required parameter 'employeesUpdateAddressRequest' when calling updateAddress(Async)");
        }

        return updateAddressCall(employeeId, authorization, employeesUpdateAddressRequest, _callback);

    }


    private ApiResponse<EmployeesUpdateAddressResponse> updateAddressWithHttpInfo(String employeeId, String authorization, EmployeesUpdateAddressRequest employeesUpdateAddressRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAddressValidateBeforeCall(employeeId, authorization, employeesUpdateAddressRequest, null);
        Type localVarReturnType = new TypeToken<EmployeesUpdateAddressResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAddressAsync(String employeeId, String authorization, EmployeesUpdateAddressRequest employeesUpdateAddressRequest, final ApiCallback<EmployeesUpdateAddressResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAddressValidateBeforeCall(employeeId, authorization, employeesUpdateAddressRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeesUpdateAddressResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAddressRequestBuilder {
        private final String employeeId;
        private final String authorization;
        private String street;
        private String postalCode;
        private String city;
        private String country;

        private UpdateAddressRequestBuilder(String employeeId, String authorization) {
            this.employeeId = employeeId;
            this.authorization = authorization;
        }

        /**
         * Set street
         * @param street The name of the street. (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder street(String street) {
            this.street = street;
            return this;
        }
        
        /**
         * Set postalCode
         * @param postalCode The postal code. (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder postalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
        }
        
        /**
         * Set city
         * @param city The city. (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set country
         * @param country The country code in ISO 3166-1 alpha-2. (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Build call for updateAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeesUpdateAddressRequest employeesUpdateAddressRequest = buildBodyParams();
            return updateAddressCall(employeeId, authorization, employeesUpdateAddressRequest, _callback);
        }

        private EmployeesUpdateAddressRequest buildBodyParams() {
            EmployeesUpdateAddressRequest employeesUpdateAddressRequest = new EmployeesUpdateAddressRequest();
            employeesUpdateAddressRequest.street(this.street);
            employeesUpdateAddressRequest.postalCode(this.postalCode);
            employeesUpdateAddressRequest.city(this.city);
            employeesUpdateAddressRequest.country(this.country);
            return employeesUpdateAddressRequest;
        }

        /**
         * Execute updateAddress request
         * @return EmployeesUpdateAddressResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesUpdateAddressResponse execute() throws ApiException {
            EmployeesUpdateAddressRequest employeesUpdateAddressRequest = buildBodyParams();
            ApiResponse<EmployeesUpdateAddressResponse> localVarResp = updateAddressWithHttpInfo(employeeId, authorization, employeesUpdateAddressRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateAddress request with HTTP info returned
         * @return ApiResponse&lt;EmployeesUpdateAddressResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesUpdateAddressResponse> executeWithHttpInfo() throws ApiException {
            EmployeesUpdateAddressRequest employeesUpdateAddressRequest = buildBodyParams();
            return updateAddressWithHttpInfo(employeeId, authorization, employeesUpdateAddressRequest);
        }

        /**
         * Execute updateAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesUpdateAddressResponse> _callback) throws ApiException {
            EmployeesUpdateAddressRequest employeesUpdateAddressRequest = buildBodyParams();
            return updateAddressAsync(employeeId, authorization, employeesUpdateAddressRequest, _callback);
        }
    }

    /**
     * 
     * This endpoint updates the employee **address** section for a given employee id. The operation only updates the fields provided in the body. &lt;br&gt;&lt;br&gt;**Custom fields** information can be provided in this operation. The *API name* of the custom field is required and the data format has to match with the type defined for the custom field in Kenjo. API names start with &#39;c_&#39; and the rest is composed by the trimmed name (spaces are removed). &lt;br&gt;&lt;br&gt; Example: &lt;br&gt; *The custom field &#39;province&#39; belongs to the &#39;address&#39; section*:   &#x60;&#x60;&#x60;   {     ...,     \&quot;country\&quot;: \&quot;ES\&quot;,     \&quot;c_province\&quot;: \&quot;MD\&quot;,     ...   } &#x60;&#x60;&#x60; *&#39;province&#39; is a field type &#39;String&#39;. It means that if a different type of data (number or boolean) is provided then the request will return an error.* 
     * @param employeeId The _id of the employee to update. (required)
     * @param authorization A valid bearer token. (required)
     * @param employeesUpdateAddressRequest  (required)
     * @return UpdateAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAddressRequestBuilder updateAddress(String employeeId, String authorization) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new UpdateAddressRequestBuilder(employeeId, authorization);
    }
    private okhttp3.Call updateEmployeeAccountsCall(String employeeId, String authorization, EmployeesUpdateEmployeeAccountsRequest employeesUpdateEmployeeAccountsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeesUpdateEmployeeAccountsRequest;

        // create path and map variables
        String localVarPath = "/employees/{employeeId}/accounts"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmployeeAccountsValidateBeforeCall(String employeeId, String authorization, EmployeesUpdateEmployeeAccountsRequest employeesUpdateEmployeeAccountsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateEmployeeAccounts(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateEmployeeAccounts(Async)");
        }

        // verify the required parameter 'employeesUpdateEmployeeAccountsRequest' is set
        if (employeesUpdateEmployeeAccountsRequest == null) {
            throw new ApiException("Missing the required parameter 'employeesUpdateEmployeeAccountsRequest' when calling updateEmployeeAccounts(Async)");
        }

        return updateEmployeeAccountsCall(employeeId, authorization, employeesUpdateEmployeeAccountsRequest, _callback);

    }


    private ApiResponse<EmployeesUpdateEmployeeAccountsResponse> updateEmployeeAccountsWithHttpInfo(String employeeId, String authorization, EmployeesUpdateEmployeeAccountsRequest employeesUpdateEmployeeAccountsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateEmployeeAccountsValidateBeforeCall(employeeId, authorization, employeesUpdateEmployeeAccountsRequest, null);
        Type localVarReturnType = new TypeToken<EmployeesUpdateEmployeeAccountsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateEmployeeAccountsAsync(String employeeId, String authorization, EmployeesUpdateEmployeeAccountsRequest employeesUpdateEmployeeAccountsRequest, final ApiCallback<EmployeesUpdateEmployeeAccountsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmployeeAccountsValidateBeforeCall(employeeId, authorization, employeesUpdateEmployeeAccountsRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeesUpdateEmployeeAccountsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateEmployeeAccountsRequestBuilder {
        private final String employeeId;
        private final String authorization;
        private String email;
        private String externalId;
        private String language;

        private UpdateEmployeeAccountsRequestBuilder(String employeeId, String authorization) {
            this.employeeId = employeeId;
            this.authorization = authorization;
        }

        /**
         * Set email
         * @param email The employee email in Kenjo. This is an unique identifier and required. (optional)
         * @return UpdateEmployeeAccountsRequestBuilder
         */
        public UpdateEmployeeAccountsRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set externalId
         * @param externalId The employee external id for integration proposals. This value must be unique. (optional)
         * @return UpdateEmployeeAccountsRequestBuilder
         */
        public UpdateEmployeeAccountsRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set language
         * @param language The employee language. Only is valid one of the following values &#39;en&#39; (english), &#39;es&#39; (spanish) or &#39;de&#39; (german). (optional)
         * @return UpdateEmployeeAccountsRequestBuilder
         */
        public UpdateEmployeeAccountsRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Build call for updateEmployeeAccounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeesUpdateEmployeeAccountsRequest employeesUpdateEmployeeAccountsRequest = buildBodyParams();
            return updateEmployeeAccountsCall(employeeId, authorization, employeesUpdateEmployeeAccountsRequest, _callback);
        }

        private EmployeesUpdateEmployeeAccountsRequest buildBodyParams() {
            EmployeesUpdateEmployeeAccountsRequest employeesUpdateEmployeeAccountsRequest = new EmployeesUpdateEmployeeAccountsRequest();
            employeesUpdateEmployeeAccountsRequest.email(this.email);
            employeesUpdateEmployeeAccountsRequest.externalId(this.externalId);
            employeesUpdateEmployeeAccountsRequest.language(this.language);
            return employeesUpdateEmployeeAccountsRequest;
        }

        /**
         * Execute updateEmployeeAccounts request
         * @return EmployeesUpdateEmployeeAccountsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesUpdateEmployeeAccountsResponse execute() throws ApiException {
            EmployeesUpdateEmployeeAccountsRequest employeesUpdateEmployeeAccountsRequest = buildBodyParams();
            ApiResponse<EmployeesUpdateEmployeeAccountsResponse> localVarResp = updateEmployeeAccountsWithHttpInfo(employeeId, authorization, employeesUpdateEmployeeAccountsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateEmployeeAccounts request with HTTP info returned
         * @return ApiResponse&lt;EmployeesUpdateEmployeeAccountsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesUpdateEmployeeAccountsResponse> executeWithHttpInfo() throws ApiException {
            EmployeesUpdateEmployeeAccountsRequest employeesUpdateEmployeeAccountsRequest = buildBodyParams();
            return updateEmployeeAccountsWithHttpInfo(employeeId, authorization, employeesUpdateEmployeeAccountsRequest);
        }

        /**
         * Execute updateEmployeeAccounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesUpdateEmployeeAccountsResponse> _callback) throws ApiException {
            EmployeesUpdateEmployeeAccountsRequest employeesUpdateEmployeeAccountsRequest = buildBodyParams();
            return updateEmployeeAccountsAsync(employeeId, authorization, employeesUpdateEmployeeAccountsRequest, _callback);
        }
    }

    /**
     * 
     * This endpoint updates the employee **account** section for a given employee id. The operation only updates the fields provided in the body.
     * @param employeeId The _id of the employee to update. (required)
     * @param authorization A valid bearer token. (required)
     * @param employeesUpdateEmployeeAccountsRequest  (required)
     * @return UpdateEmployeeAccountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEmployeeAccountsRequestBuilder updateEmployeeAccounts(String employeeId, String authorization) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new UpdateEmployeeAccountsRequestBuilder(employeeId, authorization);
    }
    private okhttp3.Call updateFinancialsCall(String employeeId, String authorization, EmployeesUpdateFinancialsRequest employeesUpdateFinancialsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeesUpdateFinancialsRequest;

        // create path and map variables
        String localVarPath = "/employees/{employeeId}/financials"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFinancialsValidateBeforeCall(String employeeId, String authorization, EmployeesUpdateFinancialsRequest employeesUpdateFinancialsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateFinancials(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateFinancials(Async)");
        }

        // verify the required parameter 'employeesUpdateFinancialsRequest' is set
        if (employeesUpdateFinancialsRequest == null) {
            throw new ApiException("Missing the required parameter 'employeesUpdateFinancialsRequest' when calling updateFinancials(Async)");
        }

        return updateFinancialsCall(employeeId, authorization, employeesUpdateFinancialsRequest, _callback);

    }


    private ApiResponse<EmployeesUpdateFinancialsResponse> updateFinancialsWithHttpInfo(String employeeId, String authorization, EmployeesUpdateFinancialsRequest employeesUpdateFinancialsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateFinancialsValidateBeforeCall(employeeId, authorization, employeesUpdateFinancialsRequest, null);
        Type localVarReturnType = new TypeToken<EmployeesUpdateFinancialsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateFinancialsAsync(String employeeId, String authorization, EmployeesUpdateFinancialsRequest employeesUpdateFinancialsRequest, final ApiCallback<EmployeesUpdateFinancialsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFinancialsValidateBeforeCall(employeeId, authorization, employeesUpdateFinancialsRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeesUpdateFinancialsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateFinancialsRequestBuilder {
        private final String employeeId;
        private final String authorization;
        private String accountHolderName;
        private String bankName;
        private String accountNumber;
        private String iban;
        private String swiftCode;
        private String nationalId;
        private String passport;
        private String nationalInsuranceNumber;
        private String taxCode;
        private String taxIdentificationNumber;

        private UpdateFinancialsRequestBuilder(String employeeId, String authorization) {
            this.employeeId = employeeId;
            this.authorization = authorization;
        }

        /**
         * Set accountHolderName
         * @param accountHolderName The accounts holder&#39;s name. (optional)
         * @return UpdateFinancialsRequestBuilder
         */
        public UpdateFinancialsRequestBuilder accountHolderName(String accountHolderName) {
            this.accountHolderName = accountHolderName;
            return this;
        }
        
        /**
         * Set bankName
         * @param bankName The bank name. (optional)
         * @return UpdateFinancialsRequestBuilder
         */
        public UpdateFinancialsRequestBuilder bankName(String bankName) {
            this.bankName = bankName;
            return this;
        }
        
        /**
         * Set accountNumber
         * @param accountNumber The account number. (optional)
         * @return UpdateFinancialsRequestBuilder
         */
        public UpdateFinancialsRequestBuilder accountNumber(String accountNumber) {
            this.accountNumber = accountNumber;
            return this;
        }
        
        /**
         * Set iban
         * @param iban The IBAN. (optional)
         * @return UpdateFinancialsRequestBuilder
         */
        public UpdateFinancialsRequestBuilder iban(String iban) {
            this.iban = iban;
            return this;
        }
        
        /**
         * Set swiftCode
         * @param swiftCode The SWIFT code. (optional)
         * @return UpdateFinancialsRequestBuilder
         */
        public UpdateFinancialsRequestBuilder swiftCode(String swiftCode) {
            this.swiftCode = swiftCode;
            return this;
        }
        
        /**
         * Set nationalId
         * @param nationalId The national id document. (optional)
         * @return UpdateFinancialsRequestBuilder
         */
        public UpdateFinancialsRequestBuilder nationalId(String nationalId) {
            this.nationalId = nationalId;
            return this;
        }
        
        /**
         * Set passport
         * @param passport The passport number. (optional)
         * @return UpdateFinancialsRequestBuilder
         */
        public UpdateFinancialsRequestBuilder passport(String passport) {
            this.passport = passport;
            return this;
        }
        
        /**
         * Set nationalInsuranceNumber
         * @param nationalInsuranceNumber The national insurance number (optional)
         * @return UpdateFinancialsRequestBuilder
         */
        public UpdateFinancialsRequestBuilder nationalInsuranceNumber(String nationalInsuranceNumber) {
            this.nationalInsuranceNumber = nationalInsuranceNumber;
            return this;
        }
        
        /**
         * Set taxCode
         * @param taxCode The tax number. (optional)
         * @return UpdateFinancialsRequestBuilder
         */
        public UpdateFinancialsRequestBuilder taxCode(String taxCode) {
            this.taxCode = taxCode;
            return this;
        }
        
        /**
         * Set taxIdentificationNumber
         * @param taxIdentificationNumber The tax identification number. (optional)
         * @return UpdateFinancialsRequestBuilder
         */
        public UpdateFinancialsRequestBuilder taxIdentificationNumber(String taxIdentificationNumber) {
            this.taxIdentificationNumber = taxIdentificationNumber;
            return this;
        }
        
        /**
         * Build call for updateFinancials
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeesUpdateFinancialsRequest employeesUpdateFinancialsRequest = buildBodyParams();
            return updateFinancialsCall(employeeId, authorization, employeesUpdateFinancialsRequest, _callback);
        }

        private EmployeesUpdateFinancialsRequest buildBodyParams() {
            EmployeesUpdateFinancialsRequest employeesUpdateFinancialsRequest = new EmployeesUpdateFinancialsRequest();
            employeesUpdateFinancialsRequest.accountHolderName(this.accountHolderName);
            employeesUpdateFinancialsRequest.bankName(this.bankName);
            employeesUpdateFinancialsRequest.accountNumber(this.accountNumber);
            employeesUpdateFinancialsRequest.iban(this.iban);
            employeesUpdateFinancialsRequest.swiftCode(this.swiftCode);
            employeesUpdateFinancialsRequest.nationalId(this.nationalId);
            employeesUpdateFinancialsRequest.passport(this.passport);
            employeesUpdateFinancialsRequest.nationalInsuranceNumber(this.nationalInsuranceNumber);
            employeesUpdateFinancialsRequest.taxCode(this.taxCode);
            employeesUpdateFinancialsRequest.taxIdentificationNumber(this.taxIdentificationNumber);
            return employeesUpdateFinancialsRequest;
        }

        /**
         * Execute updateFinancials request
         * @return EmployeesUpdateFinancialsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesUpdateFinancialsResponse execute() throws ApiException {
            EmployeesUpdateFinancialsRequest employeesUpdateFinancialsRequest = buildBodyParams();
            ApiResponse<EmployeesUpdateFinancialsResponse> localVarResp = updateFinancialsWithHttpInfo(employeeId, authorization, employeesUpdateFinancialsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateFinancials request with HTTP info returned
         * @return ApiResponse&lt;EmployeesUpdateFinancialsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesUpdateFinancialsResponse> executeWithHttpInfo() throws ApiException {
            EmployeesUpdateFinancialsRequest employeesUpdateFinancialsRequest = buildBodyParams();
            return updateFinancialsWithHttpInfo(employeeId, authorization, employeesUpdateFinancialsRequest);
        }

        /**
         * Execute updateFinancials request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesUpdateFinancialsResponse> _callback) throws ApiException {
            EmployeesUpdateFinancialsRequest employeesUpdateFinancialsRequest = buildBodyParams();
            return updateFinancialsAsync(employeeId, authorization, employeesUpdateFinancialsRequest, _callback);
        }
    }

    /**
     * 
     * This endpoint updates the employee **financial** section for a given employee id. The operation only updates the fields provided in the body. &lt;br&gt;&lt;br&gt;**Custom fields** information can be provided in this operation. The *API name* of the custom field is required and the data format has to match with the type defined for the custom field in Kenjo. API names start with &#39;c_&#39; and the rest is composed by the trimmed name (spaces are removed). &lt;br&gt;&lt;br&gt; Example: &lt;br&gt; *The custom field &#39;special tax&#39; belongs to the &#39;financial&#39; section*:   &#x60;&#x60;&#x60;   {     ...,     \&quot;iban\&quot;: \&quot;ES2345123456789077\&quot;,     \&quot;c_specialtax\&quot;: 1500,     ...   } &#x60;&#x60;&#x60; *&#39;special tax&#39; is a field type &#39;Number&#39;. It means that if a different type of data (string or boolean) is provided then the request will return an error.* 
     * @param employeeId The _id of the employee to update. (required)
     * @param authorization A valid bearer token. (required)
     * @param employeesUpdateFinancialsRequest  (required)
     * @return UpdateFinancialsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFinancialsRequestBuilder updateFinancials(String employeeId, String authorization) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new UpdateFinancialsRequestBuilder(employeeId, authorization);
    }
    private okhttp3.Call updateHomeCall(String employeeId, String authorization, EmployeesUpdateHomeRequest employeesUpdateHomeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeesUpdateHomeRequest;

        // create path and map variables
        String localVarPath = "/employees/{employeeId}/homes"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateHomeValidateBeforeCall(String employeeId, String authorization, EmployeesUpdateHomeRequest employeesUpdateHomeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateHome(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateHome(Async)");
        }

        // verify the required parameter 'employeesUpdateHomeRequest' is set
        if (employeesUpdateHomeRequest == null) {
            throw new ApiException("Missing the required parameter 'employeesUpdateHomeRequest' when calling updateHome(Async)");
        }

        return updateHomeCall(employeeId, authorization, employeesUpdateHomeRequest, _callback);

    }


    private ApiResponse<EmployeesUpdateHomeResponse> updateHomeWithHttpInfo(String employeeId, String authorization, EmployeesUpdateHomeRequest employeesUpdateHomeRequest) throws ApiException {
        okhttp3.Call localVarCall = updateHomeValidateBeforeCall(employeeId, authorization, employeesUpdateHomeRequest, null);
        Type localVarReturnType = new TypeToken<EmployeesUpdateHomeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateHomeAsync(String employeeId, String authorization, EmployeesUpdateHomeRequest employeesUpdateHomeRequest, final ApiCallback<EmployeesUpdateHomeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateHomeValidateBeforeCall(employeeId, authorization, employeesUpdateHomeRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeesUpdateHomeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateHomeRequestBuilder {
        private final String employeeId;
        private final String authorization;
        private String maritalStatus;
        private String spouseFirstName;
        private String spouseLastName;
        private String spouseBirthdate;
        private String spouseGender;
        private String personalEmail;
        private String personalPhone;
        private String personalMobile;

        private UpdateHomeRequestBuilder(String employeeId, String authorization) {
            this.employeeId = employeeId;
            this.authorization = authorization;
        }

        /**
         * Set maritalStatus
         * @param maritalStatus The marital status. Only is valid one of the following values \\\&quot;Divorced\\\&quot;, \\\&quot;Domestic Partnership\\\&quot;, \\\&quot;Married\\\&quot;, \\\&quot;Separated\\\&quot;, \\\&quot;Single\\\&quot;, \\\&quot;Widowed\\\&quot;. (optional)
         * @return UpdateHomeRequestBuilder
         */
        public UpdateHomeRequestBuilder maritalStatus(String maritalStatus) {
            this.maritalStatus = maritalStatus;
            return this;
        }
        
        /**
         * Set spouseFirstName
         * @param spouseFirstName The first name of the employee&#39;s spouse. (optional)
         * @return UpdateHomeRequestBuilder
         */
        public UpdateHomeRequestBuilder spouseFirstName(String spouseFirstName) {
            this.spouseFirstName = spouseFirstName;
            return this;
        }
        
        /**
         * Set spouseLastName
         * @param spouseLastName The last name of the employee&#39;s spouse. (optional)
         * @return UpdateHomeRequestBuilder
         */
        public UpdateHomeRequestBuilder spouseLastName(String spouseLastName) {
            this.spouseLastName = spouseLastName;
            return this;
        }
        
        /**
         * Set spouseBirthdate
         * @param spouseBirthdate The birth date of the employee&#39;s spouse. Format YYYY-MM-DDThh:mm:ss.000Z. (optional)
         * @return UpdateHomeRequestBuilder
         */
        public UpdateHomeRequestBuilder spouseBirthdate(String spouseBirthdate) {
            this.spouseBirthdate = spouseBirthdate;
            return this;
        }
        
        /**
         * Set spouseGender
         * @param spouseGender The employee&#39;s spouse gender. Only is valid one of the following values &#39;Male&#39; (male), &#39;Female&#39; (female) or &#39;Other&#39; (other). (optional)
         * @return UpdateHomeRequestBuilder
         */
        public UpdateHomeRequestBuilder spouseGender(String spouseGender) {
            this.spouseGender = spouseGender;
            return this;
        }
        
        /**
         * Set personalEmail
         * @param personalEmail The employee personal email. (optional)
         * @return UpdateHomeRequestBuilder
         */
        public UpdateHomeRequestBuilder personalEmail(String personalEmail) {
            this.personalEmail = personalEmail;
            return this;
        }
        
        /**
         * Set personalPhone
         * @param personalPhone The employee personal phone. (optional)
         * @return UpdateHomeRequestBuilder
         */
        public UpdateHomeRequestBuilder personalPhone(String personalPhone) {
            this.personalPhone = personalPhone;
            return this;
        }
        
        /**
         * Set personalMobile
         * @param personalMobile The employee personal phone (optional)
         * @return UpdateHomeRequestBuilder
         */
        public UpdateHomeRequestBuilder personalMobile(String personalMobile) {
            this.personalMobile = personalMobile;
            return this;
        }
        
        /**
         * Build call for updateHome
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeesUpdateHomeRequest employeesUpdateHomeRequest = buildBodyParams();
            return updateHomeCall(employeeId, authorization, employeesUpdateHomeRequest, _callback);
        }

        private EmployeesUpdateHomeRequest buildBodyParams() {
            EmployeesUpdateHomeRequest employeesUpdateHomeRequest = new EmployeesUpdateHomeRequest();
            employeesUpdateHomeRequest.maritalStatus(this.maritalStatus);
            employeesUpdateHomeRequest.spouseFirstName(this.spouseFirstName);
            employeesUpdateHomeRequest.spouseLastName(this.spouseLastName);
            employeesUpdateHomeRequest.spouseBirthdate(this.spouseBirthdate);
            employeesUpdateHomeRequest.spouseGender(this.spouseGender);
            employeesUpdateHomeRequest.personalEmail(this.personalEmail);
            employeesUpdateHomeRequest.personalPhone(this.personalPhone);
            employeesUpdateHomeRequest.personalMobile(this.personalMobile);
            return employeesUpdateHomeRequest;
        }

        /**
         * Execute updateHome request
         * @return EmployeesUpdateHomeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesUpdateHomeResponse execute() throws ApiException {
            EmployeesUpdateHomeRequest employeesUpdateHomeRequest = buildBodyParams();
            ApiResponse<EmployeesUpdateHomeResponse> localVarResp = updateHomeWithHttpInfo(employeeId, authorization, employeesUpdateHomeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateHome request with HTTP info returned
         * @return ApiResponse&lt;EmployeesUpdateHomeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesUpdateHomeResponse> executeWithHttpInfo() throws ApiException {
            EmployeesUpdateHomeRequest employeesUpdateHomeRequest = buildBodyParams();
            return updateHomeWithHttpInfo(employeeId, authorization, employeesUpdateHomeRequest);
        }

        /**
         * Execute updateHome request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesUpdateHomeResponse> _callback) throws ApiException {
            EmployeesUpdateHomeRequest employeesUpdateHomeRequest = buildBodyParams();
            return updateHomeAsync(employeeId, authorization, employeesUpdateHomeRequest, _callback);
        }
    }

    /**
     * 
     * This endpoint updates the employee **home** section for a given employee id. The operation only updates the fields provided in the body. &lt;br&gt;&lt;br&gt;**Custom fields** information can be provided in this operation. The *API name* of the custom field is required and the data format has to match with the type defined for the custom field in Kenjo. API names start with &#39;c_&#39; and the rest is composed by the trimmed name (spaces are removed). &lt;br&gt;&lt;br&gt; Example: &lt;br&gt; *The custom field &#39;pet name&#39; belongs to the &#39;home&#39; section*:   &#x60;&#x60;&#x60;   {     ...,     \&quot;maritalStatus\&quot;: \&quot;Divorced\&quot;,     \&quot;c_petname\&quot;: \&quot;Boliche\&quot;,     ...   } &#x60;&#x60;&#x60; *&#39;pet name&#39; is a field type &#39;String&#39;. It means that if a different type of data (number or boolean) is provided then the request will return an error.* 
     * @param employeeId The _id of the employee to update. (required)
     * @param authorization A valid bearer token. (required)
     * @param employeesUpdateHomeRequest  (required)
     * @return UpdateHomeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateHomeRequestBuilder updateHome(String employeeId, String authorization) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new UpdateHomeRequestBuilder(employeeId, authorization);
    }
    private okhttp3.Call updatePersonalsCall(String employeeId, String authorization, EmployeesUpdatePersonalsRequest employeesUpdatePersonalsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeesUpdatePersonalsRequest;

        // create path and map variables
        String localVarPath = "/employees/{employeeId}/personals"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePersonalsValidateBeforeCall(String employeeId, String authorization, EmployeesUpdatePersonalsRequest employeesUpdatePersonalsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updatePersonals(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updatePersonals(Async)");
        }

        // verify the required parameter 'employeesUpdatePersonalsRequest' is set
        if (employeesUpdatePersonalsRequest == null) {
            throw new ApiException("Missing the required parameter 'employeesUpdatePersonalsRequest' when calling updatePersonals(Async)");
        }

        return updatePersonalsCall(employeeId, authorization, employeesUpdatePersonalsRequest, _callback);

    }


    private ApiResponse<EmployeesUpdatePersonalsResponse> updatePersonalsWithHttpInfo(String employeeId, String authorization, EmployeesUpdatePersonalsRequest employeesUpdatePersonalsRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePersonalsValidateBeforeCall(employeeId, authorization, employeesUpdatePersonalsRequest, null);
        Type localVarReturnType = new TypeToken<EmployeesUpdatePersonalsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePersonalsAsync(String employeeId, String authorization, EmployeesUpdatePersonalsRequest employeesUpdatePersonalsRequest, final ApiCallback<EmployeesUpdatePersonalsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePersonalsValidateBeforeCall(employeeId, authorization, employeesUpdatePersonalsRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeesUpdatePersonalsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePersonalsRequestBuilder {
        private final String employeeId;
        private final String authorization;
        private String firstName;
        private String lastName;
        private String displayName;
        private String gender;
        private String birthdate;

        private UpdatePersonalsRequestBuilder(String employeeId, String authorization) {
            this.employeeId = employeeId;
            this.authorization = authorization;
        }

        /**
         * Set firstName
         * @param firstName The name of the Kenjo employee. This field is required. (optional)
         * @return UpdatePersonalsRequestBuilder
         */
        public UpdatePersonalsRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The surname of the Kenjo employee. This field is required. (optional)
         * @return UpdatePersonalsRequestBuilder
         */
        public UpdatePersonalsRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set displayName
         * @param displayName The composition of firstName and lastName of the Kenjo employee. (optional)
         * @return UpdatePersonalsRequestBuilder
         */
        public UpdatePersonalsRequestBuilder displayName(String displayName) {
            this.displayName = displayName;
            return this;
        }
        
        /**
         * Set gender
         * @param gender The gender of the Kenjo employee. Only is valid one of the following values &#39;Male&#39; (male), &#39;Female&#39; (female) or &#39;Other&#39; (other). (optional)
         * @return UpdatePersonalsRequestBuilder
         */
        public UpdatePersonalsRequestBuilder gender(String gender) {
            this.gender = gender;
            return this;
        }
        
        /**
         * Set birthdate
         * @param birthdate The employee birth date. Format YYYY-MM-DDThh:mm:ss.000Z. (optional)
         * @return UpdatePersonalsRequestBuilder
         */
        public UpdatePersonalsRequestBuilder birthdate(String birthdate) {
            this.birthdate = birthdate;
            return this;
        }
        
        /**
         * Build call for updatePersonals
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeesUpdatePersonalsRequest employeesUpdatePersonalsRequest = buildBodyParams();
            return updatePersonalsCall(employeeId, authorization, employeesUpdatePersonalsRequest, _callback);
        }

        private EmployeesUpdatePersonalsRequest buildBodyParams() {
            EmployeesUpdatePersonalsRequest employeesUpdatePersonalsRequest = new EmployeesUpdatePersonalsRequest();
            employeesUpdatePersonalsRequest.firstName(this.firstName);
            employeesUpdatePersonalsRequest.lastName(this.lastName);
            employeesUpdatePersonalsRequest.displayName(this.displayName);
            employeesUpdatePersonalsRequest.gender(this.gender);
            employeesUpdatePersonalsRequest.birthdate(this.birthdate);
            return employeesUpdatePersonalsRequest;
        }

        /**
         * Execute updatePersonals request
         * @return EmployeesUpdatePersonalsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesUpdatePersonalsResponse execute() throws ApiException {
            EmployeesUpdatePersonalsRequest employeesUpdatePersonalsRequest = buildBodyParams();
            ApiResponse<EmployeesUpdatePersonalsResponse> localVarResp = updatePersonalsWithHttpInfo(employeeId, authorization, employeesUpdatePersonalsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePersonals request with HTTP info returned
         * @return ApiResponse&lt;EmployeesUpdatePersonalsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesUpdatePersonalsResponse> executeWithHttpInfo() throws ApiException {
            EmployeesUpdatePersonalsRequest employeesUpdatePersonalsRequest = buildBodyParams();
            return updatePersonalsWithHttpInfo(employeeId, authorization, employeesUpdatePersonalsRequest);
        }

        /**
         * Execute updatePersonals request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesUpdatePersonalsResponse> _callback) throws ApiException {
            EmployeesUpdatePersonalsRequest employeesUpdatePersonalsRequest = buildBodyParams();
            return updatePersonalsAsync(employeeId, authorization, employeesUpdatePersonalsRequest, _callback);
        }
    }

    /**
     * 
     * This endpoint updates the employee **personal** section for a given employee id. The operation only updates the fields provided in the body. &lt;br&gt;&lt;br&gt;**Custom fields** information can be provided in this operation. The *API name* of the custom field is required and the data format has to match with the type defined for the custom field in Kenjo. API names start with &#39;c_&#39; and the rest is composed by the trimmed name (spaces are removed). &lt;br&gt;&lt;br&gt; Example: &lt;br&gt; *The custom field &#39;category&#39; belongs to the &#39;personal&#39; section*:   &#x60;&#x60;&#x60;   {     ...,     \&quot;lastName\&quot;: \&quot;Nadie\&quot;,     \&quot;c_category\&quot;: \&quot;Good\&quot;,     ...   } &#x60;&#x60;&#x60; *&#39;category&#39; is a field type &#39;List&#39; (Strings list) with the possible values: \&quot;Good\&quot; and \&quot;Bad\&quot;. It means that if a different value or type is provided then the request will return an error.* 
     * @param employeeId The _id of the employee to update. (required)
     * @param authorization A valid bearer token. (required)
     * @param employeesUpdatePersonalsRequest  (required)
     * @return UpdatePersonalsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePersonalsRequestBuilder updatePersonals(String employeeId, String authorization) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new UpdatePersonalsRequestBuilder(employeeId, authorization);
    }
    private okhttp3.Call updateWorkScheduleCall(String employeeId, String authorization, EmployeesUpdateWorkScheduleRequest employeesUpdateWorkScheduleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeesUpdateWorkScheduleRequest;

        // create path and map variables
        String localVarPath = "/employees/{employeeId}/work-schedules"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWorkScheduleValidateBeforeCall(String employeeId, String authorization, EmployeesUpdateWorkScheduleRequest employeesUpdateWorkScheduleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateWorkSchedule(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateWorkSchedule(Async)");
        }

        // verify the required parameter 'employeesUpdateWorkScheduleRequest' is set
        if (employeesUpdateWorkScheduleRequest == null) {
            throw new ApiException("Missing the required parameter 'employeesUpdateWorkScheduleRequest' when calling updateWorkSchedule(Async)");
        }

        return updateWorkScheduleCall(employeeId, authorization, employeesUpdateWorkScheduleRequest, _callback);

    }


    private ApiResponse<EmployeesUpdateWorkScheduleResponse> updateWorkScheduleWithHttpInfo(String employeeId, String authorization, EmployeesUpdateWorkScheduleRequest employeesUpdateWorkScheduleRequest) throws ApiException {
        okhttp3.Call localVarCall = updateWorkScheduleValidateBeforeCall(employeeId, authorization, employeesUpdateWorkScheduleRequest, null);
        Type localVarReturnType = new TypeToken<EmployeesUpdateWorkScheduleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateWorkScheduleAsync(String employeeId, String authorization, EmployeesUpdateWorkScheduleRequest employeesUpdateWorkScheduleRequest, final ApiCallback<EmployeesUpdateWorkScheduleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWorkScheduleValidateBeforeCall(employeeId, authorization, employeesUpdateWorkScheduleRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeesUpdateWorkScheduleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateWorkScheduleRequestBuilder {
        private final String employeeId;
        private final String authorization;
        private Boolean mondayWorkingDay;
        private Boolean tuesdayWorkingDay;
        private Boolean wednesdayWorkingDay;
        private Boolean thursdayWorkingDay;
        private Boolean fridayWorkingDay;
        private Boolean saturdayWorkingDay;
        private Boolean sundayWorkingDay;

        private UpdateWorkScheduleRequestBuilder(String employeeId, String authorization) {
            this.employeeId = employeeId;
            this.authorization = authorization;
        }

        /**
         * Set mondayWorkingDay
         * @param mondayWorkingDay Allow to indicate if mondays are working days for the employee. (optional)
         * @return UpdateWorkScheduleRequestBuilder
         */
        public UpdateWorkScheduleRequestBuilder mondayWorkingDay(Boolean mondayWorkingDay) {
            this.mondayWorkingDay = mondayWorkingDay;
            return this;
        }
        
        /**
         * Set tuesdayWorkingDay
         * @param tuesdayWorkingDay Allow to indicate if tuesdays are working days for the employee. (optional)
         * @return UpdateWorkScheduleRequestBuilder
         */
        public UpdateWorkScheduleRequestBuilder tuesdayWorkingDay(Boolean tuesdayWorkingDay) {
            this.tuesdayWorkingDay = tuesdayWorkingDay;
            return this;
        }
        
        /**
         * Set wednesdayWorkingDay
         * @param wednesdayWorkingDay Allow to indicate if wednesdays are working days for the employee. (optional)
         * @return UpdateWorkScheduleRequestBuilder
         */
        public UpdateWorkScheduleRequestBuilder wednesdayWorkingDay(Boolean wednesdayWorkingDay) {
            this.wednesdayWorkingDay = wednesdayWorkingDay;
            return this;
        }
        
        /**
         * Set thursdayWorkingDay
         * @param thursdayWorkingDay Allow to indicate if thursdays are working days for the employee. (optional)
         * @return UpdateWorkScheduleRequestBuilder
         */
        public UpdateWorkScheduleRequestBuilder thursdayWorkingDay(Boolean thursdayWorkingDay) {
            this.thursdayWorkingDay = thursdayWorkingDay;
            return this;
        }
        
        /**
         * Set fridayWorkingDay
         * @param fridayWorkingDay Allow to indicate if fridays are working days for the employee. (optional)
         * @return UpdateWorkScheduleRequestBuilder
         */
        public UpdateWorkScheduleRequestBuilder fridayWorkingDay(Boolean fridayWorkingDay) {
            this.fridayWorkingDay = fridayWorkingDay;
            return this;
        }
        
        /**
         * Set saturdayWorkingDay
         * @param saturdayWorkingDay Allow to indicate if saturdays are working days for the employee. (optional)
         * @return UpdateWorkScheduleRequestBuilder
         */
        public UpdateWorkScheduleRequestBuilder saturdayWorkingDay(Boolean saturdayWorkingDay) {
            this.saturdayWorkingDay = saturdayWorkingDay;
            return this;
        }
        
        /**
         * Set sundayWorkingDay
         * @param sundayWorkingDay Allow to indicate if sundays are working days for the employee. (optional)
         * @return UpdateWorkScheduleRequestBuilder
         */
        public UpdateWorkScheduleRequestBuilder sundayWorkingDay(Boolean sundayWorkingDay) {
            this.sundayWorkingDay = sundayWorkingDay;
            return this;
        }
        
        /**
         * Build call for updateWorkSchedule
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeesUpdateWorkScheduleRequest employeesUpdateWorkScheduleRequest = buildBodyParams();
            return updateWorkScheduleCall(employeeId, authorization, employeesUpdateWorkScheduleRequest, _callback);
        }

        private EmployeesUpdateWorkScheduleRequest buildBodyParams() {
            EmployeesUpdateWorkScheduleRequest employeesUpdateWorkScheduleRequest = new EmployeesUpdateWorkScheduleRequest();
            employeesUpdateWorkScheduleRequest.mondayWorkingDay(this.mondayWorkingDay);
            employeesUpdateWorkScheduleRequest.tuesdayWorkingDay(this.tuesdayWorkingDay);
            employeesUpdateWorkScheduleRequest.wednesdayWorkingDay(this.wednesdayWorkingDay);
            employeesUpdateWorkScheduleRequest.thursdayWorkingDay(this.thursdayWorkingDay);
            employeesUpdateWorkScheduleRequest.fridayWorkingDay(this.fridayWorkingDay);
            employeesUpdateWorkScheduleRequest.saturdayWorkingDay(this.saturdayWorkingDay);
            employeesUpdateWorkScheduleRequest.sundayWorkingDay(this.sundayWorkingDay);
            return employeesUpdateWorkScheduleRequest;
        }

        /**
         * Execute updateWorkSchedule request
         * @return EmployeesUpdateWorkScheduleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesUpdateWorkScheduleResponse execute() throws ApiException {
            EmployeesUpdateWorkScheduleRequest employeesUpdateWorkScheduleRequest = buildBodyParams();
            ApiResponse<EmployeesUpdateWorkScheduleResponse> localVarResp = updateWorkScheduleWithHttpInfo(employeeId, authorization, employeesUpdateWorkScheduleRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateWorkSchedule request with HTTP info returned
         * @return ApiResponse&lt;EmployeesUpdateWorkScheduleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesUpdateWorkScheduleResponse> executeWithHttpInfo() throws ApiException {
            EmployeesUpdateWorkScheduleRequest employeesUpdateWorkScheduleRequest = buildBodyParams();
            return updateWorkScheduleWithHttpInfo(employeeId, authorization, employeesUpdateWorkScheduleRequest);
        }

        /**
         * Execute updateWorkSchedule request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesUpdateWorkScheduleResponse> _callback) throws ApiException {
            EmployeesUpdateWorkScheduleRequest employeesUpdateWorkScheduleRequest = buildBodyParams();
            return updateWorkScheduleAsync(employeeId, authorization, employeesUpdateWorkScheduleRequest, _callback);
        }
    }

    /**
     * 
     * This endpoint updates the employee **work schedule** section for a given employee id. The operation only updates the fields provided in the body.
     * @param employeeId The _id of the employee to update. (required)
     * @param authorization A valid bearer token. (required)
     * @param employeesUpdateWorkScheduleRequest  (required)
     * @return UpdateWorkScheduleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateWorkScheduleRequestBuilder updateWorkSchedule(String employeeId, String authorization) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new UpdateWorkScheduleRequestBuilder(employeeId, authorization);
    }
    private okhttp3.Call updateWorksCall(String employeeId, String authorization, EmployeesUpdateWorksRequest employeesUpdateWorksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeesUpdateWorksRequest;

        // create path and map variables
        String localVarPath = "/employees/{employeeId}/works"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWorksValidateBeforeCall(String employeeId, String authorization, EmployeesUpdateWorksRequest employeesUpdateWorksRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateWorks(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateWorks(Async)");
        }

        // verify the required parameter 'employeesUpdateWorksRequest' is set
        if (employeesUpdateWorksRequest == null) {
            throw new ApiException("Missing the required parameter 'employeesUpdateWorksRequest' when calling updateWorks(Async)");
        }

        return updateWorksCall(employeeId, authorization, employeesUpdateWorksRequest, _callback);

    }


    private ApiResponse<EmployeesUpdateWorksResponse> updateWorksWithHttpInfo(String employeeId, String authorization, EmployeesUpdateWorksRequest employeesUpdateWorksRequest) throws ApiException {
        okhttp3.Call localVarCall = updateWorksValidateBeforeCall(employeeId, authorization, employeesUpdateWorksRequest, null);
        Type localVarReturnType = new TypeToken<EmployeesUpdateWorksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateWorksAsync(String employeeId, String authorization, EmployeesUpdateWorksRequest employeesUpdateWorksRequest, final ApiCallback<EmployeesUpdateWorksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWorksValidateBeforeCall(employeeId, authorization, employeesUpdateWorksRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeesUpdateWorksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateWorksRequestBuilder {
        private final String employeeId;
        private final String authorization;
        private String companyId;
        private String officeId;
        private String departmentId;
        private String startDate;
        private String jobTitle;
        private String workPhone;
        private String workMobile;
        private Boolean isAssistant;
        private String probationPeriodEnd;
        private String reportsToId;

        private UpdateWorksRequestBuilder(String employeeId, String authorization) {
            this.employeeId = employeeId;
            this.authorization = authorization;
        }

        /**
         * Set companyId
         * @param companyId The company id of the Kenjo employee. (optional)
         * @return UpdateWorksRequestBuilder
         */
        public UpdateWorksRequestBuilder companyId(String companyId) {
            this.companyId = companyId;
            return this;
        }
        
        /**
         * Set officeId
         * @param officeId The office id of the Kenjo employee. (optional)
         * @return UpdateWorksRequestBuilder
         */
        public UpdateWorksRequestBuilder officeId(String officeId) {
            this.officeId = officeId;
            return this;
        }
        
        /**
         * Set departmentId
         * @param departmentId The department id of the Kenjo employee. (optional)
         * @return UpdateWorksRequestBuilder
         */
        public UpdateWorksRequestBuilder departmentId(String departmentId) {
            this.departmentId = departmentId;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate The starting date of the Kenjo employee in format YYYY-MM-DDThh:mm:ss. (optional)
         * @return UpdateWorksRequestBuilder
         */
        public UpdateWorksRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set jobTitle
         * @param jobTitle The job title of the employee. (optional)
         * @return UpdateWorksRequestBuilder
         */
        public UpdateWorksRequestBuilder jobTitle(String jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Set workPhone
         * @param workPhone The work phone of the employee. (optional)
         * @return UpdateWorksRequestBuilder
         */
        public UpdateWorksRequestBuilder workPhone(String workPhone) {
            this.workPhone = workPhone;
            return this;
        }
        
        /**
         * Set workMobile
         * @param workMobile The work mobile of the employee. (optional)
         * @return UpdateWorksRequestBuilder
         */
        public UpdateWorksRequestBuilder workMobile(String workMobile) {
            this.workMobile = workMobile;
            return this;
        }
        
        /**
         * Set isAssistant
         * @param isAssistant Allow to indicate if the employee has or not the assistant role. (optional)
         * @return UpdateWorksRequestBuilder
         */
        public UpdateWorksRequestBuilder isAssistant(Boolean isAssistant) {
            this.isAssistant = isAssistant;
            return this;
        }
        
        /**
         * Set probationPeriodEnd
         * @param probationPeriodEnd The probation period of the employee. Format YYYY-MM-DDThh:mm:ss.000Z. (optional)
         * @return UpdateWorksRequestBuilder
         */
        public UpdateWorksRequestBuilder probationPeriodEnd(String probationPeriodEnd) {
            this.probationPeriodEnd = probationPeriodEnd;
            return this;
        }
        
        /**
         * Set reportsToId
         * @param reportsToId The Kenjo employee id of the user to whom the employee reports. The employee id to assign can be an active or inactive user. Trying to assign the own employee id or the id of someone who is already reporting will arise an error. (optional)
         * @return UpdateWorksRequestBuilder
         */
        public UpdateWorksRequestBuilder reportsToId(String reportsToId) {
            this.reportsToId = reportsToId;
            return this;
        }
        
        /**
         * Build call for updateWorks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeesUpdateWorksRequest employeesUpdateWorksRequest = buildBodyParams();
            return updateWorksCall(employeeId, authorization, employeesUpdateWorksRequest, _callback);
        }

        private EmployeesUpdateWorksRequest buildBodyParams() {
            EmployeesUpdateWorksRequest employeesUpdateWorksRequest = new EmployeesUpdateWorksRequest();
            employeesUpdateWorksRequest.companyId(this.companyId);
            employeesUpdateWorksRequest.officeId(this.officeId);
            employeesUpdateWorksRequest.departmentId(this.departmentId);
            employeesUpdateWorksRequest.startDate(this.startDate);
            employeesUpdateWorksRequest.jobTitle(this.jobTitle);
            employeesUpdateWorksRequest.workPhone(this.workPhone);
            employeesUpdateWorksRequest.workMobile(this.workMobile);
            employeesUpdateWorksRequest.isAssistant(this.isAssistant);
            employeesUpdateWorksRequest.probationPeriodEnd(this.probationPeriodEnd);
            employeesUpdateWorksRequest.reportsToId(this.reportsToId);
            return employeesUpdateWorksRequest;
        }

        /**
         * Execute updateWorks request
         * @return EmployeesUpdateWorksResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesUpdateWorksResponse execute() throws ApiException {
            EmployeesUpdateWorksRequest employeesUpdateWorksRequest = buildBodyParams();
            ApiResponse<EmployeesUpdateWorksResponse> localVarResp = updateWorksWithHttpInfo(employeeId, authorization, employeesUpdateWorksRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateWorks request with HTTP info returned
         * @return ApiResponse&lt;EmployeesUpdateWorksResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesUpdateWorksResponse> executeWithHttpInfo() throws ApiException {
            EmployeesUpdateWorksRequest employeesUpdateWorksRequest = buildBodyParams();
            return updateWorksWithHttpInfo(employeeId, authorization, employeesUpdateWorksRequest);
        }

        /**
         * Execute updateWorks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesUpdateWorksResponse> _callback) throws ApiException {
            EmployeesUpdateWorksRequest employeesUpdateWorksRequest = buildBodyParams();
            return updateWorksAsync(employeeId, authorization, employeesUpdateWorksRequest, _callback);
        }
    }

    /**
     * 
     * This endpoint updates the employee **work** section for a given employee id. The operation only updates the fields provided in the body. &lt;br&gt;&lt;br&gt;**Custom fields** information can be provided in this operation. The *API name* of the custom field is required and the data format has to match with the type defined for the custom field in Kenjo. API names start with &#39;c_&#39; and the rest is composed by the trimmed name (spaces are removed). &lt;br&gt;&lt;br&gt; Example: &lt;br&gt; *The custom field &#39;activity type&#39; belongs to the &#39;personal&#39; section*:   &#x60;&#x60;&#x60;   {     ...,     \&quot;companyId\&quot;: \&quot;61d874aef37c05cfba4f1b38\&quot;,     \&quot;c_activityType\&quot;: \&quot;1\&quot;,     ...   } &#x60;&#x60;&#x60; *&#39;activity Type&#39; is a field type &#39;List&#39; (Strings list) with the possible values: \&quot;1\&quot; and \&quot;2\&quot;. It means that if a different value or type is provided then the request will return an error.* 
     * @param employeeId The _id of the employee to update. (required)
     * @param authorization A valid bearer token. (required)
     * @param employeesUpdateWorksRequest  (required)
     * @return UpdateWorksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED. The Authorization header is incorrect, not provided or the token expired. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateWorksRequestBuilder updateWorks(String employeeId, String authorization) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new UpdateWorksRequestBuilder(employeeId, authorization);
    }
}
