/*
 * Kenjo API
 * Before starting to use the Kenjo API, you have to request the API activation for a sandbox or production environment to the Kenjo Customer Success team. After that, an admin user has to go to *Settings > Integrations > API keys*, to generate the **API Key**. Follow the steps described in the **Autentication section** of this document. <br>The API key is needed to request the bearer token. Each endpoint callout requires a valid bearer token in the Authorization header. Once the token is retrieved, it will be useful during the time limit indicated by the 'expiration date'.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AttendanceGetByIdResponseBreaksInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AttendanceGetByIdResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AttendanceGetByIdResponse {
  public static final String SERIALIZED_NAME_ID = "_id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_BREAKS = "breaks";
  @SerializedName(SERIALIZED_NAME_BREAKS)
  private List<AttendanceGetByIdResponseBreaksInner> breaks = null;

  public static final String SERIALIZED_NAME_BREAK_TIME = "breakTime";
  @SerializedName(SERIALIZED_NAME_BREAK_TIME)
  private Double breakTime;

  public static final String SERIALIZED_NAME_ATTENDANCE_CATEGORY_ID = "attendanceCategoryId";
  @SerializedName(SERIALIZED_NAME_ATTENDANCE_CATEGORY_ID)
  private String attendanceCategoryId;

  public static final String SERIALIZED_NAME_ATTENDANCE_SUB_CATEGORY_ID = "attendanceSubCategoryId";
  @SerializedName(SERIALIZED_NAME_ATTENDANCE_SUB_CATEGORY_ID)
  private String attendanceSubCategoryId;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public AttendanceGetByIdResponse() {
  }

  public AttendanceGetByIdResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The _id of the requested attendance entry.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "60a2db290da29e126a18789a", value = "The _id of the requested attendance entry.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public AttendanceGetByIdResponse userId(String userId) {
    
    
    
    
    this.userId = userId;
    return this;
  }

   /**
   * The id of the employee associated to the requested attendance entry.
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "60a2db290da29e126a18789a", value = "The id of the employee associated to the requested attendance entry.")

  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    
    
    
    this.userId = userId;
  }


  public AttendanceGetByIdResponse email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * The email of the employee associated to the requested attendance entry.
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "john@acme.io", value = "The email of the employee associated to the requested attendance entry.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public AttendanceGetByIdResponse externalId(String externalId) {
    
    
    
    
    this.externalId = externalId;
    return this;
  }

   /**
   * The external Id of the employee associated to the requested attendance entry.
   * @return externalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "000034", value = "The external Id of the employee associated to the requested attendance entry.")

  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    
    
    
    this.externalId = externalId;
  }


  public AttendanceGetByIdResponse startTime(String startTime) {
    
    
    
    
    this.startTime = startTime;
    return this;
  }

   /**
   * The start date time of the requested attendance entry.
   * @return startTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-07-01T10:00:00.000Z", value = "The start date time of the requested attendance entry.")

  public String getStartTime() {
    return startTime;
  }


  public void setStartTime(String startTime) {
    
    
    
    this.startTime = startTime;
  }


  public AttendanceGetByIdResponse endTime(String endTime) {
    
    
    
    
    this.endTime = endTime;
    return this;
  }

   /**
   * The end date time of the requested attendance entry.
   * @return endTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-07-01T13:00:00.000Z", value = "The end date time of the requested attendance entry.")

  public String getEndTime() {
    return endTime;
  }


  public void setEndTime(String endTime) {
    
    
    
    this.endTime = endTime;
  }


  public AttendanceGetByIdResponse breaks(List<AttendanceGetByIdResponseBreaksInner> breaks) {
    
    
    
    
    this.breaks = breaks;
    return this;
  }

  public AttendanceGetByIdResponse addBreaksItem(AttendanceGetByIdResponseBreaksInner breaksItem) {
    if (this.breaks == null) {
      this.breaks = new ArrayList<>();
    }
    this.breaks.add(breaksItem);
    return this;
  }

   /**
   * Array that contains the breaks in detail.
   * @return breaks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Array that contains the breaks in detail.")

  public List<AttendanceGetByIdResponseBreaksInner> getBreaks() {
    return breaks;
  }


  public void setBreaks(List<AttendanceGetByIdResponseBreaksInner> breaks) {
    
    
    
    this.breaks = breaks;
  }


  public AttendanceGetByIdResponse breakTime(Double breakTime) {
    
    
    
    
    this.breakTime = breakTime;
    return this;
  }

  public AttendanceGetByIdResponse breakTime(Integer breakTime) {
    
    
    
    
    this.breakTime = breakTime.doubleValue();
    return this;
  }

   /**
   * Number of minutes of break time. If there is no &#39;breaktime&#39; this field will not be in the response. This value is the sum of the total time of breaks.
   * @return breakTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "30", value = "Number of minutes of break time. If there is no 'breaktime' this field will not be in the response. This value is the sum of the total time of breaks.")

  public Double getBreakTime() {
    return breakTime;
  }


  public void setBreakTime(Double breakTime) {
    
    
    
    this.breakTime = breakTime;
  }


  public AttendanceGetByIdResponse attendanceCategoryId(String attendanceCategoryId) {
    
    
    
    
    this.attendanceCategoryId = attendanceCategoryId;
    return this;
  }

   /**
   * The Kenjo _id of the attendance category.
   * @return attendanceCategoryId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "70a2db290da29e126a18789a", value = "The Kenjo _id of the attendance category.")

  public String getAttendanceCategoryId() {
    return attendanceCategoryId;
  }


  public void setAttendanceCategoryId(String attendanceCategoryId) {
    
    
    
    this.attendanceCategoryId = attendanceCategoryId;
  }


  public AttendanceGetByIdResponse attendanceSubCategoryId(String attendanceSubCategoryId) {
    
    
    
    
    this.attendanceSubCategoryId = attendanceSubCategoryId;
    return this;
  }

   /**
   * The Kenjo _id of the attendance sub category.
   * @return attendanceSubCategoryId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "70a2db290da29e126a18789b", value = "The Kenjo _id of the attendance sub category.")

  public String getAttendanceSubCategoryId() {
    return attendanceSubCategoryId;
  }


  public void setAttendanceSubCategoryId(String attendanceSubCategoryId) {
    
    
    
    this.attendanceSubCategoryId = attendanceSubCategoryId;
  }


  public AttendanceGetByIdResponse comment(String comment) {
    
    
    
    
    this.comment = comment;
    return this;
  }

   /**
   * Optional text to describe an attendance record (pair of startTime and endTime). The maximum number of characters is 150.
   * @return comment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Morning working attendance tracking.", value = "Optional text to describe an attendance record (pair of startTime and endTime). The maximum number of characters is 150.")

  public String getComment() {
    return comment;
  }


  public void setComment(String comment) {
    
    
    
    this.comment = comment;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AttendanceGetByIdResponse instance itself
   */
  public AttendanceGetByIdResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttendanceGetByIdResponse attendanceGetByIdResponse = (AttendanceGetByIdResponse) o;
    return Objects.equals(this.id, attendanceGetByIdResponse.id) &&
        Objects.equals(this.userId, attendanceGetByIdResponse.userId) &&
        Objects.equals(this.email, attendanceGetByIdResponse.email) &&
        Objects.equals(this.externalId, attendanceGetByIdResponse.externalId) &&
        Objects.equals(this.startTime, attendanceGetByIdResponse.startTime) &&
        Objects.equals(this.endTime, attendanceGetByIdResponse.endTime) &&
        Objects.equals(this.breaks, attendanceGetByIdResponse.breaks) &&
        Objects.equals(this.breakTime, attendanceGetByIdResponse.breakTime) &&
        Objects.equals(this.attendanceCategoryId, attendanceGetByIdResponse.attendanceCategoryId) &&
        Objects.equals(this.attendanceSubCategoryId, attendanceGetByIdResponse.attendanceSubCategoryId) &&
        Objects.equals(this.comment, attendanceGetByIdResponse.comment)&&
        Objects.equals(this.additionalProperties, attendanceGetByIdResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, email, externalId, startTime, endTime, breaks, breakTime, attendanceCategoryId, attendanceSubCategoryId, comment, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttendanceGetByIdResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    breaks: ").append(toIndentedString(breaks)).append("\n");
    sb.append("    breakTime: ").append(toIndentedString(breakTime)).append("\n");
    sb.append("    attendanceCategoryId: ").append(toIndentedString(attendanceCategoryId)).append("\n");
    sb.append("    attendanceSubCategoryId: ").append(toIndentedString(attendanceSubCategoryId)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_id");
    openapiFields.add("userId");
    openapiFields.add("email");
    openapiFields.add("externalId");
    openapiFields.add("startTime");
    openapiFields.add("endTime");
    openapiFields.add("breaks");
    openapiFields.add("breakTime");
    openapiFields.add("attendanceCategoryId");
    openapiFields.add("attendanceSubCategoryId");
    openapiFields.add("comment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AttendanceGetByIdResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AttendanceGetByIdResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttendanceGetByIdResponse is not found in the empty JSON string", AttendanceGetByIdResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("_id") != null && !jsonObj.get("_id").isJsonNull()) && !jsonObj.get("_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_id").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if (jsonObj.get("breaks") != null && !jsonObj.get("breaks").isJsonNull()) {
        JsonArray jsonArraybreaks = jsonObj.getAsJsonArray("breaks");
        if (jsonArraybreaks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("breaks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `breaks` to be an array in the JSON string but got `%s`", jsonObj.get("breaks").toString()));
          }

          // validate the optional field `breaks` (array)
          for (int i = 0; i < jsonArraybreaks.size(); i++) {
            AttendanceGetByIdResponseBreaksInner.validateJsonObject(jsonArraybreaks.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("attendanceCategoryId") != null && !jsonObj.get("attendanceCategoryId").isJsonNull()) && !jsonObj.get("attendanceCategoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attendanceCategoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attendanceCategoryId").toString()));
      }
      if ((jsonObj.get("attendanceSubCategoryId") != null && !jsonObj.get("attendanceSubCategoryId").isJsonNull()) && !jsonObj.get("attendanceSubCategoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attendanceSubCategoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attendanceSubCategoryId").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttendanceGetByIdResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttendanceGetByIdResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttendanceGetByIdResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttendanceGetByIdResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AttendanceGetByIdResponse>() {
           @Override
           public void write(JsonWriter out, AttendanceGetByIdResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AttendanceGetByIdResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AttendanceGetByIdResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AttendanceGetByIdResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AttendanceGetByIdResponse
  * @throws IOException if the JSON string is invalid with respect to AttendanceGetByIdResponse
  */
  public static AttendanceGetByIdResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttendanceGetByIdResponse.class);
  }

 /**
  * Convert an instance of AttendanceGetByIdResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

