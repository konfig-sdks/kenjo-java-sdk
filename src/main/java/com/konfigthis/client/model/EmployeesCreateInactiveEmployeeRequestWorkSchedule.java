/*
 * Kenjo API
 * Before starting to use the Kenjo API, you have to request the API activation for a sandbox or production environment to the Kenjo Customer Success team. After that, an admin user has to go to *Settings > Integrations > API keys*, to generate the **API Key**. Follow the steps described in the **Autentication section** of this document. <br>The API key is needed to request the bearer token. Each endpoint callout requires a valid bearer token in the Authorization header. Once the token is retrieved, it will be useful during the time limit indicated by the 'expiration date'.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmployeesCreateInactiveEmployeeRequestWorkSchedule
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeesCreateInactiveEmployeeRequestWorkSchedule {
  public static final String SERIALIZED_NAME_MONDAY_WORKING_DAY = "mondayWorkingDay";
  @SerializedName(SERIALIZED_NAME_MONDAY_WORKING_DAY)
  private Boolean mondayWorkingDay;

  public static final String SERIALIZED_NAME_TUESDAY_WORKING_DAY = "tuesdayWorkingDay";
  @SerializedName(SERIALIZED_NAME_TUESDAY_WORKING_DAY)
  private Boolean tuesdayWorkingDay;

  public static final String SERIALIZED_NAME_WEDNESDAY_WORKING_DAY = "wednesdayWorkingDay";
  @SerializedName(SERIALIZED_NAME_WEDNESDAY_WORKING_DAY)
  private Boolean wednesdayWorkingDay;

  public static final String SERIALIZED_NAME_THURSDAY_WORKING_DAY = "thursdayWorkingDay";
  @SerializedName(SERIALIZED_NAME_THURSDAY_WORKING_DAY)
  private Boolean thursdayWorkingDay;

  public static final String SERIALIZED_NAME_FRIDAY_WORKING_DAY = "fridayWorkingDay";
  @SerializedName(SERIALIZED_NAME_FRIDAY_WORKING_DAY)
  private Boolean fridayWorkingDay;

  public static final String SERIALIZED_NAME_SATURDAY_WORKING_DAY = "saturdayWorkingDay";
  @SerializedName(SERIALIZED_NAME_SATURDAY_WORKING_DAY)
  private Boolean saturdayWorkingDay;

  public static final String SERIALIZED_NAME_SUNDAY_WORKING_DAY = "sundayWorkingDay";
  @SerializedName(SERIALIZED_NAME_SUNDAY_WORKING_DAY)
  private Boolean sundayWorkingDay;

  public static final String SERIALIZED_NAME_TRACK_ATTENDANCE = "trackAttendance";
  @SerializedName(SERIALIZED_NAME_TRACK_ATTENDANCE)
  private Boolean trackAttendance;

  public EmployeesCreateInactiveEmployeeRequestWorkSchedule() {
  }

  public EmployeesCreateInactiveEmployeeRequestWorkSchedule mondayWorkingDay(Boolean mondayWorkingDay) {
    
    
    
    
    this.mondayWorkingDay = mondayWorkingDay;
    return this;
  }

   /**
   * Allow to indicate if mondays are working days for the employee.
   * @return mondayWorkingDay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Allow to indicate if mondays are working days for the employee.")

  public Boolean getMondayWorkingDay() {
    return mondayWorkingDay;
  }


  public void setMondayWorkingDay(Boolean mondayWorkingDay) {
    
    
    
    this.mondayWorkingDay = mondayWorkingDay;
  }


  public EmployeesCreateInactiveEmployeeRequestWorkSchedule tuesdayWorkingDay(Boolean tuesdayWorkingDay) {
    
    
    
    
    this.tuesdayWorkingDay = tuesdayWorkingDay;
    return this;
  }

   /**
   * Allow to indicate if tuesdays are working days for the employee.
   * @return tuesdayWorkingDay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Allow to indicate if tuesdays are working days for the employee.")

  public Boolean getTuesdayWorkingDay() {
    return tuesdayWorkingDay;
  }


  public void setTuesdayWorkingDay(Boolean tuesdayWorkingDay) {
    
    
    
    this.tuesdayWorkingDay = tuesdayWorkingDay;
  }


  public EmployeesCreateInactiveEmployeeRequestWorkSchedule wednesdayWorkingDay(Boolean wednesdayWorkingDay) {
    
    
    
    
    this.wednesdayWorkingDay = wednesdayWorkingDay;
    return this;
  }

   /**
   * Allow to indicate if wednesdays are working days for the employee.
   * @return wednesdayWorkingDay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Allow to indicate if wednesdays are working days for the employee.")

  public Boolean getWednesdayWorkingDay() {
    return wednesdayWorkingDay;
  }


  public void setWednesdayWorkingDay(Boolean wednesdayWorkingDay) {
    
    
    
    this.wednesdayWorkingDay = wednesdayWorkingDay;
  }


  public EmployeesCreateInactiveEmployeeRequestWorkSchedule thursdayWorkingDay(Boolean thursdayWorkingDay) {
    
    
    
    
    this.thursdayWorkingDay = thursdayWorkingDay;
    return this;
  }

   /**
   * Allow to indicate if thursdays are working days for the employee.
   * @return thursdayWorkingDay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Allow to indicate if thursdays are working days for the employee.")

  public Boolean getThursdayWorkingDay() {
    return thursdayWorkingDay;
  }


  public void setThursdayWorkingDay(Boolean thursdayWorkingDay) {
    
    
    
    this.thursdayWorkingDay = thursdayWorkingDay;
  }


  public EmployeesCreateInactiveEmployeeRequestWorkSchedule fridayWorkingDay(Boolean fridayWorkingDay) {
    
    
    
    
    this.fridayWorkingDay = fridayWorkingDay;
    return this;
  }

   /**
   * Allow to indicate if fridays are working days for the employee.
   * @return fridayWorkingDay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Allow to indicate if fridays are working days for the employee.")

  public Boolean getFridayWorkingDay() {
    return fridayWorkingDay;
  }


  public void setFridayWorkingDay(Boolean fridayWorkingDay) {
    
    
    
    this.fridayWorkingDay = fridayWorkingDay;
  }


  public EmployeesCreateInactiveEmployeeRequestWorkSchedule saturdayWorkingDay(Boolean saturdayWorkingDay) {
    
    
    
    
    this.saturdayWorkingDay = saturdayWorkingDay;
    return this;
  }

   /**
   * Allow to indicate if saturdays are working days for the employee.
   * @return saturdayWorkingDay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Allow to indicate if saturdays are working days for the employee.")

  public Boolean getSaturdayWorkingDay() {
    return saturdayWorkingDay;
  }


  public void setSaturdayWorkingDay(Boolean saturdayWorkingDay) {
    
    
    
    this.saturdayWorkingDay = saturdayWorkingDay;
  }


  public EmployeesCreateInactiveEmployeeRequestWorkSchedule sundayWorkingDay(Boolean sundayWorkingDay) {
    
    
    
    
    this.sundayWorkingDay = sundayWorkingDay;
    return this;
  }

   /**
   * Allow to indicate if sundays are working days for the employee.
   * @return sundayWorkingDay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Allow to indicate if sundays are working days for the employee.")

  public Boolean getSundayWorkingDay() {
    return sundayWorkingDay;
  }


  public void setSundayWorkingDay(Boolean sundayWorkingDay) {
    
    
    
    this.sundayWorkingDay = sundayWorkingDay;
  }


  public EmployeesCreateInactiveEmployeeRequestWorkSchedule trackAttendance(Boolean trackAttendance) {
    
    
    
    
    this.trackAttendance = trackAttendance;
    return this;
  }

   /**
   * Allow to activate or deactivate the attendance tracking for the employee.
   * @return trackAttendance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Allow to activate or deactivate the attendance tracking for the employee.")

  public Boolean getTrackAttendance() {
    return trackAttendance;
  }


  public void setTrackAttendance(Boolean trackAttendance) {
    
    
    
    this.trackAttendance = trackAttendance;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeesCreateInactiveEmployeeRequestWorkSchedule instance itself
   */
  public EmployeesCreateInactiveEmployeeRequestWorkSchedule putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeesCreateInactiveEmployeeRequestWorkSchedule employeesCreateInactiveEmployeeRequestWorkSchedule = (EmployeesCreateInactiveEmployeeRequestWorkSchedule) o;
    return Objects.equals(this.mondayWorkingDay, employeesCreateInactiveEmployeeRequestWorkSchedule.mondayWorkingDay) &&
        Objects.equals(this.tuesdayWorkingDay, employeesCreateInactiveEmployeeRequestWorkSchedule.tuesdayWorkingDay) &&
        Objects.equals(this.wednesdayWorkingDay, employeesCreateInactiveEmployeeRequestWorkSchedule.wednesdayWorkingDay) &&
        Objects.equals(this.thursdayWorkingDay, employeesCreateInactiveEmployeeRequestWorkSchedule.thursdayWorkingDay) &&
        Objects.equals(this.fridayWorkingDay, employeesCreateInactiveEmployeeRequestWorkSchedule.fridayWorkingDay) &&
        Objects.equals(this.saturdayWorkingDay, employeesCreateInactiveEmployeeRequestWorkSchedule.saturdayWorkingDay) &&
        Objects.equals(this.sundayWorkingDay, employeesCreateInactiveEmployeeRequestWorkSchedule.sundayWorkingDay) &&
        Objects.equals(this.trackAttendance, employeesCreateInactiveEmployeeRequestWorkSchedule.trackAttendance)&&
        Objects.equals(this.additionalProperties, employeesCreateInactiveEmployeeRequestWorkSchedule.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mondayWorkingDay, tuesdayWorkingDay, wednesdayWorkingDay, thursdayWorkingDay, fridayWorkingDay, saturdayWorkingDay, sundayWorkingDay, trackAttendance, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeesCreateInactiveEmployeeRequestWorkSchedule {\n");
    sb.append("    mondayWorkingDay: ").append(toIndentedString(mondayWorkingDay)).append("\n");
    sb.append("    tuesdayWorkingDay: ").append(toIndentedString(tuesdayWorkingDay)).append("\n");
    sb.append("    wednesdayWorkingDay: ").append(toIndentedString(wednesdayWorkingDay)).append("\n");
    sb.append("    thursdayWorkingDay: ").append(toIndentedString(thursdayWorkingDay)).append("\n");
    sb.append("    fridayWorkingDay: ").append(toIndentedString(fridayWorkingDay)).append("\n");
    sb.append("    saturdayWorkingDay: ").append(toIndentedString(saturdayWorkingDay)).append("\n");
    sb.append("    sundayWorkingDay: ").append(toIndentedString(sundayWorkingDay)).append("\n");
    sb.append("    trackAttendance: ").append(toIndentedString(trackAttendance)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mondayWorkingDay");
    openapiFields.add("tuesdayWorkingDay");
    openapiFields.add("wednesdayWorkingDay");
    openapiFields.add("thursdayWorkingDay");
    openapiFields.add("fridayWorkingDay");
    openapiFields.add("saturdayWorkingDay");
    openapiFields.add("sundayWorkingDay");
    openapiFields.add("trackAttendance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeesCreateInactiveEmployeeRequestWorkSchedule
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeesCreateInactiveEmployeeRequestWorkSchedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeesCreateInactiveEmployeeRequestWorkSchedule is not found in the empty JSON string", EmployeesCreateInactiveEmployeeRequestWorkSchedule.openapiRequiredFields.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeesCreateInactiveEmployeeRequestWorkSchedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeesCreateInactiveEmployeeRequestWorkSchedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeesCreateInactiveEmployeeRequestWorkSchedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeesCreateInactiveEmployeeRequestWorkSchedule.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeesCreateInactiveEmployeeRequestWorkSchedule>() {
           @Override
           public void write(JsonWriter out, EmployeesCreateInactiveEmployeeRequestWorkSchedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeesCreateInactiveEmployeeRequestWorkSchedule read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeesCreateInactiveEmployeeRequestWorkSchedule instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeesCreateInactiveEmployeeRequestWorkSchedule given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeesCreateInactiveEmployeeRequestWorkSchedule
  * @throws IOException if the JSON string is invalid with respect to EmployeesCreateInactiveEmployeeRequestWorkSchedule
  */
  public static EmployeesCreateInactiveEmployeeRequestWorkSchedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeesCreateInactiveEmployeeRequestWorkSchedule.class);
  }

 /**
  * Convert an instance of EmployeesCreateInactiveEmployeeRequestWorkSchedule to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

