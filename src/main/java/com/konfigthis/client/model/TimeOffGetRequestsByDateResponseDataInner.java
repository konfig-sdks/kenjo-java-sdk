/*
 * Kenjo API
 * Before starting to use the Kenjo API, you have to request the API activation for a sandbox or production environment to the Kenjo Customer Success team. After that, an admin user has to go to *Settings > Integrations > API keys*, to generate the **API Key**. Follow the steps described in the **Autentication section** of this document. <br>The API key is needed to request the bearer token. Each endpoint callout requires a valid bearer token in the Authorization header. Once the token is retrieved, it will be useful during the time limit indicated by the 'expiration date'.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TimeOffGetRequestsByDateResponseDataInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TimeOffGetRequestsByDateResponseDataInner {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "_id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_USER_ID = "_userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_TIME_OF_TYPE_ID = "_timeOfTypeId";
  @SerializedName(SERIALIZED_NAME_TIME_OF_TYPE_ID)
  private String timeOfTypeId;

  public static final String SERIALIZED_NAME_POLICY_ID = "_policyId";
  @SerializedName(SERIALIZED_NAME_POLICY_ID)
  private String policyId;

  public static final String SERIALIZED_NAME_POLICY_NAME = "policyName";
  @SerializedName(SERIALIZED_NAME_POLICY_NAME)
  private String policyName;

  public static final String SERIALIZED_NAME_POLICY_TYPE = "_policyType";
  @SerializedName(SERIALIZED_NAME_POLICY_TYPE)
  private String policyType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Double duration;

  public static final String SERIALIZED_NAME_WORKING_TIME = "workingTime";
  @SerializedName(SERIALIZED_NAME_WORKING_TIME)
  private Double workingTime;

  public static final String SERIALIZED_NAME_CREATED_AT = "_createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_HAS_ATTACHMENT = "hasAttachment";
  @SerializedName(SERIALIZED_NAME_HAS_ATTACHMENT)
  private Boolean hasAttachment;

  public TimeOffGetRequestsByDateResponseDataInner() {
  }

  public TimeOffGetRequestsByDateResponseDataInner description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * The provided description on the time-off request.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "I'll take 8 days-off.", value = "The provided description on the time-off request.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public TimeOffGetRequestsByDateResponseDataInner id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The Kenjo _id of the returned time-off request.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "80a2db290da29e126a18789f", value = "The Kenjo _id of the returned time-off request.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public TimeOffGetRequestsByDateResponseDataInner userId(String userId) {
    
    
    
    
    this.userId = userId;
    return this;
  }

   /**
   * The employee id associated to the time-off request.
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "60a2db290da29e126a18789a1", value = "The employee id associated to the time-off request.")

  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    
    
    
    this.userId = userId;
  }


  public TimeOffGetRequestsByDateResponseDataInner timeOfTypeId(String timeOfTypeId) {
    
    
    
    
    this.timeOfTypeId = timeOfTypeId;
    return this;
  }

   /**
   * The time-off type id associated to the time-off request.
   * @return timeOfTypeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "50a2db290da29e126a187896", value = "The time-off type id associated to the time-off request.")

  public String getTimeOfTypeId() {
    return timeOfTypeId;
  }


  public void setTimeOfTypeId(String timeOfTypeId) {
    
    
    
    this.timeOfTypeId = timeOfTypeId;
  }


  public TimeOffGetRequestsByDateResponseDataInner policyId(String policyId) {
    
    
    
    
    this.policyId = policyId;
    return this;
  }

   /**
   * The policy id associated to the time-off request.
   * @return policyId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "20a2db290da29e126a187894", value = "The policy id associated to the time-off request.")

  public String getPolicyId() {
    return policyId;
  }


  public void setPolicyId(String policyId) {
    
    
    
    this.policyId = policyId;
  }


  public TimeOffGetRequestsByDateResponseDataInner policyName(String policyName) {
    
    
    
    
    this.policyName = policyName;
    return this;
  }

   /**
   * The name of the policy id associated to the time-off request.
   * @return policyName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Holidays for Tech team", value = "The name of the policy id associated to the time-off request.")

  public String getPolicyName() {
    return policyName;
  }


  public void setPolicyName(String policyName) {
    
    
    
    this.policyName = policyName;
  }


  public TimeOffGetRequestsByDateResponseDataInner policyType(String policyType) {
    
    
    
    
    this.policyType = policyType;
    return this;
  }

   /**
   * The type of the policy associated to the time-off request. It can be type *Hour* or *Day*.
   * @return policyType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Day", value = "The type of the policy associated to the time-off request. It can be type *Hour* or *Day*.")

  public String getPolicyType() {
    return policyType;
  }


  public void setPolicyType(String policyType) {
    
    
    
    this.policyType = policyType;
  }


  public TimeOffGetRequestsByDateResponseDataInner status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The status of the time-off request.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Submitted", value = "The status of the time-off request.")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public TimeOffGetRequestsByDateResponseDataInner from(String from) {
    
    
    
    
    this.from = from;
    return this;
  }

   /**
   * The from date of the time-off request in format YYYY-MM-DDThh:mm:ss.
   * @return from
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-01-30T00:00:00", value = "The from date of the time-off request in format YYYY-MM-DDThh:mm:ss.")

  public String getFrom() {
    return from;
  }


  public void setFrom(String from) {
    
    
    
    this.from = from;
  }


  public TimeOffGetRequestsByDateResponseDataInner to(String to) {
    
    
    
    
    this.to = to;
    return this;
  }

   /**
   * The to date of the time-off request in format YYYY-MM-DDThh:mm:ss.
   * @return to
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-02-10T00:00:00", value = "The to date of the time-off request in format YYYY-MM-DDThh:mm:ss.")

  public String getTo() {
    return to;
  }


  public void setTo(String to) {
    
    
    
    this.to = to;
  }


  public TimeOffGetRequestsByDateResponseDataInner duration(Double duration) {
    
    
    
    
    this.duration = duration;
    return this;
  }

  public TimeOffGetRequestsByDateResponseDataInner duration(Integer duration) {
    
    
    
    
    this.duration = duration.doubleValue();
    return this;
  }

   /**
   * The duration of the time-off request. It doesn&#39;t exclude bank holidays nor non-working days.
   * @return duration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "11", value = "The duration of the time-off request. It doesn't exclude bank holidays nor non-working days.")

  public Double getDuration() {
    return duration;
  }


  public void setDuration(Double duration) {
    
    
    
    this.duration = duration;
  }


  public TimeOffGetRequestsByDateResponseDataInner workingTime(Double workingTime) {
    
    
    
    
    this.workingTime = workingTime;
    return this;
  }

  public TimeOffGetRequestsByDateResponseDataInner workingTime(Integer workingTime) {
    
    
    
    
    this.workingTime = workingTime.doubleValue();
    return this;
  }

   /**
   * The duration of the time-off request. It excludes bank holidays and non-working days.
   * @return workingTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8", value = "The duration of the time-off request. It excludes bank holidays and non-working days.")

  public Double getWorkingTime() {
    return workingTime;
  }


  public void setWorkingTime(Double workingTime) {
    
    
    
    this.workingTime = workingTime;
  }


  public TimeOffGetRequestsByDateResponseDataInner createdAt(String createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date that the time-off request was created in format YYYY-MM-DDThh:mm:ss.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-02-10T00:00:00", value = "The date that the time-off request was created in format YYYY-MM-DDThh:mm:ss.")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public TimeOffGetRequestsByDateResponseDataInner hasAttachment(Boolean hasAttachment) {
    
    
    
    
    this.hasAttachment = hasAttachment;
    return this;
  }

   /**
   * Determines if the time-off request has related attachments.
   * @return hasAttachment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Determines if the time-off request has related attachments.")

  public Boolean getHasAttachment() {
    return hasAttachment;
  }


  public void setHasAttachment(Boolean hasAttachment) {
    
    
    
    this.hasAttachment = hasAttachment;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TimeOffGetRequestsByDateResponseDataInner instance itself
   */
  public TimeOffGetRequestsByDateResponseDataInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeOffGetRequestsByDateResponseDataInner timeOffGetRequestsByDateResponseDataInner = (TimeOffGetRequestsByDateResponseDataInner) o;
    return Objects.equals(this.description, timeOffGetRequestsByDateResponseDataInner.description) &&
        Objects.equals(this.id, timeOffGetRequestsByDateResponseDataInner.id) &&
        Objects.equals(this.userId, timeOffGetRequestsByDateResponseDataInner.userId) &&
        Objects.equals(this.timeOfTypeId, timeOffGetRequestsByDateResponseDataInner.timeOfTypeId) &&
        Objects.equals(this.policyId, timeOffGetRequestsByDateResponseDataInner.policyId) &&
        Objects.equals(this.policyName, timeOffGetRequestsByDateResponseDataInner.policyName) &&
        Objects.equals(this.policyType, timeOffGetRequestsByDateResponseDataInner.policyType) &&
        Objects.equals(this.status, timeOffGetRequestsByDateResponseDataInner.status) &&
        Objects.equals(this.from, timeOffGetRequestsByDateResponseDataInner.from) &&
        Objects.equals(this.to, timeOffGetRequestsByDateResponseDataInner.to) &&
        Objects.equals(this.duration, timeOffGetRequestsByDateResponseDataInner.duration) &&
        Objects.equals(this.workingTime, timeOffGetRequestsByDateResponseDataInner.workingTime) &&
        Objects.equals(this.createdAt, timeOffGetRequestsByDateResponseDataInner.createdAt) &&
        Objects.equals(this.hasAttachment, timeOffGetRequestsByDateResponseDataInner.hasAttachment)&&
        Objects.equals(this.additionalProperties, timeOffGetRequestsByDateResponseDataInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, userId, timeOfTypeId, policyId, policyName, policyType, status, from, to, duration, workingTime, createdAt, hasAttachment, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeOffGetRequestsByDateResponseDataInner {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    timeOfTypeId: ").append(toIndentedString(timeOfTypeId)).append("\n");
    sb.append("    policyId: ").append(toIndentedString(policyId)).append("\n");
    sb.append("    policyName: ").append(toIndentedString(policyName)).append("\n");
    sb.append("    policyType: ").append(toIndentedString(policyType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    workingTime: ").append(toIndentedString(workingTime)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    hasAttachment: ").append(toIndentedString(hasAttachment)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("_id");
    openapiFields.add("_userId");
    openapiFields.add("_timeOfTypeId");
    openapiFields.add("_policyId");
    openapiFields.add("policyName");
    openapiFields.add("_policyType");
    openapiFields.add("status");
    openapiFields.add("from");
    openapiFields.add("to");
    openapiFields.add("duration");
    openapiFields.add("workingTime");
    openapiFields.add("_createdAt");
    openapiFields.add("hasAttachment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TimeOffGetRequestsByDateResponseDataInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TimeOffGetRequestsByDateResponseDataInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeOffGetRequestsByDateResponseDataInner is not found in the empty JSON string", TimeOffGetRequestsByDateResponseDataInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("_id") != null && !jsonObj.get("_id").isJsonNull()) && !jsonObj.get("_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_id").toString()));
      }
      if ((jsonObj.get("_userId") != null && !jsonObj.get("_userId").isJsonNull()) && !jsonObj.get("_userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_userId").toString()));
      }
      if ((jsonObj.get("_timeOfTypeId") != null && !jsonObj.get("_timeOfTypeId").isJsonNull()) && !jsonObj.get("_timeOfTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_timeOfTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_timeOfTypeId").toString()));
      }
      if ((jsonObj.get("_policyId") != null && !jsonObj.get("_policyId").isJsonNull()) && !jsonObj.get("_policyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_policyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_policyId").toString()));
      }
      if ((jsonObj.get("policyName") != null && !jsonObj.get("policyName").isJsonNull()) && !jsonObj.get("policyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyName").toString()));
      }
      if ((jsonObj.get("_policyType") != null && !jsonObj.get("_policyType").isJsonNull()) && !jsonObj.get("_policyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_policyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_policyType").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if ((jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) && !jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      if ((jsonObj.get("_createdAt") != null && !jsonObj.get("_createdAt").isJsonNull()) && !jsonObj.get("_createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_createdAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeOffGetRequestsByDateResponseDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeOffGetRequestsByDateResponseDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeOffGetRequestsByDateResponseDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeOffGetRequestsByDateResponseDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeOffGetRequestsByDateResponseDataInner>() {
           @Override
           public void write(JsonWriter out, TimeOffGetRequestsByDateResponseDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeOffGetRequestsByDateResponseDataInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TimeOffGetRequestsByDateResponseDataInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TimeOffGetRequestsByDateResponseDataInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TimeOffGetRequestsByDateResponseDataInner
  * @throws IOException if the JSON string is invalid with respect to TimeOffGetRequestsByDateResponseDataInner
  */
  public static TimeOffGetRequestsByDateResponseDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeOffGetRequestsByDateResponseDataInner.class);
  }

 /**
  * Convert an instance of TimeOffGetRequestsByDateResponseDataInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

