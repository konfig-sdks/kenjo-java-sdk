/*
 * Kenjo API
 * Before starting to use the Kenjo API, you have to request the API activation for a sandbox or production environment to the Kenjo Customer Success team. After that, an admin user has to go to *Settings > Integrations > API keys*, to generate the **API Key**. Follow the steps described in the **Autentication section** of this document. <br>The API key is needed to request the bearer token. Each endpoint callout requires a valid bearer token in the Authorization header. Once the token is retrieved, it will be useful during the time limit indicated by the 'expiration date'.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CompensationListAdditionalPaymentsResponseDataInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CompensationListAdditionalPaymentsResponseDataInner {
  public static final String SERIALIZED_NAME_ID = "_id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_USER_ID = "_userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_COMPANY_ID = "_companyId";
  @SerializedName(SERIALIZED_NAME_COMPANY_ID)
  private String companyId;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private String effectiveDate;

  public static final String SERIALIZED_NAME_ADDITIONAL_PAYMENT_TYPE_ID = "additionalPaymentTypeId";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_PAYMENT_TYPE_ID)
  private String additionalPaymentTypeId;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private Double currency;

  public CompensationListAdditionalPaymentsResponseDataInner() {
  }

  public CompensationListAdditionalPaymentsResponseDataInner id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The Kenjo _id of the returned additional payment.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "80a2db290da29e126a18789f", value = "The Kenjo _id of the returned additional payment.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public CompensationListAdditionalPaymentsResponseDataInner userId(String userId) {
    
    
    
    
    this.userId = userId;
    return this;
  }

   /**
   * The employee id associated to the additional payment.
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "60a2db290da29e126a18789a1", value = "The employee id associated to the additional payment.")

  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    
    
    
    this.userId = userId;
  }


  public CompensationListAdditionalPaymentsResponseDataInner companyId(String companyId) {
    
    
    
    
    this.companyId = companyId;
    return this;
  }

   /**
   * The company id associated to the additional payment.
   * @return companyId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "50a2db290da29e126a187896", value = "The company id associated to the additional payment.")

  public String getCompanyId() {
    return companyId;
  }


  public void setCompanyId(String companyId) {
    
    
    
    this.companyId = companyId;
  }


  public CompensationListAdditionalPaymentsResponseDataInner effectiveDate(String effectiveDate) {
    
    
    
    
    this.effectiveDate = effectiveDate;
    return this;
  }

   /**
   * The effective date of the additional payment in format YYYY-MM-DDThh:mm:ss.
   * @return effectiveDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-01-30T00:00:00", value = "The effective date of the additional payment in format YYYY-MM-DDThh:mm:ss.")

  public String getEffectiveDate() {
    return effectiveDate;
  }


  public void setEffectiveDate(String effectiveDate) {
    
    
    
    this.effectiveDate = effectiveDate;
  }


  public CompensationListAdditionalPaymentsResponseDataInner additionalPaymentTypeId(String additionalPaymentTypeId) {
    
    
    
    
    this.additionalPaymentTypeId = additionalPaymentTypeId;
    return this;
  }

   /**
   * The id of the addional payment type in format YYYY-MM-DDThh:mm:ss.
   * @return additionalPaymentTypeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "50a2db290da29e126a187898", value = "The id of the addional payment type in format YYYY-MM-DDThh:mm:ss.")

  public String getAdditionalPaymentTypeId() {
    return additionalPaymentTypeId;
  }


  public void setAdditionalPaymentTypeId(String additionalPaymentTypeId) {
    
    
    
    this.additionalPaymentTypeId = additionalPaymentTypeId;
  }


  public CompensationListAdditionalPaymentsResponseDataInner amount(Double amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

  public CompensationListAdditionalPaymentsResponseDataInner amount(Integer amount) {
    
    
    
    
    this.amount = amount.doubleValue();
    return this;
  }

   /**
   * The the amount of money associated to the additional payment.
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3000", value = "The the amount of money associated to the additional payment.")

  public Double getAmount() {
    return amount;
  }


  public void setAmount(Double amount) {
    
    
    
    this.amount = amount;
  }


  public CompensationListAdditionalPaymentsResponseDataInner currency(Double currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

  public CompensationListAdditionalPaymentsResponseDataInner currency(Integer currency) {
    
    
    
    
    this.currency = currency.doubleValue();
    return this;
  }

   /**
   * This currency in ISO 4217.
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This currency in ISO 4217.")

  public Double getCurrency() {
    return currency;
  }


  public void setCurrency(Double currency) {
    
    
    
    this.currency = currency;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CompensationListAdditionalPaymentsResponseDataInner instance itself
   */
  public CompensationListAdditionalPaymentsResponseDataInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompensationListAdditionalPaymentsResponseDataInner compensationListAdditionalPaymentsResponseDataInner = (CompensationListAdditionalPaymentsResponseDataInner) o;
    return Objects.equals(this.id, compensationListAdditionalPaymentsResponseDataInner.id) &&
        Objects.equals(this.userId, compensationListAdditionalPaymentsResponseDataInner.userId) &&
        Objects.equals(this.companyId, compensationListAdditionalPaymentsResponseDataInner.companyId) &&
        Objects.equals(this.effectiveDate, compensationListAdditionalPaymentsResponseDataInner.effectiveDate) &&
        Objects.equals(this.additionalPaymentTypeId, compensationListAdditionalPaymentsResponseDataInner.additionalPaymentTypeId) &&
        Objects.equals(this.amount, compensationListAdditionalPaymentsResponseDataInner.amount) &&
        Objects.equals(this.currency, compensationListAdditionalPaymentsResponseDataInner.currency)&&
        Objects.equals(this.additionalProperties, compensationListAdditionalPaymentsResponseDataInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, companyId, effectiveDate, additionalPaymentTypeId, amount, currency, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompensationListAdditionalPaymentsResponseDataInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    companyId: ").append(toIndentedString(companyId)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    additionalPaymentTypeId: ").append(toIndentedString(additionalPaymentTypeId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_id");
    openapiFields.add("_userId");
    openapiFields.add("_companyId");
    openapiFields.add("effectiveDate");
    openapiFields.add("additionalPaymentTypeId");
    openapiFields.add("amount");
    openapiFields.add("currency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CompensationListAdditionalPaymentsResponseDataInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CompensationListAdditionalPaymentsResponseDataInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompensationListAdditionalPaymentsResponseDataInner is not found in the empty JSON string", CompensationListAdditionalPaymentsResponseDataInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("_id") != null && !jsonObj.get("_id").isJsonNull()) && !jsonObj.get("_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_id").toString()));
      }
      if ((jsonObj.get("_userId") != null && !jsonObj.get("_userId").isJsonNull()) && !jsonObj.get("_userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_userId").toString()));
      }
      if ((jsonObj.get("_companyId") != null && !jsonObj.get("_companyId").isJsonNull()) && !jsonObj.get("_companyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_companyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_companyId").toString()));
      }
      if ((jsonObj.get("effectiveDate") != null && !jsonObj.get("effectiveDate").isJsonNull()) && !jsonObj.get("effectiveDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectiveDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectiveDate").toString()));
      }
      if ((jsonObj.get("additionalPaymentTypeId") != null && !jsonObj.get("additionalPaymentTypeId").isJsonNull()) && !jsonObj.get("additionalPaymentTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalPaymentTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalPaymentTypeId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompensationListAdditionalPaymentsResponseDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompensationListAdditionalPaymentsResponseDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompensationListAdditionalPaymentsResponseDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompensationListAdditionalPaymentsResponseDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CompensationListAdditionalPaymentsResponseDataInner>() {
           @Override
           public void write(JsonWriter out, CompensationListAdditionalPaymentsResponseDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CompensationListAdditionalPaymentsResponseDataInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CompensationListAdditionalPaymentsResponseDataInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CompensationListAdditionalPaymentsResponseDataInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CompensationListAdditionalPaymentsResponseDataInner
  * @throws IOException if the JSON string is invalid with respect to CompensationListAdditionalPaymentsResponseDataInner
  */
  public static CompensationListAdditionalPaymentsResponseDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompensationListAdditionalPaymentsResponseDataInner.class);
  }

 /**
  * Convert an instance of CompensationListAdditionalPaymentsResponseDataInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

